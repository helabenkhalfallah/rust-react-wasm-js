{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41","program":"/Users/helabenkhalfallah/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","js_sys","--edition=2018","/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=1ed7a07e8c688d5f","-C","extra-filename=-1ed7a07e8c688d5f","--out-dir","/Users/helabenkhalfallah/Desktop/hela_workspace/github_workspace/rust-react-wasm-js/target/rls/debug/deps","-L","dependency=/Users/helabenkhalfallah/Desktop/hela_workspace/github_workspace/rust-react-wasm-js/target/rls/debug/deps","--extern","wasm_bindgen=/Users/helabenkhalfallah/Desktop/hela_workspace/github_workspace/rust-react-wasm-js/target/rls/debug/deps/libwasm_bindgen-a9b3a2cefa932fd4.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/helabenkhalfallah/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/helabenkhalfallah/Desktop/hela_workspace/github_workspace/rust-react-wasm-js/target/rls/debug/deps/libjs_sys-1ed7a07e8c688d5f.rmeta"},"prelude":{"crate_id":{"name":"js_sys","disambiguator":[13174570106667341359,10218971515137707070]},"crate_root":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src","external_crates":[{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12678783859402539130,11033699271647822562]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5902495869598878631,6483651549774204679]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12311488937759207811,9591695617658421232]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13642764918293034548,9567326413417207759]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[13989086203811079768,14781321679734955535]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[18262239609673298908,5174085264251780333]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15596655843449967889,8729491543963844827]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8633493352746497996,3308549486174864674]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[9090856330303166257,15266389826979080272]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[10275868503320404072,15700038594031858524]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[16931781941529345914,7757858263785678856]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[17386117254425836477,8366695672852535875]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6497267535012603728,15523194060056832509]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[5307688171077319232,12990389752959085457]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":15,"id":{"name":"wasm_bindgen","disambiguator":[13566405041013362250,2002775207217753951]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":16,"id":{"name":"wasm_bindgen_macro","disambiguator":[9365144695337594412,4155006036067711498]}},{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","num":17,"id":{"name":"cfg_if","disambiguator":[15180341436003802796,17175099231541996214]}}],"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":0,"byte_end":248466,"line_start":1,"line_end":5035,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":0,"byte_end":248466,"line_start":1,"line_end":5035,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":342},{"krate":0,"index":353},{"krate":0,"index":351},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":159},{"krate":0,"index":213},{"krate":0,"index":216},{"krate":0,"index":219},{"krate":0,"index":222},{"krate":0,"index":225},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":273},{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":288},{"krate":0,"index":291},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":306},{"krate":0,"index":309},{"krate":0,"index":312},{"krate":0,"index":315},{"krate":0,"index":318},{"krate":0,"index":321},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":355},{"krate":0,"index":362},{"krate":0,"index":359},{"krate":0,"index":8},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":439},{"krate":0,"index":450},{"krate":0,"index":448},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":365},{"krate":0,"index":418},{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":523},{"krate":0,"index":527},{"krate":0,"index":525},{"krate":0,"index":452},{"krate":0,"index":505},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":535},{"krate":0,"index":27},{"krate":0,"index":633},{"krate":0,"index":642},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":566},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":630},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":799},{"krate":0,"index":810},{"krate":0,"index":808},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":644},{"krate":0,"index":697},{"krate":0,"index":700},{"krate":0,"index":703},{"krate":0,"index":706},{"krate":0,"index":709},{"krate":0,"index":712},{"krate":0,"index":715},{"krate":0,"index":718},{"krate":0,"index":721},{"krate":0,"index":724},{"krate":0,"index":727},{"krate":0,"index":730},{"krate":0,"index":733},{"krate":0,"index":736},{"krate":0,"index":739},{"krate":0,"index":742},{"krate":0,"index":745},{"krate":0,"index":748},{"krate":0,"index":751},{"krate":0,"index":754},{"krate":0,"index":757},{"krate":0,"index":760},{"krate":0,"index":763},{"krate":0,"index":766},{"krate":0,"index":769},{"krate":0,"index":772},{"krate":0,"index":775},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":796},{"krate":0,"index":889},{"krate":0,"index":900},{"krate":0,"index":898},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":812},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":880},{"krate":0,"index":883},{"krate":0,"index":886},{"krate":0,"index":970},{"krate":0,"index":981},{"krate":0,"index":979},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":902},{"krate":0,"index":955},{"krate":0,"index":958},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":1088},{"krate":0,"index":1099},{"krate":0,"index":1097},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":983},{"krate":0,"index":1037},{"krate":0,"index":1040},{"krate":0,"index":1043},{"krate":0,"index":1046},{"krate":0,"index":1049},{"krate":0,"index":1052},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1061},{"krate":0,"index":1064},{"krate":0,"index":1067},{"krate":0,"index":1070},{"krate":0,"index":1073},{"krate":0,"index":1076},{"krate":0,"index":1079},{"krate":0,"index":1082},{"krate":0,"index":1085},{"krate":0,"index":37},{"krate":0,"index":1169},{"krate":0,"index":1180},{"krate":0,"index":1178},{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1171},{"krate":0,"index":1172},{"krate":0,"index":1101},{"krate":0,"index":1154},{"krate":0,"index":1157},{"krate":0,"index":1160},{"krate":0,"index":1163},{"krate":0,"index":1166},{"krate":0,"index":1265},{"krate":0,"index":1276},{"krate":0,"index":1274},{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1182},{"krate":0,"index":1235},{"krate":0,"index":1238},{"krate":0,"index":1241},{"krate":0,"index":1244},{"krate":0,"index":1247},{"krate":0,"index":1250},{"krate":0,"index":1253},{"krate":0,"index":1256},{"krate":0,"index":1259},{"krate":0,"index":1262},{"krate":0,"index":1278},{"krate":0,"index":1281},{"krate":0,"index":1284},{"krate":0,"index":1344},{"krate":0,"index":1348},{"krate":0,"index":1346},{"krate":0,"index":1287},{"krate":0,"index":1341},{"krate":0,"index":39},{"krate":0,"index":1464},{"krate":0,"index":1468},{"krate":0,"index":1466},{"krate":0,"index":1407},{"krate":0,"index":1461},{"krate":0,"index":41},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":55},{"krate":0,"index":59},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":1535},{"krate":0,"index":1546},{"krate":0,"index":1544},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":1470},{"krate":0,"index":1523},{"krate":0,"index":1526},{"krate":0,"index":1529},{"krate":0,"index":1532},{"krate":0,"index":70},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1618},{"krate":0,"index":1673},{"krate":0,"index":1676},{"krate":0,"index":1679},{"krate":0,"index":1682},{"krate":0,"index":1685},{"krate":0,"index":1688},{"krate":0,"index":1691},{"krate":0,"index":1694},{"krate":0,"index":1697},{"krate":0,"index":1700},{"krate":0,"index":1703},{"krate":0,"index":1706},{"krate":0,"index":1709},{"krate":0,"index":1712},{"krate":0,"index":1715},{"krate":0,"index":72},{"krate":0,"index":81},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1728},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":1987},{"krate":0,"index":1998},{"krate":0,"index":1996},{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1754},{"krate":0,"index":1807},{"krate":0,"index":1810},{"krate":0,"index":1813},{"krate":0,"index":1816},{"krate":0,"index":1819},{"krate":0,"index":1822},{"krate":0,"index":1825},{"krate":0,"index":1828},{"krate":0,"index":1831},{"krate":0,"index":1834},{"krate":0,"index":1837},{"krate":0,"index":1840},{"krate":0,"index":1843},{"krate":0,"index":1846},{"krate":0,"index":1849},{"krate":0,"index":1852},{"krate":0,"index":1855},{"krate":0,"index":1858},{"krate":0,"index":1861},{"krate":0,"index":1864},{"krate":0,"index":1867},{"krate":0,"index":1870},{"krate":0,"index":1873},{"krate":0,"index":1876},{"krate":0,"index":1879},{"krate":0,"index":1882},{"krate":0,"index":1885},{"krate":0,"index":1888},{"krate":0,"index":1891},{"krate":0,"index":1894},{"krate":0,"index":1897},{"krate":0,"index":1900},{"krate":0,"index":1903},{"krate":0,"index":1906},{"krate":0,"index":1909},{"krate":0,"index":1912},{"krate":0,"index":1915},{"krate":0,"index":1918},{"krate":0,"index":1921},{"krate":0,"index":1924},{"krate":0,"index":1927},{"krate":0,"index":1930},{"krate":0,"index":1933},{"krate":0,"index":1936},{"krate":0,"index":1939},{"krate":0,"index":1942},{"krate":0,"index":1945},{"krate":0,"index":1948},{"krate":0,"index":1951},{"krate":0,"index":1954},{"krate":0,"index":1957},{"krate":0,"index":1960},{"krate":0,"index":1963},{"krate":0,"index":1966},{"krate":0,"index":1969},{"krate":0,"index":1972},{"krate":0,"index":1975},{"krate":0,"index":1978},{"krate":0,"index":1981},{"krate":0,"index":1984},{"krate":0,"index":2146},{"krate":0,"index":2150},{"krate":0,"index":2148},{"krate":0,"index":2000},{"krate":0,"index":2053},{"krate":0,"index":2056},{"krate":0,"index":2059},{"krate":0,"index":2062},{"krate":0,"index":2065},{"krate":0,"index":2068},{"krate":0,"index":2071},{"krate":0,"index":2074},{"krate":0,"index":2077},{"krate":0,"index":2080},{"krate":0,"index":2083},{"krate":0,"index":2086},{"krate":0,"index":2089},{"krate":0,"index":2092},{"krate":0,"index":2095},{"krate":0,"index":2098},{"krate":0,"index":2101},{"krate":0,"index":2104},{"krate":0,"index":2107},{"krate":0,"index":2110},{"krate":0,"index":2113},{"krate":0,"index":2116},{"krate":0,"index":2119},{"krate":0,"index":2122},{"krate":0,"index":2125},{"krate":0,"index":2128},{"krate":0,"index":2131},{"krate":0,"index":2134},{"krate":0,"index":2137},{"krate":0,"index":2140},{"krate":0,"index":2143},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":2211},{"krate":0,"index":2215},{"krate":0,"index":2213},{"krate":0,"index":2152},{"krate":0,"index":2205},{"krate":0,"index":2208},{"krate":0,"index":2285},{"krate":0,"index":2296},{"krate":0,"index":2294},{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2287},{"krate":0,"index":2288},{"krate":0,"index":2217},{"krate":0,"index":2270},{"krate":0,"index":2273},{"krate":0,"index":2276},{"krate":0,"index":2279},{"krate":0,"index":2282},{"krate":0,"index":2366},{"krate":0,"index":2377},{"krate":0,"index":2375},{"krate":0,"index":2371},{"krate":0,"index":2372},{"krate":0,"index":2368},{"krate":0,"index":2369},{"krate":0,"index":2298},{"krate":0,"index":2351},{"krate":0,"index":2354},{"krate":0,"index":2357},{"krate":0,"index":2360},{"krate":0,"index":2363},{"krate":0,"index":91},{"krate":0,"index":2560},{"krate":0,"index":2571},{"krate":0,"index":2569},{"krate":0,"index":2565},{"krate":0,"index":2566},{"krate":0,"index":2562},{"krate":0,"index":2563},{"krate":0,"index":2417},{"krate":0,"index":2470},{"krate":0,"index":2473},{"krate":0,"index":2476},{"krate":0,"index":2479},{"krate":0,"index":2482},{"krate":0,"index":2485},{"krate":0,"index":2488},{"krate":0,"index":2491},{"krate":0,"index":2494},{"krate":0,"index":2497},{"krate":0,"index":2500},{"krate":0,"index":2503},{"krate":0,"index":2506},{"krate":0,"index":2509},{"krate":0,"index":2512},{"krate":0,"index":2515},{"krate":0,"index":2518},{"krate":0,"index":2521},{"krate":0,"index":2524},{"krate":0,"index":2527},{"krate":0,"index":2530},{"krate":0,"index":2533},{"krate":0,"index":2536},{"krate":0,"index":2539},{"krate":0,"index":2542},{"krate":0,"index":2545},{"krate":0,"index":2548},{"krate":0,"index":2551},{"krate":0,"index":2554},{"krate":0,"index":2557},{"krate":0,"index":2653},{"krate":0,"index":2664},{"krate":0,"index":2662},{"krate":0,"index":2658},{"krate":0,"index":2659},{"krate":0,"index":2655},{"krate":0,"index":2656},{"krate":0,"index":2573},{"krate":0,"index":2626},{"krate":0,"index":2629},{"krate":0,"index":2632},{"krate":0,"index":2635},{"krate":0,"index":2638},{"krate":0,"index":2641},{"krate":0,"index":2644},{"krate":0,"index":2647},{"krate":0,"index":2650},{"krate":0,"index":2666},{"krate":0,"index":2669},{"krate":0,"index":2672},{"krate":0,"index":2743},{"krate":0,"index":2754},{"krate":0,"index":2752},{"krate":0,"index":2748},{"krate":0,"index":2749},{"krate":0,"index":2745},{"krate":0,"index":2746},{"krate":0,"index":2675},{"krate":0,"index":2728},{"krate":0,"index":2731},{"krate":0,"index":2734},{"krate":0,"index":2737},{"krate":0,"index":2740},{"krate":0,"index":2824},{"krate":0,"index":2835},{"krate":0,"index":2833},{"krate":0,"index":2829},{"krate":0,"index":2830},{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2756},{"krate":0,"index":2809},{"krate":0,"index":2812},{"krate":0,"index":2815},{"krate":0,"index":2818},{"krate":0,"index":2821},{"krate":0,"index":2905},{"krate":0,"index":2916},{"krate":0,"index":2914},{"krate":0,"index":2910},{"krate":0,"index":2911},{"krate":0,"index":2907},{"krate":0,"index":2908},{"krate":0,"index":2837},{"krate":0,"index":2890},{"krate":0,"index":2893},{"krate":0,"index":2896},{"krate":0,"index":2899},{"krate":0,"index":2902},{"krate":0,"index":2992},{"krate":0,"index":3003},{"krate":0,"index":3001},{"krate":0,"index":2997},{"krate":0,"index":2998},{"krate":0,"index":2994},{"krate":0,"index":2995},{"krate":0,"index":2918},{"krate":0,"index":2971},{"krate":0,"index":2974},{"krate":0,"index":2977},{"krate":0,"index":2980},{"krate":0,"index":2983},{"krate":0,"index":2986},{"krate":0,"index":2989},{"krate":0,"index":3076},{"krate":0,"index":3087},{"krate":0,"index":3085},{"krate":0,"index":3081},{"krate":0,"index":3082},{"krate":0,"index":3078},{"krate":0,"index":3079},{"krate":0,"index":3005},{"krate":0,"index":3058},{"krate":0,"index":3061},{"krate":0,"index":3064},{"krate":0,"index":3067},{"krate":0,"index":3070},{"krate":0,"index":3073},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":3902},{"krate":0,"index":3911},{"krate":0,"index":3907},{"krate":0,"index":3908},{"krate":0,"index":3904},{"krate":0,"index":3905},{"krate":0,"index":3662},{"krate":0,"index":3716},{"krate":0,"index":3719},{"krate":0,"index":3722},{"krate":0,"index":3725},{"krate":0,"index":3728},{"krate":0,"index":3731},{"krate":0,"index":3734},{"krate":0,"index":3737},{"krate":0,"index":3740},{"krate":0,"index":3743},{"krate":0,"index":3746},{"krate":0,"index":3749},{"krate":0,"index":3752},{"krate":0,"index":3755},{"krate":0,"index":3758},{"krate":0,"index":3761},{"krate":0,"index":3764},{"krate":0,"index":3767},{"krate":0,"index":3770},{"krate":0,"index":3773},{"krate":0,"index":3776},{"krate":0,"index":3779},{"krate":0,"index":3782},{"krate":0,"index":3785},{"krate":0,"index":3788},{"krate":0,"index":3791},{"krate":0,"index":3794},{"krate":0,"index":3797},{"krate":0,"index":3800},{"krate":0,"index":3803},{"krate":0,"index":3806},{"krate":0,"index":3809},{"krate":0,"index":3812},{"krate":0,"index":3815},{"krate":0,"index":3818},{"krate":0,"index":3821},{"krate":0,"index":3824},{"krate":0,"index":3827},{"krate":0,"index":3830},{"krate":0,"index":3833},{"krate":0,"index":3836},{"krate":0,"index":3839},{"krate":0,"index":3842},{"krate":0,"index":3845},{"krate":0,"index":3848},{"krate":0,"index":3851},{"krate":0,"index":3854},{"krate":0,"index":3857},{"krate":0,"index":3860},{"krate":0,"index":3863},{"krate":0,"index":3866},{"krate":0,"index":3869},{"krate":0,"index":3872},{"krate":0,"index":3875},{"krate":0,"index":3878},{"krate":0,"index":3881},{"krate":0,"index":3884},{"krate":0,"index":3887},{"krate":0,"index":3890},{"krate":0,"index":3893},{"krate":0,"index":3896},{"krate":0,"index":3899},{"krate":0,"index":97},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":4015},{"krate":0,"index":4019},{"krate":0,"index":4017},{"krate":0,"index":3913},{"krate":0,"index":3967},{"krate":0,"index":3970},{"krate":0,"index":3973},{"krate":0,"index":3976},{"krate":0,"index":3979},{"krate":0,"index":3982},{"krate":0,"index":3985},{"krate":0,"index":3988},{"krate":0,"index":3991},{"krate":0,"index":3994},{"krate":0,"index":3997},{"krate":0,"index":4000},{"krate":0,"index":4003},{"krate":0,"index":4006},{"krate":0,"index":4009},{"krate":0,"index":4012},{"krate":0,"index":130},{"krate":0,"index":4423},{"krate":0,"index":4427},{"krate":0,"index":4425},{"krate":0,"index":4337},{"krate":0,"index":4390},{"krate":0,"index":4393},{"krate":0,"index":4396},{"krate":0,"index":4399},{"krate":0,"index":4402},{"krate":0,"index":4405},{"krate":0,"index":4408},{"krate":0,"index":4411},{"krate":0,"index":4414},{"krate":0,"index":4417},{"krate":0,"index":4420},{"krate":0,"index":132},{"krate":0,"index":138},{"krate":0,"index":4684},{"krate":0,"index":4688},{"krate":0,"index":4686},{"krate":0,"index":4580},{"krate":0,"index":4633},{"krate":0,"index":4636},{"krate":0,"index":4639},{"krate":0,"index":4642},{"krate":0,"index":4645},{"krate":0,"index":4648},{"krate":0,"index":4651},{"krate":0,"index":4654},{"krate":0,"index":4657},{"krate":0,"index":4660},{"krate":0,"index":4663},{"krate":0,"index":4666},{"krate":0,"index":4669},{"krate":0,"index":4672},{"krate":0,"index":4675},{"krate":0,"index":4678},{"krate":0,"index":4681},{"krate":0,"index":4499},{"krate":0,"index":4505},{"krate":0,"index":4794},{"krate":0,"index":4798},{"krate":0,"index":4796},{"krate":0,"index":4690},{"krate":0,"index":4743},{"krate":0,"index":4746},{"krate":0,"index":4749},{"krate":0,"index":4752},{"krate":0,"index":4755},{"krate":0,"index":4758},{"krate":0,"index":4761},{"krate":0,"index":4764},{"krate":0,"index":4767},{"krate":0,"index":4770},{"krate":0,"index":4773},{"krate":0,"index":4776},{"krate":0,"index":4779},{"krate":0,"index":4782},{"krate":0,"index":4785},{"krate":0,"index":4788},{"krate":0,"index":4791},{"krate":0,"index":4508},{"krate":0,"index":4514},{"krate":0,"index":4904},{"krate":0,"index":4908},{"krate":0,"index":4906},{"krate":0,"index":4800},{"krate":0,"index":4853},{"krate":0,"index":4856},{"krate":0,"index":4859},{"krate":0,"index":4862},{"krate":0,"index":4865},{"krate":0,"index":4868},{"krate":0,"index":4871},{"krate":0,"index":4874},{"krate":0,"index":4877},{"krate":0,"index":4880},{"krate":0,"index":4883},{"krate":0,"index":4886},{"krate":0,"index":4889},{"krate":0,"index":4892},{"krate":0,"index":4895},{"krate":0,"index":4898},{"krate":0,"index":4901},{"krate":0,"index":4517},{"krate":0,"index":4523},{"krate":0,"index":5014},{"krate":0,"index":5018},{"krate":0,"index":5016},{"krate":0,"index":4910},{"krate":0,"index":4963},{"krate":0,"index":4966},{"krate":0,"index":4969},{"krate":0,"index":4972},{"krate":0,"index":4975},{"krate":0,"index":4978},{"krate":0,"index":4981},{"krate":0,"index":4984},{"krate":0,"index":4987},{"krate":0,"index":4990},{"krate":0,"index":4993},{"krate":0,"index":4996},{"krate":0,"index":4999},{"krate":0,"index":5002},{"krate":0,"index":5005},{"krate":0,"index":5008},{"krate":0,"index":5011},{"krate":0,"index":4526},{"krate":0,"index":4532},{"krate":0,"index":5124},{"krate":0,"index":5128},{"krate":0,"index":5126},{"krate":0,"index":5020},{"krate":0,"index":5073},{"krate":0,"index":5076},{"krate":0,"index":5079},{"krate":0,"index":5082},{"krate":0,"index":5085},{"krate":0,"index":5088},{"krate":0,"index":5091},{"krate":0,"index":5094},{"krate":0,"index":5097},{"krate":0,"index":5100},{"krate":0,"index":5103},{"krate":0,"index":5106},{"krate":0,"index":5109},{"krate":0,"index":5112},{"krate":0,"index":5115},{"krate":0,"index":5118},{"krate":0,"index":5121},{"krate":0,"index":4535},{"krate":0,"index":4541},{"krate":0,"index":5234},{"krate":0,"index":5238},{"krate":0,"index":5236},{"krate":0,"index":5130},{"krate":0,"index":5183},{"krate":0,"index":5186},{"krate":0,"index":5189},{"krate":0,"index":5192},{"krate":0,"index":5195},{"krate":0,"index":5198},{"krate":0,"index":5201},{"krate":0,"index":5204},{"krate":0,"index":5207},{"krate":0,"index":5210},{"krate":0,"index":5213},{"krate":0,"index":5216},{"krate":0,"index":5219},{"krate":0,"index":5222},{"krate":0,"index":5225},{"krate":0,"index":5228},{"krate":0,"index":5231},{"krate":0,"index":4544},{"krate":0,"index":4550},{"krate":0,"index":5344},{"krate":0,"index":5348},{"krate":0,"index":5346},{"krate":0,"index":5240},{"krate":0,"index":5293},{"krate":0,"index":5296},{"krate":0,"index":5299},{"krate":0,"index":5302},{"krate":0,"index":5305},{"krate":0,"index":5308},{"krate":0,"index":5311},{"krate":0,"index":5314},{"krate":0,"index":5317},{"krate":0,"index":5320},{"krate":0,"index":5323},{"krate":0,"index":5326},{"krate":0,"index":5329},{"krate":0,"index":5332},{"krate":0,"index":5335},{"krate":0,"index":5338},{"krate":0,"index":5341},{"krate":0,"index":4553},{"krate":0,"index":4559},{"krate":0,"index":5454},{"krate":0,"index":5458},{"krate":0,"index":5456},{"krate":0,"index":5350},{"krate":0,"index":5403},{"krate":0,"index":5406},{"krate":0,"index":5409},{"krate":0,"index":5412},{"krate":0,"index":5415},{"krate":0,"index":5418},{"krate":0,"index":5421},{"krate":0,"index":5424},{"krate":0,"index":5427},{"krate":0,"index":5430},{"krate":0,"index":5433},{"krate":0,"index":5436},{"krate":0,"index":5439},{"krate":0,"index":5442},{"krate":0,"index":5445},{"krate":0,"index":5448},{"krate":0,"index":5451},{"krate":0,"index":4562},{"krate":0,"index":4568},{"krate":0,"index":5564},{"krate":0,"index":5568},{"krate":0,"index":5566},{"krate":0,"index":5460},{"krate":0,"index":5513},{"krate":0,"index":5516},{"krate":0,"index":5519},{"krate":0,"index":5522},{"krate":0,"index":5525},{"krate":0,"index":5528},{"krate":0,"index":5531},{"krate":0,"index":5534},{"krate":0,"index":5537},{"krate":0,"index":5540},{"krate":0,"index":5543},{"krate":0,"index":5546},{"krate":0,"index":5549},{"krate":0,"index":5552},{"krate":0,"index":5555},{"krate":0,"index":5558},{"krate":0,"index":5561},{"krate":0,"index":4571},{"krate":0,"index":4577}],"decl_id":null,"docs":" Bindings to JavaScript's standard, built-in objects, including their methods\n and properties.","sig":null,"attributes":[{"value":"! Bindings to JavaScript's standard, built-in objects, including their methods","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":0,"byte_end":80,"line_start":1,"line_end":1,"column_start":1,"column_end":81}},{"value":"! and properties.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":81,"byte_end":100,"line_start":2,"line_end":2,"column_start":1,"column_end":20}},{"value":"!","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":101,"byte_end":104,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"! This does *not* include any Web, Node, or any other JS environment","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":105,"byte_end":175,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"! APIs. Only the things that are guaranteed to exist in the global scope by","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176,"byte_end":253,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"! the ECMAScript standard.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":254,"byte_end":282,"line_start":6,"line_end":6,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":283,"byte_end":286,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":287,"byte_end":371,"line_start":8,"line_end":8,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":372,"byte_end":375,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! ## A Note About `camelCase`, `snake_case`, and Naming Conventions","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":376,"byte_end":445,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"!","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":446,"byte_end":449,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! JavaScript's global objects use `camelCase` naming conventions for functions","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":450,"byte_end":530,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"! and methods, but Rust style is to use `snake_case`. These bindings expose","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":531,"byte_end":608,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"! the Rust style `snake_case` name. Additionally, acronyms within a method","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":609,"byte_end":685,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"! name are all lower case, where as in JavaScript they are all upper case. For","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":686,"byte_end":766,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"! example, `decodeURI` in JavaScript is exposed as `decode_uri` in these","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":767,"byte_end":841,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"! bindings.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":842,"byte_end":855,"line_start":17,"line_end":17,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":139},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":2167,"byte_end":2177,"line_start":55,"line_end":55,"column_start":12,"column_end":22},"name":"decode_uri","qualname":"::decode_uri","value":"fn (encoded: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `decodeURI()` function decodes a Uniform Resource Identifier (URI)\n previously created by `encodeURI` or by a similar routine.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":141},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":2603,"byte_end":2623,"line_start":62,"line_end":62,"column_start":12,"column_end":32},"name":"decode_uri_component","qualname":"::decode_uri_component","value":"fn (encoded: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `decodeURIComponent()` function decodes a Uniform Resource Identifier (URI) component\n previously created by `encodeURIComponent` or by a similar routine.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":143},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":3196,"byte_end":3206,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"encode_uri","qualname":"::encode_uri","value":"fn (decoded: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `encodeURI()` function encodes a Uniform Resource Identifier (URI)\n by replacing each instance of certain characters by one, two, three, or\n four escape sequences representing the UTF-8 encoding of the character\n (will only be four escape sequences for characters composed of two\n \"surrogate\" characters).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":145},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":3791,"byte_end":3811,"line_start":81,"line_end":81,"column_start":12,"column_end":32},"name":"encode_uri_component","qualname":"::encode_uri_component","value":"fn (decoded: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `encodeURIComponent()` function encodes a Uniform Resource Identifier (URI) component\n by replacing each instance of certain characters by one, two, three, or four escape sequences\n representing the UTF-8 encoding of the character\n (will only be four escape sequences for characters composed of two \"surrogate\" characters).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":147},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":4083,"byte_end":4087,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"eval","qualname":"::eval","value":"fn (js_source_text: &str) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `eval()` function evaluates JavaScript code represented as a string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":149},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":4480,"byte_end":4489,"line_start":94,"line_end":94,"column_start":12,"column_end":21},"name":"is_finite","qualname":"::is_finite","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The global `isFinite()` function determines whether the passed value is a finite number.\n If needed, the parameter is first converted to a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":151},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":4869,"byte_end":4878,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"parse_int","qualname":"::parse_int","value":"fn (text: &str, radix: u8) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `parseInt()` function parses a string argument and returns an integer\n of the specified radix (the base in mathematical numeral systems), or NaN on error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":153},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":5210,"byte_end":5221,"line_start":108,"line_end":108,"column_start":12,"column_end":23},"name":"parse_float","qualname":"::parse_float","value":"fn (text: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `parseFloat()` function parses an argument and returns a floating point number,\n or NaN on error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":155},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":5542,"byte_end":5548,"line_start":115,"line_end":115,"column_start":12,"column_end":18},"name":"escape","qualname":"::escape","value":"fn (string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `escape()` function computes a new string in which certain characters have been\n replaced by a hexadecimal escape sequence.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":157},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6051,"byte_end":6059,"line_start":124,"line_end":124,"column_start":12,"column_end":20},"name":"unescape","qualname":"::unescape","value":"fn (string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `unescape()` function computes a new string in which hexadecimal escape\n sequences are replaced with the character that it represents. The escape sequences might\n be introduced by a function like `escape`. Usually, `decodeURI` or `decodeURIComponent`\n are preferred over `unescape`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":1805,"byte_end":1820,"line_start":48,"line_end":48,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":342},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6284,"byte_end":6289,"line_start":132,"line_end":132,"column_start":14,"column_end":19},"name":"Array","qualname":"::Array","value":"Array {  }","parent":null,"children":[{"krate":0,"index":343}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6371,"byte_end":6374,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"new","qualname":"<Array>::new","value":"fn () -> Array","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6529,"byte_end":6544,"line_start":140,"line_end":140,"column_start":12,"column_end":27},"name":"new_with_length","qualname":"<Array>::new_with_length","value":"fn (len: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" Creates a new array with the specified length (elements are initialized to `undefined`).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6729,"byte_end":6732,"line_start":144,"line_end":144,"column_start":12,"column_end":15},"name":"get","qualname":"<Array>::get","value":"fn (&self, index: u32) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" Retrieves the element at the index (returns `undefined` if the index is out of range).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6934,"byte_end":6937,"line_start":148,"line_end":148,"column_start":12,"column_end":15},"name":"set","qualname":"<Array>::set","value":"fn (&self, index: u32, value: JsValue) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the element at the index (auto-enlarges the array if the index is out of range).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":7290,"byte_end":7296,"line_start":156,"line_end":156,"column_start":12,"column_end":18},"name":"delete","qualname":"<Array>::delete","value":"fn (&self, index: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Deletes the element at the index (does nothing if the index is out of range).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":7510,"byte_end":7514,"line_start":161,"line_end":161,"column_start":12,"column_end":16},"name":"from","qualname":"<Array>::from","value":"fn (val: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Array.from()` method creates a new, shallow-copied `Array` instance\n from an array-like or iterable object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":7893,"byte_end":7904,"line_start":168,"line_end":168,"column_start":12,"column_end":23},"name":"copy_within","qualname":"<Array>::copy_within","value":"fn (&self, target: i32, start: i32, end: i32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `copyWithin()` method shallow copies part of an array to another\n location in the same array and returns it, without modifying its size.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":8292,"byte_end":8298,"line_start":175,"line_end":175,"column_start":12,"column_end":18},"name":"concat","qualname":"<Array>::concat","value":"fn (&self, array: &Array) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `concat()` method is used to merge two or more arrays. This method\n does not change the existing arrays, but instead returns a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":8637,"byte_end":8642,"line_start":182,"line_end":182,"column_start":12,"column_end":17},"name":"every","qualname":"<Array>::every","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `every()` method tests whether all elements in the array pass the test\n implemented by the provided function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":9049,"byte_end":9053,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"name":"fill","qualname":"<Array>::fill","value":"fn (&self, value: &JsValue, start: u32, end: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":9421,"byte_end":9427,"line_start":196,"line_end":196,"column_start":12,"column_end":18},"name":"filter","qualname":"<Array>::filter","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `filter()` method creates a new array with all elements that pass the\n test implemented by the provided function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":9847,"byte_end":9851,"line_start":203,"line_end":203,"column_start":12,"column_end":16},"name":"find","qualname":"<Array>::find","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `find()` method returns the value of the first element in the array that satisfies\n  the provided testing function. Otherwise `undefined` is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":10294,"byte_end":10304,"line_start":210,"line_end":210,"column_start":12,"column_end":22},"name":"find_index","qualname":"<Array>::find_index","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> bool) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `findIndex()` method returns the index of the first element in the array that\n satisfies the provided testing function. Otherwise -1 is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":10696,"byte_end":10700,"line_start":217,"line_end":217,"column_start":12,"column_end":16},"name":"flat","qualname":"<Array>::flat","value":"fn (&self, depth: i32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `flat()` method creates a new array with all sub-array elements concatenated into it\n recursively up to the specified depth.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":11060,"byte_end":11068,"line_start":224,"line_end":224,"column_start":12,"column_end":20},"name":"flat_map","qualname":"<Array>::flat_map","value":"fn (&self, callback: &mut dyn FnMut(JsValue, u32, Array) -> Vec<JsValue>) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `flatMap()` method first maps each element using a mapping function, then flattens\n the result into a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":11459,"byte_end":11467,"line_start":233,"line_end":233,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(JsValue, u32, Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once for each array element.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":11839,"byte_end":11847,"line_start":240,"line_end":240,"column_start":12,"column_end":20},"name":"includes","qualname":"<Array>::includes","value":"fn (&self, value: &JsValue, from_index: i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `includes()` method determines whether an array includes a certain\n element, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":12239,"byte_end":12247,"line_start":247,"line_end":247,"column_start":12,"column_end":20},"name":"index_of","qualname":"<Array>::index_of","value":"fn (&self, value: &JsValue, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `indexOf()` method returns the first index at which a given element\n can be found in the array, or -1 if it is not present.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":12599,"byte_end":12607,"line_start":253,"line_end":253,"column_start":12,"column_end":20},"name":"is_array","qualname":"<Array>::is_array","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Array.isArray()` method determines whether the passed value is an Array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":12935,"byte_end":12939,"line_start":260,"line_end":260,"column_start":12,"column_end":16},"name":"join","qualname":"<Array>::join","value":"fn (&self, delimiter: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `join()` method joins all elements of an array (or an array-like object)\n into a string and returns this string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":13393,"byte_end":13406,"line_start":268,"line_end":268,"column_start":12,"column_end":25},"name":"last_index_of","qualname":"<Array>::last_index_of","value":"fn (&self, value: &JsValue, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `lastIndexOf()` method returns the last index at which a given element\n can be found in the array, or -1 if it is not present. The array is\n searched backwards, starting at fromIndex.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":13921,"byte_end":13927,"line_start":277,"line_end":277,"column_start":12,"column_end":18},"name":"length","qualname":"<Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property of an object which is an instance of type Array\n sets or returns the number of elements in that array. The value is an\n unsigned, 32-bit integer that is always numerically greater than the\n highest index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":14553,"byte_end":14556,"line_start":287,"line_end":287,"column_start":12,"column_end":15},"name":"map","qualname":"<Array>::map","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, u32, Array) -> JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" `map()` calls a provided callback function once for each element in an array,\n in order, and constructs a new array from the results. callback is invoked\n only for indexes of the array which have assigned values, including undefined.\n It is not called for missing elements of the array (that is, indexes that have\n never been set, which have been deleted or which have never been assigned a value).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":15505,"byte_end":15508,"line_start":305,"line_end":305,"column_start":12,"column_end":15},"name":"of1","qualname":"<Array>::of1","value":"fn (a: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Array.of()` method creates a new Array instance with a variable\n number of arguments, regardless of number or type of the arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":15723,"byte_end":15726,"line_start":309,"line_end":309,"column_start":12,"column_end":15},"name":"of2","qualname":"<Array>::of2","value":"fn (a: &JsValue, b: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":15954,"byte_end":15957,"line_start":313,"line_end":313,"column_start":12,"column_end":15},"name":"of3","qualname":"<Array>::of3","value":"fn (a: &JsValue, b: &JsValue, c: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":16198,"byte_end":16201,"line_start":317,"line_end":317,"column_start":12,"column_end":15},"name":"of4","qualname":"<Array>::of4","value":"fn (a: &JsValue, b: &JsValue, c: &JsValue, d: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":16455,"byte_end":16458,"line_start":321,"line_end":321,"column_start":12,"column_end":15},"name":"of5","qualname":"<Array>::of5","value":"fn (a: &JsValue, b: &JsValue, c: &JsValue, d: &JsValue, e: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":16847,"byte_end":16850,"line_start":328,"line_end":328,"column_start":12,"column_end":15},"name":"pop","qualname":"<Array>::pop","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `pop()` method removes the last element from an array and returns that\n element. This method changes the length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":17172,"byte_end":17176,"line_start":335,"line_end":335,"column_start":12,"column_end":16},"name":"push","qualname":"<Array>::push","value":"fn (&self, value: &JsValue) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `push()` method adds one or more elements to the end of an array and\n returns the new length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":17550,"byte_end":17556,"line_start":342,"line_end":342,"column_start":12,"column_end":18},"name":"reduce","qualname":"<Array>::reduce","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, JsValue, u32, Array) -> JsValue, initial_value: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `reduce()` method applies a function against an accumulator and each element in\n the array (from left to right) to reduce it to a single value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":18072,"byte_end":18084,"line_start":353,"line_end":353,"column_start":12,"column_end":24},"name":"reduce_right","qualname":"<Array>::reduce_right","value":"fn (&self, predicate: &mut dyn FnMut(JsValue, JsValue, u32, Array) -> JsValue, initial_value: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `reduceRight()` method applies a function against an accumulator and each value\n of the array (from right-to-left) to reduce it to a single value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":18562,"byte_end":18569,"line_start":364,"line_end":364,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Array>::reverse","value":"fn (&self) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `reverse()` method reverses an array in place. The first array\n element becomes the last, and the last array element becomes the first.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":18920,"byte_end":18925,"line_start":371,"line_end":371,"column_start":12,"column_end":17},"name":"shift","qualname":"<Array>::shift","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `shift()` method removes the first element from an array and returns\n that removed element. This method changes the length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":19327,"byte_end":19332,"line_start":379,"line_end":379,"column_start":12,"column_end":17},"name":"slice","qualname":"<Array>::slice","value":"fn (&self, start: u32, end: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of an array into\n a new array object selected from begin to end (end not included).\n The original array will not be modified.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":19759,"byte_end":19763,"line_start":386,"line_end":386,"column_start":12,"column_end":16},"name":"some","qualname":"<Array>::some","value":"fn (&self, predicate: &mut dyn FnMut(JsValue) -> bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `some()` method tests whether at least one element in the array passes the test implemented\n by the provided function.\n Note: This method returns false for any condition put on an empty array.\n [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":20332,"byte_end":20336,"line_start":397,"line_end":397,"column_start":12,"column_end":16},"name":"sort","qualname":"<Array>::sort","value":"fn (&self) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `sort()` method sorts the elements of an array in place and returns\n the array. The sort is not necessarily stable. The default sort\n order is according to string Unicode code points.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":20661,"byte_end":20667,"line_start":404,"line_end":404,"column_start":12,"column_end":18},"name":"splice","qualname":"<Array>::splice","value":"fn (&self, start: u32, delete_count: u32, item: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `splice()` method changes the contents of an array by removing existing elements and/or\n adding new elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":21215,"byte_end":21231,"line_start":412,"line_end":412,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Array>::to_locale_string","value":"fn (&self, locales: &JsValue, options: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleString()` method returns a string representing the elements of the array.\n The elements are converted to Strings using their toLocaleString methods and these\n Strings are separated by a locale-specific String (such as a comma “,”).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":21598,"byte_end":21607,"line_start":419,"line_end":419,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Array>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the specified array\n and its elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":21942,"byte_end":21949,"line_start":426,"line_end":426,"column_start":12,"column_end":19},"name":"unshift","qualname":"<Array>::unshift","value":"fn (&self, value: &JsValue) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `unshift()` method adds one or more elements to the beginning of an\n array and returns the new length of the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":6099,"byte_end":6114,"line_start":128,"line_end":128,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":355},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":22066,"byte_end":22075,"line_start":431,"line_end":431,"column_start":12,"column_end":21},"name":"ArrayIter","qualname":"::ArrayIter","value":"ArrayIter {  }","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":358}],"decl_id":null,"docs":" Iterator returned by `Array::iter`\n","sig":null,"attributes":[{"value":"/ Iterator returned by `Array::iter`","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":21992,"byte_end":22030,"line_start":429,"line_end":429,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":22854,"byte_end":22858,"line_start":463,"line_end":463,"column_start":12,"column_end":16},"name":"iter","qualname":"<Array>::iter","value":"fn (&self) -> ArrayIter<'_>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the values of the JS array.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the values of the JS array.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":22786,"byte_end":22842,"line_start":462,"line_end":462,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23041,"byte_end":23047,"line_start":471,"line_end":471,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<Array>::to_vec","value":"fn (&self) -> Vec<JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Converts the JS array into a new Vec.\n","sig":null,"attributes":[{"value":"/ Converts the JS array into a new Vec.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":22988,"byte_end":23029,"line_start":470,"line_end":470,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":439},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23807,"byte_end":23818,"line_start":508,"line_end":508,"column_start":14,"column_end":25},"name":"ArrayBuffer","qualname":"::ArrayBuffer","value":"ArrayBuffer {  }","parent":null,"children":[{"krate":0,"index":440}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":24385,"byte_end":24388,"line_start":519,"line_end":519,"column_start":12,"column_end":15},"name":"new","qualname":"<ArrayBuffer>::new","value":"fn (length: u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `ArrayBuffer` object is used to represent a generic,\n fixed-length raw binary data buffer. You cannot directly\n manipulate the contents of an `ArrayBuffer`; instead, you\n create one of the typed array objects or a `DataView` object\n which represents the buffer in a specific format, and use that\n to read and write the contents of the buffer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":25002,"byte_end":25013,"line_start":529,"line_end":529,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<ArrayBuffer>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength property of an object which is an instance of type ArrayBuffer\n it's an accessor property whose set accessor function is undefined,\n meaning that you can only read this property.\n The value is established when the array is constructed and cannot be changed.\n This property returns 0 if this ArrayBuffer has been detached.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":25414,"byte_end":25421,"line_start":536,"line_end":536,"column_start":12,"column_end":19},"name":"is_view","qualname":"<ArrayBuffer>::is_view","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `isView()` method returns true if arg is one of the `ArrayBuffer`\n views, such as typed array objects or a DataView; false otherwise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":25798,"byte_end":25803,"line_start":544,"line_end":544,"column_start":12,"column_end":17},"name":"slice","qualname":"<ArrayBuffer>::slice","value":"fn (&self, begin: u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a new `ArrayBuffer` whose contents\n are a copy of this `ArrayBuffer`'s bytes from begin, inclusive,\n up to end, exclusive.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":26097,"byte_end":26111,"line_start":550,"line_end":550,"column_start":12,"column_end":26},"name":"slice_with_end","qualname":"<ArrayBuffer>::slice_with_end","value":"fn (&self, begin: u32, end: u32) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" Like `slice()` but with the `end` argument.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23651,"byte_end":23666,"line_start":504,"line_end":504,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":523},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":26341,"byte_end":26358,"line_start":558,"line_end":558,"column_start":14,"column_end":31},"name":"SharedArrayBuffer","qualname":"::SharedArrayBuffer","value":"SharedArrayBuffer {  }","parent":null,"children":[{"krate":0,"index":524}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":26858,"byte_end":26861,"line_start":568,"line_end":568,"column_start":12,"column_end":15},"name":"new","qualname":"<SharedArrayBuffer>::new","value":"fn (length: u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `SharedArrayBuffer` object is used to represent a generic,\n fixed-length raw binary data buffer, similar to the `ArrayBuffer`\n object, but in a way that they can be used to create views\n on shared memory. Unlike an `ArrayBuffer`, a `SharedArrayBuffer`\n cannot become detached.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":27316,"byte_end":27327,"line_start":576,"line_end":576,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<SharedArrayBuffer>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length of\n an `SharedArrayBuffer` in bytes. This is established when\n the `SharedArrayBuffer` is constructed and cannot be changed.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":27730,"byte_end":27735,"line_start":584,"line_end":584,"column_start":12,"column_end":17},"name":"slice","qualname":"<SharedArrayBuffer>::slice","value":"fn (&self, begin: u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a new `SharedArrayBuffer` whose contents\n are a copy of this `SharedArrayBuffer`'s bytes from begin, inclusive,\n up to end, exclusive.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":28047,"byte_end":28061,"line_start":590,"line_end":590,"column_start":12,"column_end":26},"name":"slice_with_end","qualname":"<SharedArrayBuffer>::slice_with_end","value":"fn (&self, begin: u32, end: u32) -> SharedArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" Like `slice()` but with the `end` argument.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":26194,"byte_end":26209,"line_start":554,"line_end":554,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":28474,"byte_end":28478,"line_start":601,"line_end":601,"column_start":12,"column_end":16},"name":"keys","qualname":"<Array>::keys","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `keys()` method returns a new Array Iterator object that contains the\n keys for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":28153,"byte_end":28168,"line_start":594,"line_end":594,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":28153,"byte_end":28168,"line_start":594,"line_end":594,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":28816,"byte_end":28823,"line_start":608,"line_end":608,"column_start":12,"column_end":19},"name":"entries","qualname":"<Array>::entries","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `entries()` method returns a new Array Iterator object that contains\n the key/value pairs for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":28153,"byte_end":28168,"line_start":594,"line_end":594,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":28153,"byte_end":28168,"line_start":594,"line_end":594,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29150,"byte_end":29156,"line_start":615,"line_end":615,"column_start":12,"column_end":18},"name":"values","qualname":"<Array>::values","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `values()` method returns a new Array Iterator object that\n contains the values for each index in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":28153,"byte_end":28168,"line_start":594,"line_end":594,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":28153,"byte_end":28168,"line_start":594,"line_end":594,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":27},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29793,"byte_end":29800,"line_start":628,"line_end":628,"column_start":9,"column_end":16},"name":"Atomics","qualname":"::Atomics","value":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":564}],"decl_id":null,"docs":" The `Atomics` object provides atomic operations as static methods.\n They are used with `SharedArrayBuffer` objects.","sig":null,"attributes":[{"value":"/ The `Atomics` object provides atomic operations as static methods.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29187,"byte_end":29257,"line_start":618,"line_end":618,"column_start":1,"column_end":71}},{"value":"/ They are used with `SharedArrayBuffer` objects.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29258,"byte_end":29309,"line_start":619,"line_end":619,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29310,"byte_end":29313,"line_start":620,"line_end":620,"column_start":1,"column_end":4}},{"value":"/ The Atomic operations are installed on an `Atomics` module. Unlike","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29314,"byte_end":29384,"line_start":621,"line_end":621,"column_start":1,"column_end":71}},{"value":"/ the other global objects, `Atomics` is not a constructor. You cannot","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29385,"byte_end":29457,"line_start":622,"line_end":622,"column_start":1,"column_end":73}},{"value":"/ use it with a new operator or invoke the `Atomics` object as a","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29458,"byte_end":29524,"line_start":623,"line_end":623,"column_start":1,"column_end":67}},{"value":"/ function. All properties and methods of `Atomics` are static","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29525,"byte_end":29589,"line_start":624,"line_end":624,"column_start":1,"column_end":65}},{"value":"/ (as is the case with the Math object, for example).","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29590,"byte_end":29645,"line_start":625,"line_end":625,"column_start":1,"column_end":56}},{"value":"/ [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29646,"byte_end":29759,"line_start":626,"line_end":626,"column_start":1,"column_end":114}},{"value":"allow(non_snake_case)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29760,"byte_end":29784,"line_start":627,"line_end":627,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":538},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":30348,"byte_end":30351,"line_start":640,"line_end":640,"column_start":16,"column_end":19},"name":"add","qualname":"::Atomics::add","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.add()` method adds a given value at a given\n position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":30950,"byte_end":30953,"line_start":650,"line_end":650,"column_start":16,"column_end":19},"name":"and","qualname":"::Atomics::and","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.and()` method computes a bitwise AND with a given\n value at a given position in the array, and returns the old value\n at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":31706,"byte_end":31722,"line_start":661,"line_end":661,"column_start":16,"column_end":32},"name":"compare_exchange","qualname":"::Atomics::compare_exchange","value":"fn (typed_array: &JsValue, index: u32, expected_value: i32, replacement_value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.compareExchange()` method exchanges a given\n replacement value at a given position in the array, if a given expected\n value equals the old value. It returns the old value at that position\n whether it was equal to the expected value or not.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":544},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":32389,"byte_end":32397,"line_start":675,"line_end":675,"column_start":16,"column_end":24},"name":"exchange","qualname":"::Atomics::exchange","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.exchange()` method stores a given value at a given\n position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":546},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":32963,"byte_end":32975,"line_start":684,"line_end":684,"column_start":16,"column_end":28},"name":"is_lock_free","qualname":"::Atomics::is_lock_free","value":"fn (size: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.isLockFree()` method is used to determine\n whether to use locks or atomic operations. It returns true,\n if the given size is one of the `BYTES_PER_ELEMENT` property\n of integer `TypedArray` types.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":33315,"byte_end":33319,"line_start":691,"line_end":691,"column_start":16,"column_end":20},"name":"load","qualname":"::Atomics::load","value":"fn (typed_array: &JsValue, index: u32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.load()` method returns a value at a given\n position in the array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":550},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":33864,"byte_end":33870,"line_start":700,"line_end":700,"column_start":16,"column_end":22},"name":"notify","qualname":"::Atomics::notify","value":"fn (typed_array: &Int32Array, index: u32) -> Result<u32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.notify()` method notifies up some agents that\n are sleeping in the wait queue.\n Note: This operation works with a shared `Int32Array` only.\n If `count` is not provided, notifies all the agents in the queue.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":552},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":34084,"byte_end":34101,"line_start":704,"line_end":704,"column_start":16,"column_end":33},"name":"notify_with_count","qualname":"::Atomics::notify_with_count","value":"fn (typed_array: &Int32Array, index: u32, count: u32) -> Result<u32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Notifies up to `count` agents in the wait queue.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":34735,"byte_end":34737,"line_start":717,"line_end":717,"column_start":16,"column_end":18},"name":"or","qualname":"::Atomics::or","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.or()` method computes a bitwise OR with a given value\n at a given position in the array, and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":556},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":35161,"byte_end":35166,"line_start":724,"line_end":724,"column_start":16,"column_end":21},"name":"store","qualname":"::Atomics::store","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.store()` method stores a given value at the given\n position in the array and returns that value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":558},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":35735,"byte_end":35738,"line_start":733,"line_end":733,"column_start":16,"column_end":19},"name":"sub","qualname":"::Atomics::sub","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.sub()` method substracts a given value at a\n given position in the array and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":36430,"byte_end":36434,"line_start":744,"line_end":744,"column_start":16,"column_end":20},"name":"wait","qualname":"::Atomics::wait","value":"fn (typed_array: &Int32Array, index: u32, value: i32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.wait()` method verifies that a given\n position in an `Int32Array` still contains a given value\n and if so sleeps, awaiting a wakeup or a timeout.\n It returns a string which is either \"ok\", \"not-equal\", or \"timed-out\".\n Note: This operation only works with a shared `Int32Array`\n and may not be allowed on the main thread.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":562},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":36785,"byte_end":36802,"line_start":750,"line_end":750,"column_start":16,"column_end":33},"name":"wait_with_timeout","qualname":"::Atomics::wait_with_timeout","value":"fn (typed_array: &Int32Array, index: u32, value: i32, timeout: f64) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Like `wait()`, but with timeout","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":564},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":37482,"byte_end":37485,"line_start":765,"line_end":765,"column_start":16,"column_end":19},"name":"xor","qualname":"::Atomics::xor","value":"fn (typed_array: &JsValue, index: u32, value: i32) -> Result<i32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Atomics.xor()` method computes a bitwise XOR\n with a given value at a given position in the array,\n and returns the old value at that position.\n This atomic operation guarantees that no other write happens\n until the modified value is written back.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":29826,"byte_end":29841,"line_start":631,"line_end":631,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":633},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":37763,"byte_end":37770,"line_start":774,"line_end":774,"column_start":14,"column_end":21},"name":"Boolean","qualname":"::Boolean","value":"Boolean {  }","parent":null,"children":[{"krate":0,"index":634}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":37578,"byte_end":37593,"line_start":770,"line_end":770,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":37578,"byte_end":37593,"line_start":770,"line_end":770,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":37578,"byte_end":37593,"line_start":770,"line_end":770,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38097,"byte_end":38100,"line_start":781,"line_end":781,"column_start":12,"column_end":15},"name":"new","qualname":"<Boolean>::new","value":"fn (value: &JsValue) -> Boolean","parent":null,"children":[],"decl_id":null,"docs":" The `Boolean()` constructor creates an object wrapper for a boolean value.","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `Boolean::from` instead\")","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38019,"byte_end":38085,"line_start":780,"line_end":780,"column_start":5,"column_end":71}},{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":37578,"byte_end":37593,"line_start":770,"line_end":770,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":37578,"byte_end":37593,"line_start":770,"line_end":770,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38405,"byte_end":38413,"line_start":787,"line_end":787,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Boolean>::value_of","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of a `Boolean` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":37578,"byte_end":37593,"line_start":770,"line_end":770,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":37578,"byte_end":37593,"line_start":770,"line_end":770,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":799},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":39117,"byte_end":39125,"line_start":822,"line_end":822,"column_start":14,"column_end":22},"name":"DataView","qualname":"::DataView","value":"DataView {  }","parent":null,"children":[{"krate":0,"index":800}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":39483,"byte_end":39486,"line_start":830,"line_end":830,"column_start":12,"column_end":15},"name":"new","qualname":"<DataView>::new","value":"fn (buffer: &ArrayBuffer, byteOffset: usize, byteLength: usize) -> DataView","parent":null,"children":[],"decl_id":null,"docs":" The `DataView` view provides a low-level interface for reading and\n writing multiple number types in an `ArrayBuffer` irrespective of the\n platform's endianness.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":39850,"byte_end":39856,"line_start":836,"line_end":836,"column_start":12,"column_end":18},"name":"buffer","qualname":"<DataView>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The ArrayBuffer referenced by this view. Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":40243,"byte_end":40254,"line_start":843,"line_end":843,"column_start":12,"column_end":23},"name":"byte_length","qualname":"<DataView>::byte_length","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The length (in bytes) of this view from the start of its ArrayBuffer.\n Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":40635,"byte_end":40646,"line_start":850,"line_end":850,"column_start":12,"column_end":23},"name":"byte_offset","qualname":"<DataView>::byte_offset","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The offset (in bytes) of this view from the start of its ArrayBuffer.\n Fixed at construction time and thus read only.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":41003,"byte_end":41011,"line_start":857,"line_end":857,"column_start":12,"column_end":20},"name":"get_int8","qualname":"<DataView>::get_int8","value":"fn (&self, byte_offset: usize) -> i8","parent":null,"children":[],"decl_id":null,"docs":" The `getInt8()` method gets a signed 8-bit integer (byte) at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":41390,"byte_end":41399,"line_start":864,"line_end":864,"column_start":12,"column_end":21},"name":"get_uint8","qualname":"<DataView>::get_uint8","value":"fn (&self, byte_offset: usize) -> u8","parent":null,"children":[],"decl_id":null,"docs":" The `getUint8()` method gets a unsigned 8-bit integer (byte) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":41778,"byte_end":41787,"line_start":871,"line_end":871,"column_start":12,"column_end":21},"name":"get_int16","qualname":"<DataView>::get_int16","value":"fn (&self, byte_offset: usize) -> i16","parent":null,"children":[],"decl_id":null,"docs":" The `getInt16()` method gets a signed 16-bit integer (short) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":42167,"byte_end":42183,"line_start":878,"line_end":878,"column_start":12,"column_end":28},"name":"get_int16_endian","qualname":"<DataView>::get_int16_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> i16","parent":null,"children":[],"decl_id":null,"docs":" The `getInt16()` method gets a signed 16-bit integer (short) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":42595,"byte_end":42605,"line_start":885,"line_end":885,"column_start":12,"column_end":22},"name":"get_uint16","qualname":"<DataView>::get_uint16","value":"fn (&self, byte_offset: usize) -> u16","parent":null,"children":[],"decl_id":null,"docs":" The `getUint16()` method gets an unsigned 16-bit integer (unsigned short) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":42996,"byte_end":43013,"line_start":892,"line_end":892,"column_start":12,"column_end":29},"name":"get_uint16_endian","qualname":"<DataView>::get_uint16_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> u16","parent":null,"children":[],"decl_id":null,"docs":" The `getUint16()` method gets an unsigned 16-bit integer (unsigned short) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":43413,"byte_end":43422,"line_start":899,"line_end":899,"column_start":12,"column_end":21},"name":"get_int32","qualname":"<DataView>::get_int32","value":"fn (&self, byte_offset: usize) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `getInt32()` method gets a signed 32-bit integer (long) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":43801,"byte_end":43817,"line_start":906,"line_end":906,"column_start":12,"column_end":28},"name":"get_int32_endian","qualname":"<DataView>::get_int32_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `getInt32()` method gets a signed 32-bit integer (long) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":44228,"byte_end":44238,"line_start":913,"line_end":913,"column_start":12,"column_end":22},"name":"get_uint32","qualname":"<DataView>::get_uint32","value":"fn (&self, byte_offset: usize) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUint32()` method gets an unsigned 32-bit integer (unsigned long) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":44628,"byte_end":44645,"line_start":920,"line_end":920,"column_start":12,"column_end":29},"name":"get_uint32_endian","qualname":"<DataView>::get_uint32_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUint32()` method gets an unsigned 32-bit integer (unsigned long) at the specified\n byte offset from the start of the view.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":45050,"byte_end":45061,"line_start":927,"line_end":927,"column_start":12,"column_end":23},"name":"get_float32","qualname":"<DataView>::get_float32","value":"fn (&self, byte_offset: usize) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The `getFloat32()` method gets a signed 32-bit float (float) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":45445,"byte_end":45463,"line_start":934,"line_end":934,"column_start":12,"column_end":30},"name":"get_float32_endian","qualname":"<DataView>::get_float32_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The `getFloat32()` method gets a signed 32-bit float (float) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":45869,"byte_end":45880,"line_start":941,"line_end":941,"column_start":12,"column_end":23},"name":"get_float64","qualname":"<DataView>::get_float64","value":"fn (&self, byte_offset: usize) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `getFloat64()` method gets a signed 64-bit float (double) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":46265,"byte_end":46283,"line_start":948,"line_end":948,"column_start":12,"column_end":30},"name":"get_float64_endian","qualname":"<DataView>::get_float64_endian","value":"fn (&self, byte_offset: usize, little_endian: bool) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `getFloat64()` method gets a signed 64-bit float (double) at the specified\n byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":46687,"byte_end":46695,"line_start":955,"line_end":955,"column_start":12,"column_end":20},"name":"set_int8","qualname":"<DataView>::set_int8","value":"fn (&self, byte_offset: usize, value: i8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setInt8()` method stores a signed 8-bit integer (byte) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":47088,"byte_end":47097,"line_start":962,"line_end":962,"column_start":12,"column_end":21},"name":"set_uint8","qualname":"<DataView>::set_uint8","value":"fn (&self, byte_offset: usize, value: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setUint8()` method stores an unsigned 8-bit integer (byte) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":47489,"byte_end":47498,"line_start":969,"line_end":969,"column_start":12,"column_end":21},"name":"set_int16","qualname":"<DataView>::set_int16","value":"fn (&self, byte_offset: usize, value: i16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setInt16()` method stores a signed 16-bit integer (short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":47891,"byte_end":47907,"line_start":976,"line_end":976,"column_start":12,"column_end":28},"name":"set_int16_endian","qualname":"<DataView>::set_int16_endian","value":"fn (&self, byte_offset: usize, value: i16, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setInt16()` method stores a signed 16-bit integer (short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":48336,"byte_end":48346,"line_start":983,"line_end":983,"column_start":12,"column_end":22},"name":"set_uint16","qualname":"<DataView>::set_uint16","value":"fn (&self, byte_offset: usize, value: u16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setUint16()` method stores an unsigned 16-bit integer (unsigned short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":48754,"byte_end":48771,"line_start":990,"line_end":990,"column_start":12,"column_end":29},"name":"set_uint16_endian","qualname":"<DataView>::set_uint16_endian","value":"fn (&self, byte_offset: usize, value: u16, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setUint16()` method stores an unsigned 16-bit integer (unsigned short) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":49184,"byte_end":49193,"line_start":997,"line_end":997,"column_start":12,"column_end":21},"name":"set_int32","qualname":"<DataView>::set_int32","value":"fn (&self, byte_offset: usize, value: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setInt32()` method stores a signed 32-bit integer (long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":49585,"byte_end":49601,"line_start":1004,"line_end":1004,"column_start":12,"column_end":28},"name":"set_int32_endian","qualname":"<DataView>::set_int32_endian","value":"fn (&self, byte_offset: usize, value: i32, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setInt32()` method stores a signed 32-bit integer (long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":50029,"byte_end":50039,"line_start":1011,"line_end":1011,"column_start":12,"column_end":22},"name":"set_uint32","qualname":"<DataView>::set_uint32","value":"fn (&self, byte_offset: usize, value: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setUint32()` method stores an unsigned 32-bit integer (unsigned long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":50446,"byte_end":50463,"line_start":1018,"line_end":1018,"column_start":12,"column_end":29},"name":"set_uint32_endian","qualname":"<DataView>::set_uint32_endian","value":"fn (&self, byte_offset: usize, value: u32, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setUint32()` method stores an unsigned 32-bit integer (unsigned long) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":50881,"byte_end":50892,"line_start":1025,"line_end":1025,"column_start":12,"column_end":23},"name":"set_float32","qualname":"<DataView>::set_float32","value":"fn (&self, byte_offset: usize, value: f32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setFloat32()` method stores a signed 32-bit float (float) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":51289,"byte_end":51307,"line_start":1032,"line_end":1032,"column_start":12,"column_end":30},"name":"set_float32_endian","qualname":"<DataView>::set_float32_endian","value":"fn (&self, byte_offset: usize, value: f32, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setFloat32()` method stores a signed 32-bit float (float) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":51726,"byte_end":51737,"line_start":1039,"line_end":1039,"column_start":12,"column_end":23},"name":"set_float64","qualname":"<DataView>::set_float64","value":"fn (&self, byte_offset: usize, value: f64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setFloat64()` method stores a signed 64-bit float (double) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52135,"byte_end":52153,"line_start":1046,"line_end":1046,"column_start":12,"column_end":30},"name":"set_float64_endian","qualname":"<DataView>::set_float64_endian","value":"fn (&self, byte_offset: usize, value: f64, little_endian: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `setFloat64()` method stores a signed 64-bit float (double) value at the\n specified byte offset from the start of the DataView.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38964,"byte_end":38979,"line_start":818,"line_end":818,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":889},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52387,"byte_end":52392,"line_start":1054,"line_end":1054,"column_start":14,"column_end":19},"name":"Error","qualname":"::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":890}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52832,"byte_end":52835,"line_start":1063,"line_end":1063,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"fn (message: &str) -> Error","parent":null,"children":[],"decl_id":null,"docs":" The Error constructor creates an error object.\n Instances of Error objects are thrown when runtime errors occur.\n The Error object can also be used as a base object for user-defined exceptions.\n See below for standard built-in error types.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":53128,"byte_end":53135,"line_start":1069,"line_end":1069,"column_start":12,"column_end":19},"name":"message","qualname":"<Error>::message","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The message property is a human-readable description of the error.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":53222,"byte_end":53233,"line_start":1071,"line_end":1071,"column_start":12,"column_end":23},"name":"set_message","qualname":"<Error>::set_message","value":"fn (&self, message: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":53550,"byte_end":53554,"line_start":1077,"line_end":1077,"column_start":12,"column_end":16},"name":"name","qualname":"<Error>::name","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The name property represents a name for the type of error. The initial value is \"Error\".","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":53641,"byte_end":53649,"line_start":1079,"line_end":1079,"column_start":12,"column_end":20},"name":"set_name","qualname":"<Error>::set_name","value":"fn (&self, name: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":53959,"byte_end":53968,"line_start":1085,"line_end":1085,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Error>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the specified Error object","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":52237,"byte_end":52252,"line_start":1050,"line_end":1050,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":970},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54183,"byte_end":54192,"line_start":1093,"line_end":1093,"column_start":14,"column_end":23},"name":"EvalError","qualname":"::EvalError","value":"EvalError {  }","parent":null,"children":[{"krate":0,"index":971}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54012,"byte_end":54027,"line_start":1089,"line_end":1089,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54012,"byte_end":54027,"line_start":1089,"line_end":1089,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54012,"byte_end":54027,"line_start":1089,"line_end":1089,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54577,"byte_end":54580,"line_start":1101,"line_end":1101,"column_start":12,"column_end":15},"name":"new","qualname":"<EvalError>::new","value":"fn (message: &str) -> EvalError","parent":null,"children":[],"decl_id":null,"docs":" The EvalError object indicates an error regarding the global eval() function. This\n exception is not thrown by JavaScript anymore, however the EvalError object remains for\n compatibility.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54012,"byte_end":54027,"line_start":1089,"line_end":1089,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54012,"byte_end":54027,"line_start":1089,"line_end":1089,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1088},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54813,"byte_end":54821,"line_start":1109,"line_end":1109,"column_start":14,"column_end":22},"name":"Function","qualname":"::Function","value":"Function {  }","parent":null,"children":[{"krate":0,"index":1089}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":55454,"byte_end":55467,"line_start":1120,"line_end":1120,"column_start":12,"column_end":25},"name":"new_with_args","qualname":"<Function>::new_with_args","value":"fn (args: &str, body: &str) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `Function` constructor creates a new `Function` object. Calling the\n constructor directly can create functions dynamically, but suffers from\n security and similar (but far less significant) performance issues\n similar to `eval`. However, unlike `eval`, the `Function` constructor\n allows executing code in the global scope, prompting better programming\n habits and allowing for more efficient code minification.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":56136,"byte_end":56147,"line_start":1131,"line_end":1131,"column_start":12,"column_end":23},"name":"new_no_args","qualname":"<Function>::new_no_args","value":"fn (body: &str) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `Function` constructor creates a new `Function` object. Calling the\n constructor directly can create functions dynamically, but suffers from\n security and similar (but far less significant) performance issues\n similar to `eval`. However, unlike `eval`, the `Function` constructor\n allows executing code in the global scope, prompting better programming\n habits and allowing for more efficient code minification.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":56494,"byte_end":56499,"line_start":1138,"line_end":1138,"column_start":12,"column_end":17},"name":"apply","qualname":"<Function>::apply","value":"fn (&self, context: &JsValue, args: &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `apply()` method calls a function with a given this value, and arguments provided as an array\n (or an array-like object).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":56888,"byte_end":56893,"line_start":1145,"line_end":1145,"column_start":12,"column_end":17},"name":"call0","qualname":"<Function>::call0","value":"fn (&self, context: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":57268,"byte_end":57273,"line_start":1152,"line_end":1152,"column_start":12,"column_end":17},"name":"call1","qualname":"<Function>::call1","value":"fn (&self, context: &JsValue, arg1: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":57664,"byte_end":57669,"line_start":1159,"line_end":1159,"column_start":12,"column_end":17},"name":"call2","qualname":"<Function>::call2","value":"fn (&self, context: &JsValue, arg1: &JsValue, arg2: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":58115,"byte_end":58120,"line_start":1171,"line_end":1171,"column_start":12,"column_end":17},"name":"call3","qualname":"<Function>::call3","value":"fn (&self, context: &JsValue, arg1: &JsValue, arg2: &JsValue, arg3: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `call()` method calls a function with a given this value and\n arguments provided individually.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":58686,"byte_end":58690,"line_start":1184,"line_end":1184,"column_start":12,"column_end":16},"name":"bind","qualname":"<Function>::bind","value":"fn (&self, context: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":59145,"byte_end":59150,"line_start":1191,"line_end":1191,"column_start":12,"column_end":17},"name":"bind0","qualname":"<Function>::bind0","value":"fn (&self, context: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":59605,"byte_end":59610,"line_start":1198,"line_end":1198,"column_start":12,"column_end":17},"name":"bind1","qualname":"<Function>::bind1","value":"fn (&self, context: &JsValue, arg1: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":60081,"byte_end":60086,"line_start":1205,"line_end":1205,"column_start":12,"column_end":17},"name":"bind2","qualname":"<Function>::bind2","value":"fn (&self, context: &JsValue, arg1: &JsValue, arg2: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":60573,"byte_end":60578,"line_start":1212,"line_end":1212,"column_start":12,"column_end":17},"name":"bind3","qualname":"<Function>::bind3","value":"fn (&self, context: &JsValue, arg1: &JsValue, arg2: &JsValue, arg3: &JsValue) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The `bind()` method creates a new function that, when called, has its this keyword set to the provided value,\n with a given sequence of arguments preceding any provided when the new function is called.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":61005,"byte_end":61011,"line_start":1224,"line_end":1224,"column_start":12,"column_end":18},"name":"length","qualname":"<Function>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property indicates the number of arguments expected by the function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":61410,"byte_end":61414,"line_start":1232,"line_end":1232,"column_start":12,"column_end":16},"name":"name","qualname":"<Function>::name","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" A Function object's read-only name property indicates the function's\n name as specified when it was created or \"anonymous\" for functions\n created anonymously.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":61736,"byte_end":61745,"line_start":1238,"line_end":1238,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Function>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the source code of the function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":54625,"byte_end":54640,"line_start":1105,"line_end":1105,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":62090,"byte_end":62098,"line_start":1248,"line_end":1248,"column_start":12,"column_end":20},"name":"try_from","qualname":"<Function>::try_from","value":"fn (val: &JsValue) -> Option<&Function>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Function` value of this JS value if it's an instance of a\n function.","sig":null,"attributes":[{"value":"/ Returns the `Function` value of this JS value if it's an instance of a","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":61799,"byte_end":61873,"line_start":1242,"line_end":1242,"column_start":5,"column_end":79}},{"value":"/ function.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":61878,"byte_end":61891,"line_start":1243,"line_end":1243,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":61896,"byte_end":61899,"line_start":1244,"line_end":1244,"column_start":5,"column_end":8}},{"value":"/ If this JS value is not an instance of a function then this returns","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":61904,"byte_end":61975,"line_start":1245,"line_end":1245,"column_start":5,"column_end":76}},{"value":"/ `None`.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":61980,"byte_end":61991,"line_start":1246,"line_end":1246,"column_start":5,"column_end":16}},{"value":"deprecated(note =\n             \"recommended to use dyn_ref instead which is now equivalent\")","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":61996,"byte_end":62078,"line_start":1247,"line_end":1247,"column_start":5,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":1169},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":62350,"byte_end":62359,"line_start":1258,"line_end":1258,"column_start":14,"column_end":23},"name":"Generator","qualname":"::Generator","value":"Generator {  }","parent":null,"children":[{"krate":0,"index":1170}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":62181,"byte_end":62196,"line_start":1254,"line_end":1254,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":62181,"byte_end":62196,"line_start":1254,"line_end":1254,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":62181,"byte_end":62196,"line_start":1254,"line_end":1254,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":62729,"byte_end":62733,"line_start":1265,"line_end":1265,"column_start":12,"column_end":16},"name":"next","qualname":"<Generator>::next","value":"fn (&self, value: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `next()` method returns an object with two properties done and value.\n You can also provide a parameter to the next method to send a value to the generator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":62181,"byte_end":62196,"line_start":1254,"line_end":1254,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":62181,"byte_end":62196,"line_start":1254,"line_end":1254,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63085,"byte_end":63092,"line_start":1271,"line_end":1271,"column_start":12,"column_end":19},"name":"return_","qualname":"<Generator>::return_","value":"fn (&self, value: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `return()` method returns the given value and finishes the generator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":62181,"byte_end":62196,"line_start":1254,"line_end":1254,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":62181,"byte_end":62196,"line_start":1254,"line_end":1254,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63494,"byte_end":63499,"line_start":1278,"line_end":1278,"column_start":12,"column_end":17},"name":"throw","qualname":"<Generator>::throw","value":"fn (&self, error: &Error) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `throw()` method resumes the execution of a generator by throwing an error into it\n and returns an object with two properties done and value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":62181,"byte_end":62196,"line_start":1254,"line_end":1254,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":62181,"byte_end":62196,"line_start":1254,"line_end":1254,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1265},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63730,"byte_end":63733,"line_start":1286,"line_end":1286,"column_start":14,"column_end":17},"name":"Map","qualname":"::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":1266}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63972,"byte_end":63977,"line_start":1292,"line_end":1292,"column_start":12,"column_end":17},"name":"clear","qualname":"<Map>::clear","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `clear()` method removes all elements from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":64239,"byte_end":64245,"line_start":1298,"line_end":1298,"column_start":12,"column_end":18},"name":"delete","qualname":"<Map>::delete","value":"fn (&self, key: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":64607,"byte_end":64615,"line_start":1305,"line_end":1305,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Map>::for_each","value":"fn (&self, callback: &mut dyn FnMut(JsValue, JsValue)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per each\n key/value pair in the Map object, in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1251},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":64913,"byte_end":64916,"line_start":1311,"line_end":1311,"column_start":12,"column_end":15},"name":"get","qualname":"<Map>::get","value":"fn (&self, key: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `get()` method returns a specified element from a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1254},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":65243,"byte_end":65246,"line_start":1318,"line_end":1318,"column_start":12,"column_end":15},"name":"has","qualname":"<Map>::has","value":"fn (&self, key: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an element with\n the specified key exists or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":65589,"byte_end":65592,"line_start":1325,"line_end":1325,"column_start":12,"column_end":15},"name":"new","qualname":"<Map>::new","value":"fn () -> Map","parent":null,"children":[],"decl_id":null,"docs":" The Map object holds key-value pairs. Any value (both objects and\n primitive values) maybe used as either a key or a value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1260},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":65879,"byte_end":65882,"line_start":1332,"line_end":1332,"column_start":12,"column_end":15},"name":"set","qualname":"<Map>::set","value":"fn (&self, key: &JsValue, value: &JsValue) -> Map","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method adds or updates an element with a specified key\n and value to a Map object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":66309,"byte_end":66313,"line_start":1340,"line_end":1340,"column_start":12,"column_end":16},"name":"size","qualname":"<Map>::size","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The value of size is an integer representing how many entries\n the Map object has. A set accessor function for size is undefined;\n you can not change this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":63572,"byte_end":63587,"line_start":1282,"line_end":1282,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1279},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":66720,"byte_end":66727,"line_start":1352,"line_end":1352,"column_start":12,"column_end":19},"name":"entries","qualname":"<Map>::entries","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `entries()` method returns a new Iterator object that contains\n the [key, value] pairs for each element in the Map object in\n insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":66353,"byte_end":66368,"line_start":1344,"line_end":1344,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":66353,"byte_end":66368,"line_start":1344,"line_end":1344,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":67064,"byte_end":67068,"line_start":1359,"line_end":1359,"column_start":12,"column_end":16},"name":"keys","qualname":"<Map>::keys","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `keys()` method returns a new Iterator object that contains the\n keys for each element in the Map object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":66353,"byte_end":66368,"line_start":1344,"line_end":1344,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":66353,"byte_end":66368,"line_start":1344,"line_end":1344,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1285},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":67411,"byte_end":67417,"line_start":1366,"line_end":1366,"column_start":12,"column_end":18},"name":"values","qualname":"<Map>::values","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `values()` method returns a new Iterator object that contains the\n values for each element in the Map object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":66353,"byte_end":66368,"line_start":1344,"line_end":1344,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":66353,"byte_end":66368,"line_start":1344,"line_end":1344,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1344},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":67885,"byte_end":67893,"line_start":1378,"line_end":1378,"column_start":14,"column_end":22},"name":"Iterator","qualname":"::Iterator","value":"Iterator {  }","parent":null,"children":[{"krate":0,"index":1345}],"decl_id":null,"docs":" Any object that conforms to the JS iterator protocol. For example,\n something returned by `myArray[Symbol.iterator]()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":67458,"byte_end":67473,"line_start":1370,"line_end":1370,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":67458,"byte_end":67473,"line_start":1370,"line_end":1370,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":67458,"byte_end":67473,"line_start":1370,"line_end":1370,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":68233,"byte_end":68237,"line_start":1385,"line_end":1385,"column_start":12,"column_end":16},"name":"next","qualname":"<Iterator>::next","value":"fn (&self) -> Result<IteratorNext, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `next()` method always has to return an object with appropriate\n properties including done and value. If a non-object value gets returned\n (such as false or undefined), a TypeError (\"iterator.next() returned a\n non-object value\") will be thrown.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":67458,"byte_end":67473,"line_start":1370,"line_end":1370,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":67458,"byte_end":67473,"line_start":1370,"line_end":1370,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":1464},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":69180,"byte_end":69193,"line_start":1417,"line_end":1417,"column_start":14,"column_end":27},"name":"AsyncIterator","qualname":"::AsyncIterator","value":"AsyncIterator {  }","parent":null,"children":[{"krate":0,"index":1465}],"decl_id":null,"docs":" Any object that conforms to the JS async iterator protocol. For example,\n something returned by `myObject[Symbol.asyncIterator]()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":68726,"byte_end":68741,"line_start":1409,"line_end":1409,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":68726,"byte_end":68741,"line_start":1409,"line_end":1409,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":68726,"byte_end":68741,"line_start":1409,"line_end":1409,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":69561,"byte_end":69565,"line_start":1424,"line_end":1424,"column_start":12,"column_end":16},"name":"next","qualname":"<AsyncIterator>::next","value":"fn (&self) -> Result<Promise, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `next()` method always has to return a Promise which resolves to an object\n with appropriate properties including done and value. If a non-object value\n gets returned (such as false or undefined), a TypeError (\"iterator.next()\n returned a non-object value\") will be thrown.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":68726,"byte_end":68741,"line_start":1409,"line_end":1409,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":68726,"byte_end":68741,"line_start":1409,"line_end":1409,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":41},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":69781,"byte_end":69785,"line_start":1430,"line_end":1430,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44}],"decl_id":null,"docs":" An iterator over the JS `Symbol.iterator` iteration protocol.","sig":null,"attributes":[{"value":"/ An iterator over the JS `Symbol.iterator` iteration protocol.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":69620,"byte_end":69685,"line_start":1427,"line_end":1427,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":69686,"byte_end":69689,"line_start":1428,"line_end":1428,"column_start":1,"column_end":4}},{"value":"/ Use the `IntoIterator for &js_sys::Iterator` implementation to create this.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":69690,"byte_end":69769,"line_start":1429,"line_end":1429,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":45},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":69999,"byte_end":70007,"line_start":1438,"line_end":1438,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":47}],"decl_id":null,"docs":" An iterator over the JS `Symbol.iterator` iteration protocol.","sig":null,"attributes":[{"value":"/ An iterator over the JS `Symbol.iterator` iteration protocol.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":69839,"byte_end":69904,"line_start":1435,"line_end":1435,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":69905,"byte_end":69908,"line_start":1436,"line_end":1436,"column_start":1,"column_end":4}},{"value":"/ Use the `IntoIterator for js_sys::Iterator` implementation to create this.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":69909,"byte_end":69987,"line_start":1437,"line_end":1437,"column_start":1,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":69},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":71572,"byte_end":71580,"line_start":1514,"line_end":1514,"column_start":8,"column_end":16},"name":"try_iter","qualname":"::try_iter","value":"fn (val: &JsValue) -> Result<Option<IntoIter>, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" Create an iterator over `val` using the JS iteration protocol and\n `Symbol.iterator`.\n","sig":null,"attributes":[{"value":"/ Create an iterator over `val` using the JS iteration protocol and","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":71472,"byte_end":71541,"line_start":1512,"line_end":1512,"column_start":1,"column_end":70}},{"value":"/ `Symbol.iterator`.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":71542,"byte_end":71564,"line_start":1513,"line_end":1513,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1535},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":72381,"byte_end":72393,"line_start":1539,"line_end":1539,"column_start":14,"column_end":26},"name":"IteratorNext","qualname":"::IteratorNext","value":"IteratorNext {  }","parent":null,"children":[{"krate":0,"index":1536}],"decl_id":null,"docs":" The result of calling `next()` on a JS iterator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":72037,"byte_end":72052,"line_start":1532,"line_end":1532,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":72037,"byte_end":72052,"line_start":1532,"line_end":1532,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":72037,"byte_end":72052,"line_start":1532,"line_end":1532,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":72821,"byte_end":72825,"line_start":1549,"line_end":1549,"column_start":12,"column_end":16},"name":"done","qualname":"<IteratorNext>::done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Has the value `true` if the iterator is past the end of the iterated\n sequence. In this case value optionally specifies the return value of\n the iterator.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":72037,"byte_end":72052,"line_start":1532,"line_end":1532,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":72037,"byte_end":72052,"line_start":1532,"line_end":1532,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1533},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73013,"byte_end":73018,"line_start":1554,"line_end":1554,"column_start":12,"column_end":17},"name":"value","qualname":"<IteratorNext>::value","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" Any JavaScript value returned by the iterator. Can be omitted when done\n is true.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":72037,"byte_end":72052,"line_start":1532,"line_end":1532,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":72037,"byte_end":72052,"line_start":1532,"line_end":1532,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":70},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73088,"byte_end":73092,"line_start":1558,"line_end":1558,"column_start":9,"column_end":13},"name":"Math","qualname":"::Math","value":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1554},{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1568},{"krate":0,"index":1570},{"krate":0,"index":1572},{"krate":0,"index":1574},{"krate":0,"index":1576},{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1582},{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1588},{"krate":0,"index":1590},{"krate":0,"index":1592},{"krate":0,"index":1594},{"krate":0,"index":1596},{"krate":0,"index":1598},{"krate":0,"index":1600},{"krate":0,"index":1602},{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":1616}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73055,"byte_end":73079,"line_start":1557,"line_end":1557,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":1548},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73474,"byte_end":73477,"line_start":1569,"line_end":1569,"column_start":16,"column_end":19},"name":"abs","qualname":"::Math::abs","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.abs()` function returns the absolute value of a number, that is\n Math.abs(x) = |x|","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1550},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73892,"byte_end":73896,"line_start":1577,"line_end":1577,"column_start":16,"column_end":20},"name":"acos","qualname":"::Math::acos","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.acos()` function returns the arccosine (in radians) of a\n number, that is ∀x∊[-1;1]\n Math.acos(x) = arccos(x) = the unique y∊[0;π] such that cos(y)=x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1552},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":74310,"byte_end":74315,"line_start":1585,"line_end":1585,"column_start":16,"column_end":21},"name":"acosh","qualname":"::Math::acosh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.acosh()` function returns the hyperbolic arc-cosine of a\n number, that is ∀x ≥ 1\n Math.acosh(x) = arcosh(x) = the unique y ≥ 0 such that cosh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1554},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":74736,"byte_end":74740,"line_start":1593,"line_end":1593,"column_start":16,"column_end":20},"name":"asin","qualname":"::Math::asin","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.asin()` function returns the arcsine (in radians) of a\n number, that is ∀x ∊ [-1;1]\n Math.asin(x) = arcsin(x) = the unique y∊[-π2;π2] such that sin(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1556},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":75122,"byte_end":75127,"line_start":1600,"line_end":1600,"column_start":16,"column_end":21},"name":"asinh","qualname":"::Math::asinh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.asinh()` function returns the hyperbolic arcsine of a\n number, that is Math.asinh(x) = arsinh(x) = the unique y such that sinh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1558},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":75400,"byte_end":75404,"line_start":1606,"line_end":1606,"column_start":16,"column_end":20},"name":"atan","qualname":"::Math::atan","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.atan()` function returns the arctangent (in radians) of a\n number, that is Math.atan(x) = arctan(x) = the unique y ∊ [-π2;π2]such that\n tan(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1560},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":75728,"byte_end":75733,"line_start":1613,"line_end":1613,"column_start":16,"column_end":21},"name":"atan2","qualname":"::Math::atan2","value":"fn (y: f64, x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.atan2()` function returns the arctangent of the quotient of\n its arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1562},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":76156,"byte_end":76161,"line_start":1621,"line_end":1621,"column_start":16,"column_end":21},"name":"atanh","qualname":"::Math::atanh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.atanh()` function returns the hyperbolic arctangent of a number,\n that is ∀x ∊ (-1,1), Math.atanh(x) = arctanh(x) = the unique y such that\n tanh(y) = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1564},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":76522,"byte_end":76526,"line_start":1628,"line_end":1628,"column_start":16,"column_end":20},"name":"cbrt","qualname":"::Math::cbrt","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.cbrt() `function returns the cube root of a number, that is\n Math.cbrt(x) = ∛x = the unique y such that y^3 = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1566},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":76861,"byte_end":76865,"line_start":1635,"line_end":1635,"column_start":16,"column_end":20},"name":"ceil","qualname":"::Math::ceil","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.ceil()` function returns the smallest integer greater than\n or equal to a given number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1568},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":77221,"byte_end":77226,"line_start":1642,"line_end":1642,"column_start":16,"column_end":21},"name":"clz32","qualname":"::Math::clz32","value":"fn (x: i32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `Math.clz32()` function returns the number of leading zero bits in\n the 32-bit binary representation of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1570},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":77626,"byte_end":77629,"line_start":1649,"line_end":1649,"column_start":16,"column_end":19},"name":"cos","qualname":"::Math::cos","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.cos()` static function returns the cosine of the specified angle,\n which must be specified in radians. This value is length(adjacent)/length(hypotenuse).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1572},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":77981,"byte_end":77985,"line_start":1656,"line_end":1656,"column_start":16,"column_end":20},"name":"cosh","qualname":"::Math::cosh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.cosh()` function returns the hyperbolic cosine of a number,\n that can be expressed using the constant e.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1574},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":78381,"byte_end":78384,"line_start":1663,"line_end":1663,"column_start":16,"column_end":19},"name":"exp","qualname":"::Math::exp","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.exp()` function returns e^x, where x is the argument, and e is Euler's number\n (also known as Napier's constant), the base of the natural logarithms.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1576},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":78735,"byte_end":78740,"line_start":1670,"line_end":1670,"column_start":16,"column_end":21},"name":"expm1","qualname":"::Math::expm1","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.expm1()` function returns e^x - 1, where x is the argument, and e the base of the\n natural logarithms.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1578},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":79073,"byte_end":79078,"line_start":1677,"line_end":1677,"column_start":16,"column_end":21},"name":"floor","qualname":"::Math::floor","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.floor()` function returns the largest integer less than or\n equal to a given number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1580},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":79425,"byte_end":79431,"line_start":1684,"line_end":1684,"column_start":16,"column_end":22},"name":"fround","qualname":"::Math::fround","value":"fn (x: f64) -> f32","parent":null,"children":[],"decl_id":null,"docs":" The `Math.fround()` function returns the nearest 32-bit single precision float representation\n of a Number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1582},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":79750,"byte_end":79755,"line_start":1690,"line_end":1690,"column_start":16,"column_end":21},"name":"hypot","qualname":"::Math::hypot","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.hypot()` function returns the square root of the sum of squares of its arguments.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1584},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":80106,"byte_end":80110,"line_start":1697,"line_end":1697,"column_start":16,"column_end":20},"name":"imul","qualname":"::Math::imul","value":"fn (x: i32, y: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `Math.imul()` function returns the result of the C-like 32-bit multiplication of the\n two parameters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1586},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":80509,"byte_end":80512,"line_start":1704,"line_end":1704,"column_start":16,"column_end":19},"name":"log","qualname":"::Math::log","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.log()` function returns the natural logarithm (base e) of a number.\n The JavaScript `Math.log()` function is equivalent to ln(x) in mathematics.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1588},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":80810,"byte_end":80815,"line_start":1710,"line_end":1710,"column_start":16,"column_end":21},"name":"log10","qualname":"::Math::log10","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.log10()` function returns the base 10 logarithm of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1590},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":81114,"byte_end":81119,"line_start":1715,"line_end":1715,"column_start":16,"column_end":21},"name":"log1p","qualname":"::Math::log1p","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.log1p()` function returns the natural logarithm (base e) of 1 + a number.\n [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1592},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":81414,"byte_end":81418,"line_start":1721,"line_end":1721,"column_start":16,"column_end":20},"name":"log2","qualname":"::Math::log2","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.log2()` function returns the base 2 logarithm of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1594},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":81705,"byte_end":81708,"line_start":1727,"line_end":1727,"column_start":16,"column_end":19},"name":"max","qualname":"::Math::max","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.max()` function returns the largest of two numbers.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1596},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":82023,"byte_end":82026,"line_start":1733,"line_end":1733,"column_start":16,"column_end":19},"name":"min","qualname":"::Math::min","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The static function `Math.min()` returns the lowest-valued number passed into it.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1598},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":82349,"byte_end":82352,"line_start":1739,"line_end":1739,"column_start":16,"column_end":19},"name":"pow","qualname":"::Math::pow","value":"fn (base: f64, exponent: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.pow()` function returns the base to the exponent power, that is, base^exponent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1600},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":83006,"byte_end":83012,"line_start":1749,"line_end":1749,"column_start":16,"column_end":22},"name":"random","qualname":"::Math::random","value":"fn () -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.random()` function returns a floating-point, pseudo-random number\n in the range 0–1 (inclusive of 0, but not 1) with approximately uniform distribution\n over that range — which you can then scale to your desired range.\n The implementation selects the initial seed to the random number generation algorithm;\n it cannot be chosen or reset by the user.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1602},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":83323,"byte_end":83328,"line_start":1755,"line_end":1755,"column_start":16,"column_end":21},"name":"round","qualname":"::Math::round","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.round()` function returns the value of a number rounded to the nearest integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1604},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":83684,"byte_end":83688,"line_start":1762,"line_end":1762,"column_start":16,"column_end":20},"name":"sign","qualname":"::Math::sign","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.sign()` function returns the sign of a number, indicating whether the number is\n positive, negative or zero.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1606},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":83969,"byte_end":83972,"line_start":1768,"line_end":1768,"column_start":16,"column_end":19},"name":"sin","qualname":"::Math::sin","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.sin()` function returns the sine of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1608},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":84352,"byte_end":84356,"line_start":1775,"line_end":1775,"column_start":16,"column_end":20},"name":"sinh","qualname":"::Math::sinh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.sinh()` function returns the hyperbolic sine of a number, that can be expressed\n using the constant e: Math.sinh(x) = (e^x - e^-x)/2","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1610},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":84737,"byte_end":84741,"line_start":1782,"line_end":1782,"column_start":16,"column_end":20},"name":"sqrt","qualname":"::Math::sqrt","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.sqrt()` function returns the square root of a number, that is\n ∀x ≥ 0, Math.sqrt(x) = √x = the unique y ≥ 0 such that y^2 = x","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1612},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85025,"byte_end":85028,"line_start":1788,"line_end":1788,"column_start":16,"column_end":19},"name":"tan","qualname":"::Math::tan","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.tan()` function returns the tangent of a number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1614},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85422,"byte_end":85426,"line_start":1795,"line_end":1795,"column_start":16,"column_end":20},"name":"tanh","qualname":"::Math::tanh","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.tanh()` function returns the hyperbolic tangent of a number, that is\n tanh x = sinh x / cosh x = (e^x - e^-x)/(e^x + e^-x) = (e^2x - 1)/(e^2x + 1)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":1616},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85765,"byte_end":85770,"line_start":1802,"line_end":1802,"column_start":16,"column_end":21},"name":"trunc","qualname":"::Math::trunc","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Math.trunc()` function returns the integer part of a number by removing any fractional\n digits.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":73130,"byte_end":73145,"line_start":1562,"line_end":1562,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1718},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85975,"byte_end":85981,"line_start":1811,"line_end":1811,"column_start":14,"column_end":20},"name":"Number","qualname":"::Number","value":"Number {  }","parent":null,"children":[{"krate":0,"index":1719}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":86291,"byte_end":86300,"line_start":1817,"line_end":1817,"column_start":12,"column_end":21},"name":"is_finite","qualname":"<Number>::is_finite","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Number.isFinite()` method determines whether the passed value is a finite number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":86633,"byte_end":86643,"line_start":1823,"line_end":1823,"column_start":12,"column_end":22},"name":"is_integer","qualname":"<Number>::is_integer","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Number.isInteger()` method determines whether the passed value is an integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":87051,"byte_end":87057,"line_start":1830,"line_end":1830,"column_start":12,"column_end":18},"name":"is_nan","qualname":"<Number>::is_nan","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Number.isNaN()` method determines whether the passed value is `NaN` and its type is Number.\n It is a more robust version of the original, global isNaN().","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1689},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":87433,"byte_end":87448,"line_start":1837,"line_end":1837,"column_start":12,"column_end":27},"name":"is_safe_integer","qualname":"<Number>::is_safe_integer","value":"fn (value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Number.isSafeInteger()` method determines whether the provided value is a number\n that is a safe integer.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":87897,"byte_end":87900,"line_start":1846,"line_end":1846,"column_start":12,"column_end":15},"name":"new","qualname":"<Number>::new","value":"fn (value: &JsValue) -> Number","parent":null,"children":[],"decl_id":null,"docs":" The `Number` JavaScript object is a wrapper object allowing\n you to work with numerical values. A `Number` object is\n created using the `Number()` constructor.","sig":null,"attributes":[{"value":"deprecated(note = \"recommended to use `Number::from` instead\")","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":87820,"byte_end":87885,"line_start":1845,"line_end":1845,"column_start":5,"column_end":70}},{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1695},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":88269,"byte_end":88278,"line_start":1853,"line_end":1853,"column_start":12,"column_end":21},"name":"parse_int","qualname":"<Number>::parse_int","value":"fn (text: &str, radix: u8) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Number.parseInt()` method parses a string argument and returns an\n integer of the specified radix or base.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1698},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":88638,"byte_end":88649,"line_start":1860,"line_end":1860,"column_start":12,"column_end":23},"name":"parse_float","qualname":"<Number>::parse_float","value":"fn (text: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Number.parseFloat()` method parses a string argument and returns a\n floating point number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1701},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":88996,"byte_end":89012,"line_start":1867,"line_end":1867,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Number>::to_locale_string","value":"fn (&self, locale: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleString()` method returns a string with a language sensitive\n representation of this number.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":89381,"byte_end":89393,"line_start":1874,"line_end":1874,"column_start":12,"column_end":24},"name":"to_precision","qualname":"<Number>::to_precision","value":"fn (&self, precision: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `toPrecision()` method returns a string representing the Number\n object to the specified precision.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1707},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":89768,"byte_end":89776,"line_start":1881,"line_end":1881,"column_start":12,"column_end":20},"name":"to_fixed","qualname":"<Number>::to_fixed","value":"fn (&self, digits: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `toFixed()` method returns a string representing the Number\n object using fixed-point notation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1710},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":90163,"byte_end":90177,"line_start":1888,"line_end":1888,"column_start":12,"column_end":26},"name":"to_exponential","qualname":"<Number>::to_exponential","value":"fn (&self, fraction_digits: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `toExponential()` method returns a string representing the Number\n object in exponential notation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1713},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":90544,"byte_end":90553,"line_start":1895,"line_end":1895,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Number>::to_string","value":"fn (&self, radix: u8) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the\n specified Number object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1716},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":90897,"byte_end":90905,"line_start":1902,"line_end":1902,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Number>::value_of","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the wrapped primitive value of\n a Number object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":85807,"byte_end":85822,"line_start":1807,"line_end":1807,"column_start":1,"column_end":16}}]},{"kind":"Const","id":{"krate":0,"index":73},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91158,"byte_end":91165,"line_start":1909,"line_end":1909,"column_start":15,"column_end":22},"name":"EPSILON","qualname":"::Number::EPSILON","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" The smallest interval between two representable numbers.","sig":null,"attributes":[{"value":"/ The smallest interval between two representable numbers.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":90950,"byte_end":91010,"line_start":1906,"line_end":1906,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91015,"byte_end":91018,"line_start":1907,"line_end":1907,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91023,"byte_end":91143,"line_start":1908,"line_end":1908,"column_start":5,"column_end":125}}]},{"kind":"Const","id":{"krate":0,"index":74},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91402,"byte_end":91418,"line_start":1913,"line_end":1913,"column_start":15,"column_end":31},"name":"MAX_SAFE_INTEGER","qualname":"::Number::MAX_SAFE_INTEGER","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" The maximum safe integer in JavaScript (2^53 - 1).","sig":null,"attributes":[{"value":"/ The maximum safe integer in JavaScript (2^53 - 1).","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91191,"byte_end":91245,"line_start":1910,"line_end":1910,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91250,"byte_end":91253,"line_start":1911,"line_end":1911,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91258,"byte_end":91387,"line_start":1912,"line_end":1912,"column_start":5,"column_end":134}}]},{"kind":"Const","id":{"krate":0,"index":75},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91646,"byte_end":91655,"line_start":1917,"line_end":1917,"column_start":15,"column_end":24},"name":"MAX_VALUE","qualname":"::Number::MAX_VALUE","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" The largest positive representable number.","sig":null,"attributes":[{"value":"/ The largest positive representable number.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91450,"byte_end":91496,"line_start":1914,"line_end":1914,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91501,"byte_end":91504,"line_start":1915,"line_end":1915,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91509,"byte_end":91631,"line_start":1916,"line_end":1916,"column_start":5,"column_end":127}}]},{"kind":"Const","id":{"krate":0,"index":76},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91891,"byte_end":91907,"line_start":1921,"line_end":1921,"column_start":15,"column_end":31},"name":"MIN_SAFE_INTEGER","qualname":"::Number::MIN_SAFE_INTEGER","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" The minimum safe integer in JavaScript (-(2^53 - 1)).","sig":null,"attributes":[{"value":"/ The minimum safe integer in JavaScript (-(2^53 - 1)).","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91677,"byte_end":91734,"line_start":1918,"line_end":1918,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91739,"byte_end":91742,"line_start":1919,"line_end":1919,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91747,"byte_end":91876,"line_start":1920,"line_end":1920,"column_start":5,"column_end":134}}]},{"kind":"Const","id":{"krate":0,"index":77},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92314,"byte_end":92323,"line_start":1927,"line_end":1927,"column_start":15,"column_end":24},"name":"MIN_VALUE","qualname":"::Number::MIN_VALUE","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" The smallest positive representable number—that is, the positive number closest to zero\n (without actually being zero).","sig":null,"attributes":[{"value":"/ The smallest positive representable number—that is, the positive number closest to zero","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":91940,"byte_end":92033,"line_start":1922,"line_end":1922,"column_start":5,"column_end":96}},{"value":"/ (without actually being zero).","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92038,"byte_end":92072,"line_start":1923,"line_end":1923,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92077,"byte_end":92080,"line_start":1924,"line_end":1924,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92085,"byte_end":92207,"line_start":1925,"line_end":1925,"column_start":5,"column_end":127}}]},{"kind":"Const","id":{"krate":0,"index":78},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92520,"byte_end":92523,"line_start":1931,"line_end":1931,"column_start":15,"column_end":18},"name":"NAN","qualname":"::Number::NAN","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Special \"Not a Number\" value.","sig":null,"attributes":[{"value":"/ Special \"Not a Number\" value.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92343,"byte_end":92376,"line_start":1928,"line_end":1928,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92381,"byte_end":92384,"line_start":1929,"line_end":1929,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92389,"byte_end":92505,"line_start":1930,"line_end":1930,"column_start":5,"column_end":121}}]},{"kind":"Const","id":{"krate":0,"index":79},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92774,"byte_end":92791,"line_start":1935,"line_end":1935,"column_start":15,"column_end":32},"name":"NEGATIVE_INFINITY","qualname":"::Number::NEGATIVE_INFINITY","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Special value representing negative infinity. Returned on overflow.","sig":null,"attributes":[{"value":"/ Special value representing negative infinity. Returned on overflow.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92545,"byte_end":92616,"line_start":1932,"line_end":1932,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92621,"byte_end":92624,"line_start":1933,"line_end":1933,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92629,"byte_end":92759,"line_start":1934,"line_end":1934,"column_start":5,"column_end":135}}]},{"kind":"Const","id":{"krate":0,"index":80},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93042,"byte_end":93059,"line_start":1939,"line_end":1939,"column_start":15,"column_end":32},"name":"POSITIVE_INFINITY","qualname":"::Number::POSITIVE_INFINITY","value":"f64","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Special value representing infinity. Returned on overflow.","sig":null,"attributes":[{"value":"/ Special value representing infinity. Returned on overflow.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92822,"byte_end":92884,"line_start":1936,"line_end":1936,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92889,"byte_end":92892,"line_start":1937,"line_end":1937,"column_start":5,"column_end":8}},{"value":"/ [MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":92897,"byte_end":93027,"line_start":1938,"line_end":1938,"column_start":5,"column_end":135}}]},{"kind":"Struct","id":{"krate":0,"index":1987},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93951,"byte_end":93955,"line_start":1979,"line_end":1979,"column_start":14,"column_end":18},"name":"Date","qualname":"::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":1988}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1814},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":94263,"byte_end":94271,"line_start":1986,"line_end":1986,"column_start":12,"column_end":20},"name":"get_date","qualname":"<Date>::get_date","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getDate()` method returns the day of the month for the\n specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1817},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":94662,"byte_end":94669,"line_start":1993,"line_end":1993,"column_start":12,"column_end":19},"name":"get_day","qualname":"<Date>::get_day","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getDay()` method returns the day of the week for the specified date according to local time,\n where 0 represents Sunday. For the day of the month see getDate().","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1820},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":94988,"byte_end":95001,"line_start":1999,"line_end":1999,"column_start":12,"column_end":25},"name":"get_full_year","qualname":"<Date>::get_full_year","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getFullYear()` method returns the year of the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1823},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":95313,"byte_end":95322,"line_start":2005,"line_end":2005,"column_start":12,"column_end":21},"name":"get_hours","qualname":"<Date>::get_hours","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getHours()` method returns the hour for the specified date, according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1826},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":95661,"byte_end":95677,"line_start":2011,"line_end":2011,"column_start":12,"column_end":28},"name":"get_milliseconds","qualname":"<Date>::get_milliseconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getMilliseconds()` method returns the milliseconds in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":95996,"byte_end":96007,"line_start":2017,"line_end":2017,"column_start":12,"column_end":23},"name":"get_minutes","qualname":"<Date>::get_minutes","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getMinutes()` method returns the minutes in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1832},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":96400,"byte_end":96409,"line_start":2024,"line_end":2024,"column_start":12,"column_end":21},"name":"get_month","qualname":"<Date>::get_month","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getMonth()` method returns the month in the specified date according to local time,\n as a zero-based value (where zero indicates the first month of the year).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1835},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":96728,"byte_end":96739,"line_start":2030,"line_end":2030,"column_start":12,"column_end":23},"name":"get_seconds","qualname":"<Date>::get_seconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getSeconds()` method returns the seconds in the specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1838},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":97094,"byte_end":97102,"line_start":2037,"line_end":2037,"column_start":12,"column_end":20},"name":"get_time","qualname":"<Date>::get_time","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `getTime()` method returns the numeric value corresponding to the time for the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":97480,"byte_end":97499,"line_start":2044,"line_end":2044,"column_start":12,"column_end":31},"name":"get_timezone_offset","qualname":"<Date>::get_timezone_offset","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `getTimezoneOffset()` method returns the time zone difference, in minutes,\n from current locale (host system settings) to UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1844},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":97846,"byte_end":97858,"line_start":2051,"line_end":2051,"column_start":12,"column_end":24},"name":"get_utc_date","qualname":"<Date>::get_utc_date","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCDate()` method returns the day (date) of the month in the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1847},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":98221,"byte_end":98232,"line_start":2058,"line_end":2058,"column_start":12,"column_end":23},"name":"get_utc_day","qualname":"<Date>::get_utc_day","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCDay()` method returns the day of the week in the specified date according to universal time,\n where 0 represents Sunday.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1850},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":98564,"byte_end":98581,"line_start":2064,"line_end":2064,"column_start":12,"column_end":29},"name":"get_utc_full_year","qualname":"<Date>::get_utc_full_year","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCFullYear()` method returns the year in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1853},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":98905,"byte_end":98918,"line_start":2070,"line_end":2070,"column_start":12,"column_end":25},"name":"get_utc_hours","qualname":"<Date>::get_utc_hours","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCHours()` method returns the hours in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1856},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":99278,"byte_end":99298,"line_start":2077,"line_end":2077,"column_start":12,"column_end":32},"name":"get_utc_milliseconds","qualname":"<Date>::get_utc_milliseconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCMilliseconds()` method returns the milliseconds in the specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1859},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":99630,"byte_end":99645,"line_start":2083,"line_end":2083,"column_start":12,"column_end":27},"name":"get_utc_minutes","qualname":"<Date>::get_utc_minutes","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCMinutes()` method returns the minutes in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":100044,"byte_end":100057,"line_start":2090,"line_end":2090,"column_start":12,"column_end":25},"name":"get_utc_month","qualname":"<Date>::get_utc_month","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCMonth()` returns the month of the specified date according to universal time,\n as a zero-based value (where zero indicates the first month of the year).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":100389,"byte_end":100404,"line_start":2096,"line_end":2096,"column_start":12,"column_end":27},"name":"get_utc_seconds","qualname":"<Date>::get_utc_seconds","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `getUTCSeconds()` method returns the seconds in the specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":100798,"byte_end":100801,"line_start":2104,"line_end":2104,"column_start":12,"column_end":15},"name":"new","qualname":"<Date>::new","value":"fn (init: &JsValue) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1871},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":101092,"byte_end":101097,"line_start":2111,"line_end":2111,"column_start":12,"column_end":17},"name":"new_0","qualname":"<Date>::new_0","value":"fn () -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents the current moment in\n time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1874},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":101481,"byte_end":101500,"line_start":2119,"line_end":2119,"column_start":12,"column_end":31},"name":"new_with_year_month","qualname":"<Date>::new_with_year_month","value":"fn (year: u32, month: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1877},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":101905,"byte_end":101928,"line_start":2127,"line_end":2127,"column_start":12,"column_end":35},"name":"new_with_year_month_day","qualname":"<Date>::new_with_year_month_day","value":"fn (year: u32, month: i32, day: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1880},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":102343,"byte_end":102369,"line_start":2135,"line_end":2135,"column_start":12,"column_end":38},"name":"new_with_year_month_day_hr","qualname":"<Date>::new_with_year_month_day_hr","value":"fn (year: u32, month: i32, day: i32, hr: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1883},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":102793,"byte_end":102823,"line_start":2143,"line_end":2143,"column_start":12,"column_end":42},"name":"new_with_year_month_day_hr_min","qualname":"<Date>::new_with_year_month_day_hr_min","value":"fn (year: u32, month: i32, day: i32, hr: i32, min: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":103304,"byte_end":103338,"line_start":2157,"line_end":2157,"column_start":12,"column_end":46},"name":"new_with_year_month_day_hr_min_sec","qualname":"<Date>::new_with_year_month_day_hr_min_sec","value":"fn (year: u32, month: i32, day: i32, hr: i32, min: i32, sec: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1889},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":103837,"byte_end":103877,"line_start":2172,"line_end":2172,"column_start":12,"column_end":52},"name":"new_with_year_month_day_hr_min_sec_milli","qualname":"<Date>::new_with_year_month_day_hr_min_sec_milli","value":"fn (year: u32, month: i32, day: i32, hr: i32, min: i32, sec: i32, milli: i32) -> Date","parent":null,"children":[],"decl_id":null,"docs":" Creates a JavaScript `Date` instance that represents\n a single moment in time. `Date` objects are based on a time value that is\n the number of milliseconds since 1 January 1970 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":104327,"byte_end":104330,"line_start":2187,"line_end":2187,"column_start":12,"column_end":15},"name":"now","qualname":"<Date>::now","value":"fn () -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Date.now()` method returns the number of milliseconds\n elapsed since January 1, 1970 00:00:00 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1895},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":104800,"byte_end":104805,"line_start":2195,"line_end":2195,"column_start":12,"column_end":17},"name":"parse","qualname":"<Date>::parse","value":"fn (date: &str) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Date.parse()` method parses a string representation of a date, and returns the number of milliseconds\n since January 1, 1970, 00:00:00 UTC or `NaN` if the string is unrecognized or, in some cases,\n contains illegal date values (e.g. 2015-02-31).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1898},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":105133,"byte_end":105141,"line_start":2201,"line_end":2201,"column_start":12,"column_end":20},"name":"set_date","qualname":"<Date>::set_date","value":"fn (&self, day: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setDate()` method sets the day of the Date object relative to the beginning of the currently set month.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1901},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":105502,"byte_end":105515,"line_start":2208,"line_end":2208,"column_start":12,"column_end":25},"name":"set_full_year","qualname":"<Date>::set_full_year","value":"fn (&self, year: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setFullYear()` method sets the full year for a specified date according to local time.\n Returns new timestamp.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1904},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":105877,"byte_end":105901,"line_start":2215,"line_end":2215,"column_start":12,"column_end":36},"name":"set_full_year_with_month","qualname":"<Date>::set_full_year_with_month","value":"fn (&self, year: u32, month: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setFullYear()` method sets the full year for a specified date according to local time.\n Returns new timestamp.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1907},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":106275,"byte_end":106304,"line_start":2222,"line_end":2222,"column_start":12,"column_end":41},"name":"set_full_year_with_month_date","qualname":"<Date>::set_full_year_with_month_date","value":"fn (&self, year: u32, month: i32, date: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setFullYear()` method sets the full year for a specified date according to local time.\n Returns new timestamp.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1910},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":106792,"byte_end":106801,"line_start":2230,"line_end":2230,"column_start":12,"column_end":21},"name":"set_hours","qualname":"<Date>::set_hours","value":"fn (&self, hours: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setHours()` method sets the hours for a specified date according to local time,\n and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented\n by the updated Date instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1913},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":107148,"byte_end":107164,"line_start":2236,"line_end":2236,"column_start":12,"column_end":28},"name":"set_milliseconds","qualname":"<Date>::set_milliseconds","value":"fn (&self, milliseconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setMilliseconds()` method sets the milliseconds for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1916},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":107498,"byte_end":107509,"line_start":2242,"line_end":2242,"column_start":12,"column_end":23},"name":"set_minutes","qualname":"<Date>::set_minutes","value":"fn (&self, minutes: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setMinutes()` method sets the minutes for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1919},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":107842,"byte_end":107851,"line_start":2248,"line_end":2248,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Date>::set_month","value":"fn (&self, month: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setMonth()` method sets the month for a specified date according to the currently set year.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1922},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":108178,"byte_end":108189,"line_start":2254,"line_end":2254,"column_start":12,"column_end":23},"name":"set_seconds","qualname":"<Date>::set_seconds","value":"fn (&self, seconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setSeconds()` method sets the seconds for a specified date according to local time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1925},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":108564,"byte_end":108572,"line_start":2261,"line_end":2261,"column_start":12,"column_end":20},"name":"set_time","qualname":"<Date>::set_time","value":"fn (&self, time: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setTime()` method sets the Date object to the time represented by a number of milliseconds\n since January 1, 1970, 00:00:00 UTC.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1928},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":108919,"byte_end":108931,"line_start":2268,"line_end":2268,"column_start":12,"column_end":24},"name":"set_utc_date","qualname":"<Date>::set_utc_date","value":"fn (&self, day: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCDate()` method sets the day of the month for a specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1931},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":109274,"byte_end":109291,"line_start":2274,"line_end":2274,"column_start":12,"column_end":29},"name":"set_utc_full_year","qualname":"<Date>::set_utc_full_year","value":"fn (&self, year: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCFullYear()` method sets the full year for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1934},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":109635,"byte_end":109663,"line_start":2280,"line_end":2280,"column_start":12,"column_end":40},"name":"set_utc_full_year_with_month","qualname":"<Date>::set_utc_full_year_with_month","value":"fn (&self, year: u32, month: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCFullYear()` method sets the full year for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1937},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":110019,"byte_end":110052,"line_start":2286,"line_end":2286,"column_start":12,"column_end":45},"name":"set_utc_full_year_with_month_date","qualname":"<Date>::set_utc_full_year_with_month_date","value":"fn (&self, year: u32, month: i32, date: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCFullYear()` method sets the full year for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1940},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":110553,"byte_end":110566,"line_start":2294,"line_end":2294,"column_start":12,"column_end":25},"name":"set_utc_hours","qualname":"<Date>::set_utc_hours","value":"fn (&self, hours: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCHours()` method sets the hour for a specified date according to universal time,\n and returns the number of milliseconds since  January 1, 1970 00:00:00 UTC until the time\n represented by the updated Date instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1943},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":110934,"byte_end":110954,"line_start":2301,"line_end":2301,"column_start":12,"column_end":32},"name":"set_utc_milliseconds","qualname":"<Date>::set_utc_milliseconds","value":"fn (&self, milliseconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCMilliseconds()` method sets the milliseconds for a specified date\n according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1946},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":111301,"byte_end":111316,"line_start":2307,"line_end":2307,"column_start":12,"column_end":27},"name":"set_utc_minutes","qualname":"<Date>::set_utc_minutes","value":"fn (&self, minutes: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCMinutes()` method sets the minutes for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1949},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":111650,"byte_end":111663,"line_start":2313,"line_end":2313,"column_start":12,"column_end":25},"name":"set_utc_month","qualname":"<Date>::set_utc_month","value":"fn (&self, month: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCMonth()` method sets the month for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1952},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":112003,"byte_end":112018,"line_start":2319,"line_end":2319,"column_start":12,"column_end":27},"name":"set_utc_seconds","qualname":"<Date>::set_utc_seconds","value":"fn (&self, seconds: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `setUTCSeconds()` method sets the seconds for a specified date according to universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1955},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":112384,"byte_end":112398,"line_start":2326,"line_end":2326,"column_start":12,"column_end":26},"name":"to_date_string","qualname":"<Date>::to_date_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toDateString()` method returns the date portion of a Date object\n in human readable form in American English.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1958},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":112929,"byte_end":112942,"line_start":2335,"line_end":2335,"column_start":12,"column_end":25},"name":"to_iso_string","qualname":"<Date>::to_iso_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toISOString()` method returns a string in simplified extended ISO format (ISO\n 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or\n ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset,\n as denoted by the suffix \"Z\"","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1961},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":113239,"byte_end":113246,"line_start":2341,"line_end":2341,"column_start":12,"column_end":19},"name":"to_json","qualname":"<Date>::to_json","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toJSON()` method returns a string representation of the Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1964},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":114005,"byte_end":114026,"line_start":2353,"line_end":2353,"column_start":12,"column_end":33},"name":"to_locale_date_string","qualname":"<Date>::to_locale_date_string","value":"fn (&self, locale: &str, options: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleDateString()` method returns a string with a language sensitive\n representation of the date portion of this date. The new locales and options\n arguments let applications specify the language whose formatting conventions\n should be used and allow to customize the behavior of the function.\n In older implementations, which ignore the locales and options arguments,\n the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":114777,"byte_end":114793,"line_start":2365,"line_end":2365,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Date>::to_locale_string","value":"fn (&self, locale: &str, options: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleString()` method returns a string with a language sensitive\n representation of this date. The new locales and options arguments\n let applications specify the language whose formatting conventions\n should be used and customize the behavior of the function.\n In older implementations, which ignore the locales\n and options arguments, the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1970},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":115568,"byte_end":115589,"line_start":2376,"line_end":2376,"column_start":12,"column_end":33},"name":"to_locale_time_string","qualname":"<Date>::to_locale_time_string","value":"fn (&self, locale: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleTimeString()` method returns a string with a language sensitive\n representation of the time portion of this date. The new locales and options\n arguments let applications specify the language whose formatting conventions should be\n used and customize the behavior of the function. In older implementations, which ignore\n the locales and options arguments, the locale used and the form of the string\n returned are entirely implementation dependent.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":115919,"byte_end":115928,"line_start":2383,"line_end":2383,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Date>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing\n the specified Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1976},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":116285,"byte_end":116299,"line_start":2390,"line_end":2390,"column_start":12,"column_end":26},"name":"to_time_string","qualname":"<Date>::to_time_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toTimeString()` method returns the time portion of a Date object in human\n readable form in American English.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1979},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":116621,"byte_end":116634,"line_start":2397,"line_end":2397,"column_start":12,"column_end":25},"name":"to_utc_string","qualname":"<Date>::to_utc_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toUTCString()` method converts a date to a string,\n using the UTC time zone.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1982},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117091,"byte_end":117094,"line_start":2406,"line_end":2406,"column_start":12,"column_end":15},"name":"utc","qualname":"<Date>::utc","value":"fn (year: f64, month: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `Date.UTC()` method accepts the same parameters as the\n longest form of the constructor, and returns the number of\n milliseconds in a `Date` object since January 1, 1970,\n 00:00:00, universal time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117402,"byte_end":117410,"line_start":2413,"line_end":2413,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Date>::value_of","value":"fn (&self) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method  returns the primitive value of\n a Date object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93802,"byte_end":93817,"line_start":1975,"line_end":1975,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2146},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117564,"byte_end":117570,"line_start":2421,"line_end":2421,"column_start":14,"column_end":20},"name":"Object","qualname":"::Object","value":"Object {  }","parent":null,"children":[{"krate":0,"index":2147}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2054},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117962,"byte_end":117968,"line_start":2429,"line_end":2429,"column_start":12,"column_end":18},"name":"assign","qualname":"<Object>::assign","value":"fn (target: &Object, source: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.assign()` method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2057},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":118422,"byte_end":118429,"line_start":2437,"line_end":2437,"column_start":12,"column_end":19},"name":"assign2","qualname":"<Object>::assign2","value":"fn (target: &Object, source1: &Object, source2: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.assign()` method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2060},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":118902,"byte_end":118909,"line_start":2445,"line_end":2445,"column_start":12,"column_end":19},"name":"assign3","qualname":"<Object>::assign3","value":"fn (target: &Object, source1: &Object, source2: &Object, source3: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.assign()` method is used to copy the values of all enumerable\n own properties from one or more source objects to a target object. It\n will return the target object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2063},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":119317,"byte_end":119328,"line_start":2453,"line_end":2453,"column_start":12,"column_end":23},"name":"constructor","qualname":"<Object>::constructor","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The constructor property returns a reference to the `Object` constructor\n function that created the instance object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2066},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":119689,"byte_end":119695,"line_start":2460,"line_end":2460,"column_start":12,"column_end":18},"name":"create","qualname":"<Object>::create","value":"fn (prototype: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.create()` method creates a new object, using an existing\n object to provide the newly created object's prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2069},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":120137,"byte_end":120152,"line_start":2468,"line_end":2468,"column_start":12,"column_end":27},"name":"define_property","qualname":"<Object>::define_property","value":"fn (obj: &Object, prop: &JsValue, descriptor: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The static method `Object.defineProperty()` defines a new\n property directly on an object, or modifies an existing\n property on an object, and returns the object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2072},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":120596,"byte_end":120613,"line_start":2476,"line_end":2476,"column_start":12,"column_end":29},"name":"define_properties","qualname":"<Object>::define_properties","value":"fn (obj: &Object, props: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.defineProperties()` method defines new or modifies\n existing properties directly on an object, returning the\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2075},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":121148,"byte_end":121155,"line_start":2486,"line_end":2486,"column_start":12,"column_end":19},"name":"entries","qualname":"<Object>::entries","value":"fn (object: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.entries()` method returns an array of a given\n object's own enumerable property [key, value] pairs, in the\n same order as that provided by a for...in loop (the difference\n being that a for-in loop enumerates properties in the\n prototype chain as well).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2078},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":121768,"byte_end":121774,"line_start":2496,"line_end":2496,"column_start":12,"column_end":18},"name":"freeze","qualname":"<Object>::freeze","value":"fn (value: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.freeze()` method freezes an object: that is, prevents new\n properties from being added to it; prevents existing properties from\n being removed; and prevents existing properties, or their enumerability,\n configurability, or writability, from being changed, it also prevents\n the prototype from being changed. The method returns the passed object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2081},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":122131,"byte_end":122143,"line_start":2503,"line_end":2503,"column_start":12,"column_end":24},"name":"from_entries","qualname":"<Object>::from_entries","value":"fn (iterable: &JsValue) -> Result<Object, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `Object.fromEntries()` method transforms a list of key-value pairs\n into an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2084},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":122670,"byte_end":122697,"line_start":2512,"line_end":2512,"column_start":12,"column_end":39},"name":"get_own_property_descriptor","qualname":"<Object>::get_own_property_descriptor","value":"fn (obj: &Object, prop: &JsValue) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getOwnPropertyDescriptor()` method returns a\n property descriptor for an own property (that is, one directly\n present on an object and not in the object's prototype chain)\n of a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2087},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":123107,"byte_end":123135,"line_start":2519,"line_end":2519,"column_start":12,"column_end":40},"name":"get_own_property_descriptors","qualname":"<Object>::get_own_property_descriptors","value":"fn (obj: &Object) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getOwnPropertyDescriptors()` method returns all own\n property descriptors of a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2090},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":123606,"byte_end":123628,"line_start":2527,"line_end":2527,"column_start":12,"column_end":34},"name":"get_own_property_names","qualname":"<Object>::get_own_property_names","value":"fn (obj: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getOwnPropertyNames()` method returns an array of\n all properties (including non-enumerable properties except for\n those which use Symbol) found directly upon a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2093},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":124030,"byte_end":124054,"line_start":2534,"line_end":2534,"column_start":12,"column_end":36},"name":"get_own_property_symbols","qualname":"<Object>::get_own_property_symbols","value":"fn (obj: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getOwnPropertySymbols()` method returns an array of\n all symbol properties found directly upon a given object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2096},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":124468,"byte_end":124484,"line_start":2542,"line_end":2542,"column_start":12,"column_end":28},"name":"get_prototype_of","qualname":"<Object>::get_prototype_of","value":"fn (obj: &JsValue) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.getPrototypeOf()` method returns the prototype\n (i.e. the value of the internal [[Prototype]] property) of the\n specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2099},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":124897,"byte_end":124913,"line_start":2550,"line_end":2550,"column_start":12,"column_end":28},"name":"has_own_property","qualname":"<Object>::has_own_property","value":"fn (&self, property: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `hasOwnProperty()` method returns a boolean indicating whether the\n object has the specified property as its own property (as opposed to\n inheriting it).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2102},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":125228,"byte_end":125230,"line_start":2556,"line_end":2556,"column_start":12,"column_end":14},"name":"is","qualname":"<Object>::is","value":"fn (value_1: &JsValue, value_2: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.is()` method determines whether two values are the same value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2105},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":125638,"byte_end":125651,"line_start":2563,"line_end":2563,"column_start":12,"column_end":25},"name":"is_extensible","qualname":"<Object>::is_extensible","value":"fn (object: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isExtensible()` method determines if an object is extensible\n (whether it can have new properties added to it).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2108},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":125958,"byte_end":125967,"line_start":2569,"line_end":2569,"column_start":12,"column_end":21},"name":"is_frozen","qualname":"<Object>::is_frozen","value":"fn (object: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isFrozen()` determines if an object is frozen.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2111},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":126281,"byte_end":126290,"line_start":2575,"line_end":2575,"column_start":12,"column_end":21},"name":"is_sealed","qualname":"<Object>::is_sealed","value":"fn (object: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `Object.isSealed()` method determines if an object is sealed.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2114},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":126630,"byte_end":126645,"line_start":2582,"line_end":2582,"column_start":12,"column_end":27},"name":"is_prototype_of","qualname":"<Object>::is_prototype_of","value":"fn (&self, value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `isPrototypeOf()` method checks if an object exists in another\n object's prototype chain.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2117},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":127020,"byte_end":127024,"line_start":2589,"line_end":2589,"column_start":12,"column_end":16},"name":"keys","qualname":"<Object>::keys","value":"fn (object: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.keys()` method returns an array of a given object's property\n names, in the same order as we get with a normal loop.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":127284,"byte_end":127287,"line_start":2595,"line_end":2595,"column_start":12,"column_end":15},"name":"new","qualname":"<Object>::new","value":"fn () -> Object","parent":null,"children":[],"decl_id":null,"docs":" The [`Object`] constructor creates an object wrapper.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2123},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":127704,"byte_end":127722,"line_start":2603,"line_end":2603,"column_start":12,"column_end":30},"name":"prevent_extensions","qualname":"<Object>::prevent_extensions","value":"fn (object: &Object) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `Object.preventExtensions()` method prevents new properties from\n ever being added to an object (i.e. prevents future extensions to the\n object).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2126},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":128086,"byte_end":128108,"line_start":2610,"line_end":2610,"column_start":12,"column_end":34},"name":"property_is_enumerable","qualname":"<Object>::property_is_enumerable","value":"fn (&self, property: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `propertyIsEnumerable()` method returns a Boolean indicating\n whether the specified property is enumerable.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2129},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":128605,"byte_end":128609,"line_start":2619,"line_end":2619,"column_start":12,"column_end":16},"name":"seal","qualname":"<Object>::seal","value":"fn (value: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.seal()` method seals an object, preventing new properties\n from being added to it and marking all existing properties as\n non-configurable.  Values of present properties can still be changed as\n long as they are writable.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2132},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":129039,"byte_end":129055,"line_start":2627,"line_end":2627,"column_start":12,"column_end":28},"name":"set_prototype_of","qualname":"<Object>::set_prototype_of","value":"fn (object: &Object, prototype: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Object.setPrototypeOf()` method sets the prototype (i.e., the\n internal `[[Prototype]]` property) of a specified object to another\n object or `null`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2135},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":129493,"byte_end":129509,"line_start":2635,"line_end":2635,"column_start":12,"column_end":28},"name":"to_locale_string","qualname":"<Object>::to_locale_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleString()` method returns a string representing the object.\n This method is meant to be overridden by derived objects for\n locale-specific purposes.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2138},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":129806,"byte_end":129815,"line_start":2641,"line_end":2641,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Object>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2141},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":130128,"byte_end":130136,"line_start":2648,"line_end":2648,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Object>::value_of","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of the\n specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2144},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":130636,"byte_end":130642,"line_start":2657,"line_end":2657,"column_start":12,"column_end":18},"name":"values","qualname":"<Object>::values","value":"fn (object: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Object.values()` method returns an array of a given object's own\n enumerable property values, in the same order as that provided by a\n `for...in` loop (the difference being that a for-in loop enumerates\n properties in the prototype chain as well).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":117446,"byte_end":117461,"line_start":2417,"line_end":2417,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":130891,"byte_end":130899,"line_start":2666,"line_end":2666,"column_start":12,"column_end":20},"name":"try_from","qualname":"<Object>::try_from","value":"fn (val: &JsValue) -> Option<&Object>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `Object` value of this JS value if it's an instance of an\n object.","sig":null,"attributes":[{"value":"/ Returns the `Object` value of this JS value if it's an instance of an","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":130691,"byte_end":130764,"line_start":2661,"line_end":2661,"column_start":5,"column_end":78}},{"value":"/ object.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":130769,"byte_end":130780,"line_start":2662,"line_end":2662,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":130785,"byte_end":130788,"line_start":2663,"line_end":2663,"column_start":5,"column_end":8}},{"value":"/ If this JS value is not an instance of an object then this returns","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":130793,"byte_end":130863,"line_start":2664,"line_end":2664,"column_start":5,"column_end":75}},{"value":"/ `None`.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":130868,"byte_end":130879,"line_start":2665,"line_end":2665,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2211},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":131360,"byte_end":131365,"line_start":2689,"line_end":2689,"column_start":14,"column_end":19},"name":"Proxy","qualname":"::Proxy","value":"Proxy {  }","parent":null,"children":[{"krate":0,"index":2212}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":131232,"byte_end":131247,"line_start":2685,"line_end":2685,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":131232,"byte_end":131247,"line_start":2685,"line_end":2685,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":131232,"byte_end":131247,"line_start":2685,"line_end":2685,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2206},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":131717,"byte_end":131720,"line_start":2697,"line_end":2697,"column_start":12,"column_end":15},"name":"new","qualname":"<Proxy>::new","value":"fn (target: &JsValue, handler: &Object) -> Proxy","parent":null,"children":[],"decl_id":null,"docs":" The [`Proxy`] object is used to define custom behavior for fundamental\n operations (e.g. property lookup, assignment, enumeration, function\n invocation, etc).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":131232,"byte_end":131247,"line_start":2685,"line_end":2685,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":131232,"byte_end":131247,"line_start":2685,"line_end":2685,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2209},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":132054,"byte_end":132063,"line_start":2704,"line_end":2704,"column_start":12,"column_end":21},"name":"revocable","qualname":"<Proxy>::revocable","value":"fn (target: &JsValue, handler: &Object) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Proxy.revocable()` method is used to create a revocable [`Proxy`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":131232,"byte_end":131247,"line_start":2685,"line_end":2685,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":131232,"byte_end":131247,"line_start":2685,"line_end":2685,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2285},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":132547,"byte_end":132557,"line_start":2716,"line_end":2716,"column_start":14,"column_end":24},"name":"RangeError","qualname":"::RangeError","value":"RangeError {  }","parent":null,"children":[{"krate":0,"index":2286}],"decl_id":null,"docs":" The `RangeError` object indicates an error when a value is not in the set\n or range of allowed values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":132128,"byte_end":132143,"line_start":2708,"line_end":2708,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":132128,"byte_end":132143,"line_start":2708,"line_end":2708,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":132128,"byte_end":132143,"line_start":2708,"line_end":2708,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2283},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":132851,"byte_end":132854,"line_start":2723,"line_end":2723,"column_start":12,"column_end":15},"name":"new","qualname":"<RangeError>::new","value":"fn (message: &str) -> RangeError","parent":null,"children":[],"decl_id":null,"docs":" The `RangeError` object indicates an error when a value is not in the set\n or range of allowed values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":132128,"byte_end":132143,"line_start":2708,"line_end":2708,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":132128,"byte_end":132143,"line_start":2708,"line_end":2708,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2366},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133323,"byte_end":133337,"line_start":2735,"line_end":2735,"column_start":14,"column_end":28},"name":"ReferenceError","qualname":"::ReferenceError","value":"ReferenceError {  }","parent":null,"children":[{"krate":0,"index":2367}],"decl_id":null,"docs":" The `ReferenceError` object represents an error when a non-existent\n variable is referenced.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":132906,"byte_end":132921,"line_start":2727,"line_end":2727,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":132906,"byte_end":132921,"line_start":2727,"line_end":2727,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":132906,"byte_end":132921,"line_start":2727,"line_end":2727,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2364},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133625,"byte_end":133628,"line_start":2742,"line_end":2742,"column_start":12,"column_end":15},"name":"new","qualname":"<ReferenceError>::new","value":"fn (message: &str) -> ReferenceError","parent":null,"children":[],"decl_id":null,"docs":" The `ReferenceError` object represents an error when a non-existent\n variable is referenced.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":132906,"byte_end":132921,"line_start":2727,"line_end":2727,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":132906,"byte_end":132921,"line_start":2727,"line_end":2727,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":91},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133699,"byte_end":133706,"line_start":2746,"line_end":2746,"column_start":9,"column_end":16},"name":"Reflect","qualname":"::Reflect","value":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":2379},{"krate":0,"index":2381},{"krate":0,"index":2383},{"krate":0,"index":2385},{"krate":0,"index":2387},{"krate":0,"index":2389},{"krate":0,"index":2391},{"krate":0,"index":2393},{"krate":0,"index":2395},{"krate":0,"index":2397},{"krate":0,"index":2399},{"krate":0,"index":2401},{"krate":0,"index":2403},{"krate":0,"index":2405},{"krate":0,"index":2407},{"krate":0,"index":2409},{"krate":0,"index":2411},{"krate":0,"index":2413},{"krate":0,"index":2415}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133666,"byte_end":133690,"line_start":2745,"line_end":2745,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":2379},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":134103,"byte_end":134108,"line_start":2757,"line_end":2757,"column_start":16,"column_end":21},"name":"apply","qualname":"::Reflect::apply","value":"fn (target: &Function, this_argument: &JsValue, arguments_list: &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.apply()` method calls a target function with\n arguments as specified.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2381},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":134708,"byte_end":134717,"line_start":2769,"line_end":2769,"column_start":16,"column_end":25},"name":"construct","qualname":"::Reflect::construct","value":"fn (target: &Function, arguments_list: &Array) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.construct()` method acts like the new operator, but\n as a function.  It is equivalent to calling `new target(...args)`. It\n gives also the added option to specify a different prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2383},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":135266,"byte_end":135291,"line_start":2777,"line_end":2777,"column_start":16,"column_end":41},"name":"construct_with_new_target","qualname":"::Reflect::construct_with_new_target","value":"fn (target: &Function, arguments_list: &Array, new_target: &Function) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.construct()` method acts like the new operator, but\n as a function.  It is equivalent to calling `new target(...args)`. It\n gives also the added option to specify a different prototype.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2385},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":135808,"byte_end":135823,"line_start":2788,"line_end":2788,"column_start":16,"column_end":31},"name":"define_property","qualname":"::Reflect::define_property","value":"fn (target: &Object, property_key: &JsValue, attributes: &Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.defineProperty()` method is like\n `Object.defineProperty()` but returns a `Boolean`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2387},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":136352,"byte_end":136367,"line_start":2799,"line_end":2799,"column_start":16,"column_end":31},"name":"delete_property","qualname":"::Reflect::delete_property","value":"fn (target: &Object, key: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.deleteProperty()` method allows to delete\n properties.  It is like the `delete` operator as a function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2389},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":136777,"byte_end":136780,"line_start":2806,"line_end":2806,"column_start":16,"column_end":19},"name":"get","qualname":"::Reflect::get","value":"fn (target: &JsValue, key: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.get()` method works like getting a property from\n an object (`target[propertyKey]`) as a function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2391},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":137042,"byte_end":137049,"line_start":2811,"line_end":2811,"column_start":16,"column_end":23},"name":"get_f64","qualname":"::Reflect::get_f64","value":"fn (target: &JsValue, key: f64) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`get`](fn.get.html)\n except the key is an `f64`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2393},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":137305,"byte_end":137312,"line_start":2816,"line_end":2816,"column_start":16,"column_end":23},"name":"get_u32","qualname":"::Reflect::get_u32","value":"fn (target: &JsValue, key: u32) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`get`](fn.get.html)\n except the key is a `u32`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2395},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":137884,"byte_end":137911,"line_start":2824,"line_end":2824,"column_start":16,"column_end":43},"name":"get_own_property_descriptor","qualname":"::Reflect::get_own_property_descriptor","value":"fn (target: &Object, property_key: &JsValue) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.getOwnPropertyDescriptor()` method is similar to\n `Object.getOwnPropertyDescriptor()`. It returns a property descriptor\n of the given property if it exists on the object, `undefined` otherwise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2397},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":138520,"byte_end":138536,"line_start":2836,"line_end":2836,"column_start":16,"column_end":32},"name":"get_prototype_of","qualname":"::Reflect::get_prototype_of","value":"fn (target: &JsValue) -> Result<Object, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.getPrototypeOf()` method is almost the same\n method as `Object.getPrototypeOf()`. It returns the prototype\n (i.e. the value of the internal `[[Prototype]]` property) of\n the specified object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2399},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":138892,"byte_end":138895,"line_start":2843,"line_end":2843,"column_start":16,"column_end":19},"name":"has","qualname":"::Reflect::has","value":"fn (target: &JsValue, property_key: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.has()` method works like the in operator as a\n function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2401},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":139442,"byte_end":139455,"line_start":2851,"line_end":2851,"column_start":16,"column_end":29},"name":"is_extensible","qualname":"::Reflect::is_extensible","value":"fn (target: &Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.isExtensible()` method determines if an object is\n extensible (whether it can have new properties added to it). It is\n similar to `Object.isExtensible()`, but with some differences.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2403},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":139852,"byte_end":139860,"line_start":2858,"line_end":2858,"column_start":16,"column_end":24},"name":"own_keys","qualname":"::Reflect::own_keys","value":"fn (target: &JsValue) -> Result<Array, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.ownKeys()` method returns an array of the\n target object's own property keys.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2405},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":140436,"byte_end":140454,"line_start":2867,"line_end":2867,"column_start":16,"column_end":34},"name":"prevent_extensions","qualname":"::Reflect::prevent_extensions","value":"fn (target: &Object) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.preventExtensions()` method prevents new\n properties from ever being added to an object (i.e. prevents\n future extensions to the object). It is similar to\n `Object.preventExtensions()`, but with some differences.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2407},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":140809,"byte_end":140812,"line_start":2874,"line_end":2874,"column_start":16,"column_end":19},"name":"set","qualname":"::Reflect::set","value":"fn (target: &JsValue, property_key: &JsValue, value: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.set()` method works like setting a\n property on an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2409},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":141144,"byte_end":141151,"line_start":2883,"line_end":2883,"column_start":16,"column_end":23},"name":"set_f64","qualname":"::Reflect::set_f64","value":"fn (target: &JsValue, property_key: f64, value: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`set`](fn.set.html)\n except the key is an `f64`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2411},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":141477,"byte_end":141484,"line_start":2892,"line_end":2892,"column_start":16,"column_end":23},"name":"set_u32","qualname":"::Reflect::set_u32","value":"fn (target: &JsValue, property_key: u32, value: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The same as [`set`](fn.set.html)\n except the key is a `u32`, which is slightly faster.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2413},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":141938,"byte_end":141955,"line_start":2903,"line_end":2903,"column_start":16,"column_end":33},"name":"set_with_receiver","qualname":"::Reflect::set_with_receiver","value":"fn (target: &JsValue, property_key: &JsValue, value: &JsValue, receiver: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.set()` method works like setting a\n property on an object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":2415},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142628,"byte_end":142644,"line_start":2917,"line_end":2917,"column_start":16,"column_end":32},"name":"set_prototype_of","qualname":"::Reflect::set_prototype_of","value":"fn (target: &Object, prototype: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `Reflect.setPrototypeOf()` method is the same\n method as `Object.setPrototypeOf()`. It sets the prototype\n (i.e., the internal `[[Prototype]]` property) of a specified\n object to another object or to null.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":133747,"byte_end":133762,"line_start":2750,"line_end":2750,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2560},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142879,"byte_end":142885,"line_start":2926,"line_end":2926,"column_start":14,"column_end":20},"name":"RegExp","qualname":"::RegExp","value":"RegExp {  }","parent":null,"children":[{"krate":0,"index":2561}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2477},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":143179,"byte_end":143183,"line_start":2933,"line_end":2933,"column_start":12,"column_end":16},"name":"exec","qualname":"<RegExp>::exec","value":"fn (&self, text: &str) -> Option<Array>","parent":null,"children":[],"decl_id":null,"docs":" The `exec()` method executes a search for a match in a specified\n string. Returns a result array, or null.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2480},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":143526,"byte_end":143531,"line_start":2940,"line_end":2940,"column_start":12,"column_end":17},"name":"flags","qualname":"<RegExp>::flags","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The flags property returns a string consisting of the flags of\n the current regular expression object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2483},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":143936,"byte_end":143942,"line_start":2948,"line_end":2948,"column_start":12,"column_end":18},"name":"global","qualname":"<RegExp>::global","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The global property indicates whether or not the \"g\" flag is\n used with the regular expression. global is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2486},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":144377,"byte_end":144388,"line_start":2956,"line_end":2956,"column_start":12,"column_end":23},"name":"ignore_case","qualname":"<RegExp>::ignore_case","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The ignoreCase property indicates whether or not the \"i\" flag\n is used with the regular expression. ignoreCase is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2489},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":144832,"byte_end":144837,"line_start":2965,"line_end":2965,"column_start":12,"column_end":17},"name":"input","qualname":"<RegExp>::input","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard input property is a static property of\n regular expressions that contains the string against which a\n regular expression is matched. RegExp.$_ is an alias for this\n property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2492},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":145214,"byte_end":145224,"line_start":2972,"line_end":2972,"column_start":12,"column_end":22},"name":"last_index","qualname":"<RegExp>::last_index","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The lastIndex is a read/write integer property of regular expression\n instances that specifies the index at which to start the next match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2495},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":145609,"byte_end":145623,"line_start":2979,"line_end":2979,"column_start":12,"column_end":26},"name":"set_last_index","qualname":"<RegExp>::set_last_index","value":"fn (&self, index: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The lastIndex is a read/write integer property of regular expression\n instances that specifies the index at which to start the next match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2498},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":146079,"byte_end":146089,"line_start":2987,"line_end":2987,"column_start":12,"column_end":22},"name":"last_match","qualname":"<RegExp>::last_match","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard lastMatch property is a static and read-only\n property of regular expressions that contains the last matched\n characters. `RegExp.$&` is an alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2501},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":146559,"byte_end":146569,"line_start":2996,"line_end":2996,"column_start":12,"column_end":22},"name":"last_paren","qualname":"<RegExp>::last_paren","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard lastParen property is a static and read-only\n property of regular expressions that contains the last\n parenthesized substring match, if any. `RegExp.$+` is an alias\n for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2504},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":147044,"byte_end":147056,"line_start":3005,"line_end":3005,"column_start":12,"column_end":24},"name":"left_context","qualname":"<RegExp>::left_context","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard leftContext property is a static and\n read-only property of regular expressions that contains the\n substring preceding the most recent match. `RegExp.$`` is an\n alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2507},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":147457,"byte_end":147466,"line_start":3013,"line_end":3013,"column_start":12,"column_end":21},"name":"multiline","qualname":"<RegExp>::multiline","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The multiline property indicates whether or not the \"m\" flag\n is used with the regular expression. multiline is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2510},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":147893,"byte_end":147895,"line_start":3021,"line_end":3021,"column_start":12,"column_end":14},"name":"n1","qualname":"<RegExp>::n1","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard $1, $2, $3, $4, $5, $6, $7, $8, $9 properties\n are static and read-only properties of regular expressions\n that contain parenthesized substring matches.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2513},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":147993,"byte_end":147995,"line_start":3023,"line_end":3023,"column_start":12,"column_end":14},"name":"n2","qualname":"<RegExp>::n2","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2516},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":148093,"byte_end":148095,"line_start":3025,"line_end":3025,"column_start":12,"column_end":14},"name":"n3","qualname":"<RegExp>::n3","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2519},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":148193,"byte_end":148195,"line_start":3027,"line_end":3027,"column_start":12,"column_end":14},"name":"n4","qualname":"<RegExp>::n4","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2522},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":148293,"byte_end":148295,"line_start":3029,"line_end":3029,"column_start":12,"column_end":14},"name":"n5","qualname":"<RegExp>::n5","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2525},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":148393,"byte_end":148395,"line_start":3031,"line_end":3031,"column_start":12,"column_end":14},"name":"n6","qualname":"<RegExp>::n6","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2528},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":148493,"byte_end":148495,"line_start":3033,"line_end":3033,"column_start":12,"column_end":14},"name":"n7","qualname":"<RegExp>::n7","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2531},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":148593,"byte_end":148595,"line_start":3035,"line_end":3035,"column_start":12,"column_end":14},"name":"n8","qualname":"<RegExp>::n8","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2534},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":148693,"byte_end":148695,"line_start":3037,"line_end":3037,"column_start":12,"column_end":14},"name":"n9","qualname":"<RegExp>::n9","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2537},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":148984,"byte_end":148987,"line_start":3043,"line_end":3043,"column_start":12,"column_end":15},"name":"new","qualname":"<RegExp>::new","value":"fn (pattern: &str, flags: &str) -> RegExp","parent":null,"children":[],"decl_id":null,"docs":" The `RegExp` constructor creates a regular expression object for matching text with a pattern.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2540},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":149071,"byte_end":149081,"line_start":3045,"line_end":3045,"column_start":12,"column_end":22},"name":"new_regexp","qualname":"<RegExp>::new_regexp","value":"fn (pattern: &RegExp, flags: &str) -> RegExp","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2543},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":149586,"byte_end":149599,"line_start":3054,"line_end":3054,"column_start":12,"column_end":25},"name":"right_context","qualname":"<RegExp>::right_context","value":"fn () -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The non-standard rightContext property is a static and\n read-only property of regular expressions that contains the\n substring following the most recent match. `RegExp.$'` is an\n alias for this property.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2546},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":149981,"byte_end":149987,"line_start":3062,"line_end":3062,"column_start":12,"column_end":18},"name":"source","qualname":"<RegExp>::source","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The source property returns a String containing the source\n text of the regexp object, and it doesn't contain the two\n forward slashes on both sides and any flags.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2549},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":150482,"byte_end":150488,"line_start":3072,"line_end":3072,"column_start":12,"column_end":18},"name":"sticky","qualname":"<RegExp>::sticky","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The sticky property reflects whether or not the search is\n sticky (searches in strings only from the index indicated by\n the lastIndex property of this regular expression). sticky is\n a read-only property of an individual regular expression\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2552},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":150833,"byte_end":150837,"line_start":3080,"line_end":3080,"column_start":12,"column_end":16},"name":"test","qualname":"<RegExp>::test","value":"fn (&self, text: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `test()` method executes a search for a match between a\n regular expression and a specified string. Returns true or\n false.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2555},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151162,"byte_end":151171,"line_start":3087,"line_end":3087,"column_start":12,"column_end":21},"name":"to_string","qualname":"<RegExp>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the\n regular expression.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2558},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151577,"byte_end":151584,"line_start":3095,"line_end":3095,"column_start":12,"column_end":19},"name":"unicode","qualname":"<RegExp>::unicode","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The unicode property indicates whether or not the \"u\" flag is\n used with a regular expression. unicode is a read-only\n property of an individual regular expression instance.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":142728,"byte_end":142743,"line_start":2922,"line_end":2922,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2653},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151772,"byte_end":151775,"line_start":3103,"line_end":3103,"column_start":14,"column_end":17},"name":"Set","qualname":"::Set","value":"Set {  }","parent":null,"children":[{"krate":0,"index":2654}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2633},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":152055,"byte_end":152058,"line_start":3110,"line_end":3110,"column_start":12,"column_end":15},"name":"add","qualname":"<Set>::add","value":"fn (&self, value: &JsValue) -> Set","parent":null,"children":[],"decl_id":null,"docs":" The `add()` method appends a new element with a specified value to the\n end of a [`Set`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2636},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":152337,"byte_end":152342,"line_start":3116,"line_end":3116,"column_start":12,"column_end":17},"name":"clear","qualname":"<Set>::clear","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `clear()` method removes all elements from a [`Set`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2639},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":152616,"byte_end":152622,"line_start":3123,"line_end":3123,"column_start":12,"column_end":18},"name":"delete","qualname":"<Set>::delete","value":"fn (&self, value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a [`Set`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2642},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":152977,"byte_end":152985,"line_start":3130,"line_end":3130,"column_start":12,"column_end":20},"name":"for_each","qualname":"<Set>::for_each","value":"fn (&self, callback: &mut dyn FnMut(JsValue, JsValue, Set)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once for each value\n in the Set object, in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":153357,"byte_end":153360,"line_start":3137,"line_end":3137,"column_start":12,"column_end":15},"name":"has","qualname":"<Set>::has","value":"fn (&self, value: &JsValue) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an element with\n the specified value exists in a [`Set`] object or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":153690,"byte_end":153693,"line_start":3144,"line_end":3144,"column_start":12,"column_end":15},"name":"new","qualname":"<Set>::new","value":"fn (init: &JsValue) -> Set","parent":null,"children":[],"decl_id":null,"docs":" The [`Set`] object lets you store unique values of any type, whether\n primitive values or object references.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2651},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":153997,"byte_end":154001,"line_start":3151,"line_end":3151,"column_start":12,"column_end":16},"name":"size","qualname":"<Set>::size","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The size accessor property returns the number of elements in a [`Set`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":151619,"byte_end":151634,"line_start":3099,"line_end":3099,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2667},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":154636,"byte_end":154643,"line_start":3165,"line_end":3165,"column_start":12,"column_end":19},"name":"entries","qualname":"<Set>::entries","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `entries()` method returns a new Iterator object that contains an\n array of [value, value] for each element in the Set object, in insertion\n order. For Set objects there is no key like in Map objects. However, to\n keep the API similar to the Map object, each entry has the same value\n for its key and value here, so that an array [value, value] is returned.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":154040,"byte_end":154055,"line_start":3155,"line_end":3155,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":154040,"byte_end":154055,"line_start":3155,"line_end":3155,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2670},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":155008,"byte_end":155012,"line_start":3173,"line_end":3173,"column_start":12,"column_end":16},"name":"keys","qualname":"<Set>::keys","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `keys()` method is an alias for this method (for similarity with\n Map objects); it behaves exactly the same and returns values\n of Set elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":154040,"byte_end":154055,"line_start":3155,"line_end":3155,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":154040,"byte_end":154055,"line_start":3155,"line_end":3155,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2673},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":155354,"byte_end":155360,"line_start":3180,"line_end":3180,"column_start":12,"column_end":18},"name":"values","qualname":"<Set>::values","value":"fn (&self) -> Iterator","parent":null,"children":[],"decl_id":null,"docs":" The `values()` method returns a new Iterator object that contains the\n values for each element in the Set object in insertion order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":154040,"byte_end":154055,"line_start":3155,"line_end":3155,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":154040,"byte_end":154055,"line_start":3155,"line_end":3155,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2743},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":155887,"byte_end":155898,"line_start":3193,"line_end":3193,"column_start":14,"column_end":25},"name":"SyntaxError","qualname":"::SyntaxError","value":"SyntaxError {  }","parent":null,"children":[{"krate":0,"index":2744}],"decl_id":null,"docs":" A `SyntaxError` is thrown when the JavaScript engine encounters tokens or\n token order that does not conform to the syntax of the language when\n parsing code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":155403,"byte_end":155418,"line_start":3184,"line_end":3184,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":155403,"byte_end":155418,"line_start":3184,"line_end":3184,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":155403,"byte_end":155418,"line_start":3184,"line_end":3184,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2741},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":156256,"byte_end":156259,"line_start":3201,"line_end":3201,"column_start":12,"column_end":15},"name":"new","qualname":"<SyntaxError>::new","value":"fn (message: &str) -> SyntaxError","parent":null,"children":[],"decl_id":null,"docs":" A `SyntaxError` is thrown when the JavaScript engine encounters tokens or\n token order that does not conform to the syntax of the language when\n parsing code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":155403,"byte_end":155418,"line_start":3184,"line_end":3184,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":155403,"byte_end":155418,"line_start":3184,"line_end":3184,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2824},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":156707,"byte_end":156716,"line_start":3213,"line_end":3213,"column_start":14,"column_end":23},"name":"TypeError","qualname":"::TypeError","value":"TypeError {  }","parent":null,"children":[{"krate":0,"index":2825}],"decl_id":null,"docs":" The `TypeError` object represents an error when a value is not of the\n expected type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":156307,"byte_end":156322,"line_start":3205,"line_end":3205,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":156307,"byte_end":156322,"line_start":3205,"line_end":3205,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":156307,"byte_end":156322,"line_start":3205,"line_end":3205,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2822},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":156992,"byte_end":156995,"line_start":3220,"line_end":3220,"column_start":12,"column_end":15},"name":"new","qualname":"<TypeError>::new","value":"fn (message: &str) -> TypeError","parent":null,"children":[],"decl_id":null,"docs":" The `TypeError` object represents an error when a value is not of the\n expected type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":156307,"byte_end":156322,"line_start":3205,"line_end":3205,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":156307,"byte_end":156322,"line_start":3205,"line_end":3205,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2905},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157476,"byte_end":157484,"line_start":3232,"line_end":3232,"column_start":14,"column_end":22},"name":"UriError","qualname":"::UriError","value":"UriError {  }","parent":null,"children":[{"krate":0,"index":2906}],"decl_id":null,"docs":" The `URIError` object represents an error when a global URI handling\n function was used in a wrong way.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157040,"byte_end":157055,"line_start":3224,"line_end":3224,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157040,"byte_end":157055,"line_start":3224,"line_end":3224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157040,"byte_end":157055,"line_start":3224,"line_end":3224,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2903},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157800,"byte_end":157803,"line_start":3239,"line_end":3239,"column_start":12,"column_end":15},"name":"new","qualname":"<UriError>::new","value":"fn (message: &str) -> UriError","parent":null,"children":[],"decl_id":null,"docs":" The `URIError` object represents an error when a global URI handling\n function was used in a wrong way.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157040,"byte_end":157055,"line_start":3224,"line_end":3224,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157040,"byte_end":157055,"line_start":3224,"line_end":3224,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2992},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":158011,"byte_end":158018,"line_start":3247,"line_end":3247,"column_start":14,"column_end":21},"name":"WeakMap","qualname":"::WeakMap","value":"WeakMap {  }","parent":null,"children":[{"krate":0,"index":2993}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157846,"byte_end":157861,"line_start":3243,"line_end":3243,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157846,"byte_end":157861,"line_start":3243,"line_end":3243,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157846,"byte_end":157861,"line_start":3243,"line_end":3243,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2978},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":158380,"byte_end":158383,"line_start":3255,"line_end":3255,"column_start":12,"column_end":15},"name":"new","qualname":"<WeakMap>::new","value":"fn () -> WeakMap","parent":null,"children":[],"decl_id":null,"docs":" The [`WeakMap`] object is a collection of key/value pairs in which the\n keys are weakly referenced.  The keys must be objects and the values can\n be arbitrary values.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157846,"byte_end":157861,"line_start":3243,"line_end":3243,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157846,"byte_end":157861,"line_start":3243,"line_end":3243,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2981},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":158711,"byte_end":158714,"line_start":3262,"line_end":3262,"column_start":12,"column_end":15},"name":"set","qualname":"<WeakMap>::set","value":"fn (&self, key: &Object, value: &JsValue) -> WeakMap","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method sets the value for the key in the [`WeakMap`] object.\n Returns the [`WeakMap`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157846,"byte_end":157861,"line_start":3243,"line_end":3243,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157846,"byte_end":157861,"line_start":3243,"line_end":3243,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2984},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159041,"byte_end":159044,"line_start":3269,"line_end":3269,"column_start":12,"column_end":15},"name":"get","qualname":"<WeakMap>::get","value":"fn (&self, key: &Object) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `get()` method returns a specified by key element\n from a [`WeakMap`] object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157846,"byte_end":157861,"line_start":3243,"line_end":3243,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157846,"byte_end":157861,"line_start":3243,"line_end":3243,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2987},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159404,"byte_end":159407,"line_start":3276,"line_end":3276,"column_start":12,"column_end":15},"name":"has","qualname":"<WeakMap>::has","value":"fn (&self, key: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an element with\n the specified key exists in the [`WeakMap`] object or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157846,"byte_end":157861,"line_start":3243,"line_end":3243,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157846,"byte_end":157861,"line_start":3243,"line_end":3243,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2990},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159715,"byte_end":159721,"line_start":3283,"line_end":3283,"column_start":12,"column_end":18},"name":"delete","qualname":"<WeakMap>::delete","value":"fn (&self, key: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a [`WeakMap`]\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157846,"byte_end":157861,"line_start":3243,"line_end":3243,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":157846,"byte_end":157861,"line_start":3243,"line_end":3243,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":3076},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159935,"byte_end":159942,"line_start":3291,"line_end":3291,"column_start":14,"column_end":21},"name":"WeakSet","qualname":"::WeakSet","value":"WeakSet {  }","parent":null,"children":[{"krate":0,"index":3077}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159775,"byte_end":159790,"line_start":3287,"line_end":3287,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159775,"byte_end":159790,"line_start":3287,"line_end":3287,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159775,"byte_end":159790,"line_start":3287,"line_end":3287,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3065},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":160196,"byte_end":160199,"line_start":3297,"line_end":3297,"column_start":12,"column_end":15},"name":"new","qualname":"<WeakSet>::new","value":"fn () -> WeakSet","parent":null,"children":[],"decl_id":null,"docs":" The `WeakSet` object lets you store weakly held objects in a collection.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159775,"byte_end":159790,"line_start":3287,"line_end":3287,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159775,"byte_end":159790,"line_start":3287,"line_end":3287,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3068},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":160494,"byte_end":160497,"line_start":3304,"line_end":3304,"column_start":12,"column_end":15},"name":"has","qualname":"<WeakSet>::has","value":"fn (&self, value: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `has()` method returns a boolean indicating whether an object exists\n in a WeakSet or not.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159775,"byte_end":159790,"line_start":3287,"line_end":3287,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159775,"byte_end":159790,"line_start":3287,"line_end":3287,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3071},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":160789,"byte_end":160792,"line_start":3310,"line_end":3310,"column_start":12,"column_end":15},"name":"add","qualname":"<WeakSet>::add","value":"fn (&self, value: &Object) -> WeakSet","parent":null,"children":[],"decl_id":null,"docs":" The `add()` method appends a new object to the end of a WeakSet object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159775,"byte_end":159790,"line_start":3287,"line_end":3287,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159775,"byte_end":159790,"line_start":3287,"line_end":3287,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3074},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":161101,"byte_end":161107,"line_start":3317,"line_end":3317,"column_start":12,"column_end":18},"name":"delete","qualname":"<WeakSet>::delete","value":"fn (&self, value: &Object) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `delete()` method removes the specified element from a WeakSet\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159775,"byte_end":159790,"line_start":3287,"line_end":3287,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":159775,"byte_end":159790,"line_start":3287,"line_end":3287,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":93},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":161185,"byte_end":161196,"line_start":3321,"line_end":3321,"column_start":9,"column_end":20},"name":"WebAssembly","qualname":"::WebAssembly","value":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":3089},{"krate":0,"index":3091},{"krate":0,"index":3093},{"krate":0,"index":3095},{"krate":0,"index":3097},{"krate":0,"index":3161},{"krate":0,"index":3172},{"krate":0,"index":3170},{"krate":0,"index":3166},{"krate":0,"index":3167},{"krate":0,"index":3163},{"krate":0,"index":3164},{"krate":0,"index":3099},{"krate":0,"index":3152},{"krate":0,"index":3155},{"krate":0,"index":3158},{"krate":0,"index":3239},{"krate":0,"index":3250},{"krate":0,"index":3248},{"krate":0,"index":3244},{"krate":0,"index":3245},{"krate":0,"index":3241},{"krate":0,"index":3242},{"krate":0,"index":3174},{"krate":0,"index":3227},{"krate":0,"index":3230},{"krate":0,"index":3233},{"krate":0,"index":3236},{"krate":0,"index":3314},{"krate":0,"index":3325},{"krate":0,"index":3323},{"krate":0,"index":3319},{"krate":0,"index":3320},{"krate":0,"index":3316},{"krate":0,"index":3317},{"krate":0,"index":3252},{"krate":0,"index":3305},{"krate":0,"index":3308},{"krate":0,"index":3311},{"krate":0,"index":3389},{"krate":0,"index":3400},{"krate":0,"index":3398},{"krate":0,"index":3394},{"krate":0,"index":3395},{"krate":0,"index":3391},{"krate":0,"index":3392},{"krate":0,"index":3327},{"krate":0,"index":3380},{"krate":0,"index":3383},{"krate":0,"index":3386},{"krate":0,"index":3473},{"krate":0,"index":3484},{"krate":0,"index":3482},{"krate":0,"index":3478},{"krate":0,"index":3479},{"krate":0,"index":3475},{"krate":0,"index":3476},{"krate":0,"index":3402},{"krate":0,"index":3455},{"krate":0,"index":3458},{"krate":0,"index":3461},{"krate":0,"index":3464},{"krate":0,"index":3467},{"krate":0,"index":3470},{"krate":0,"index":3560},{"krate":0,"index":3571},{"krate":0,"index":3569},{"krate":0,"index":3565},{"krate":0,"index":3566},{"krate":0,"index":3562},{"krate":0,"index":3563},{"krate":0,"index":3486},{"krate":0,"index":3539},{"krate":0,"index":3542},{"krate":0,"index":3545},{"krate":0,"index":3548},{"krate":0,"index":3551},{"krate":0,"index":3554},{"krate":0,"index":3557},{"krate":0,"index":3641},{"krate":0,"index":3652},{"krate":0,"index":3650},{"krate":0,"index":3646},{"krate":0,"index":3647},{"krate":0,"index":3643},{"krate":0,"index":3644},{"krate":0,"index":3573},{"krate":0,"index":3626},{"krate":0,"index":3629},{"krate":0,"index":3632},{"krate":0,"index":3635},{"krate":0,"index":3638}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":161152,"byte_end":161176,"line_start":3320,"line_end":3320,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":3089},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":161800,"byte_end":161807,"line_start":3334,"line_end":3334,"column_start":16,"column_end":23},"name":"compile","qualname":"::WebAssembly::compile","value":"fn (buffer_source: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.compile()` function compiles a `WebAssembly.Module`\n from WebAssembly binary code.  This function is useful if it is\n necessary to a compile a module before it can be instantiated\n (otherwise, the `WebAssembly.instantiate()` function should be used).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":161241,"byte_end":161256,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":161241,"byte_end":161256,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3091},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":162207,"byte_end":162225,"line_start":3341,"line_end":3341,"column_start":16,"column_end":34},"name":"instantiate_buffer","qualname":"::WebAssembly::instantiate_buffer","value":"fn (buffer: &[u8], imports: &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiate()` function allows you to compile and\n instantiate WebAssembly code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":161241,"byte_end":161256,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":161241,"byte_end":161256,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3093},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":162633,"byte_end":162651,"line_start":3348,"line_end":3348,"column_start":16,"column_end":34},"name":"instantiate_module","qualname":"::WebAssembly::instantiate_module","value":"fn (module: &Module, imports: &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiate()` function allows you to compile and\n instantiate WebAssembly code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":161241,"byte_end":161256,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":161241,"byte_end":161256,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3095},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":163208,"byte_end":163229,"line_start":3357,"line_end":3357,"column_start":16,"column_end":37},"name":"instantiate_streaming","qualname":"::WebAssembly::instantiate_streaming","value":"fn (response: &Promise, imports: &Object) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.instantiateStreaming()` function compiles and\n instantiates a WebAssembly module directly from a streamed\n underlying source. This is the most efficient, optimized way to load\n wasm code.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":161241,"byte_end":161256,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":161241,"byte_end":161256,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3097},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":163714,"byte_end":163722,"line_start":3365,"line_end":3365,"column_start":16,"column_end":24},"name":"validate","qualname":"::WebAssembly::validate","value":"fn (buffer_source: &JsValue) -> Result<bool, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.validate()` function validates a given typed\n array of WebAssembly binary code, returning whether the bytes\n form a valid wasm module (`true`) or not (`false`).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":161241,"byte_end":161256,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":161241,"byte_end":161256,"line_start":3325,"line_end":3325,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3161},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":164378,"byte_end":164390,"line_start":3378,"line_end":3378,"column_start":18,"column_end":30},"name":"CompileError","qualname":"::WebAssembly::CompileError","value":"CompileError {  }","parent":null,"children":[{"krate":0,"index":3162}],"decl_id":null,"docs":" The `WebAssembly.CompileError()` constructor creates a new\n WebAssembly `CompileError` object, which indicates an error during\n WebAssembly decoding or validation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":163817,"byte_end":163832,"line_start":3369,"line_end":3369,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":163817,"byte_end":163832,"line_start":3369,"line_end":3369,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":163817,"byte_end":163832,"line_start":3369,"line_end":3369,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3159},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":164822,"byte_end":164825,"line_start":3386,"line_end":3386,"column_start":16,"column_end":19},"name":"new","qualname":"<CompileError>::new","value":"fn (message: &str) -> CompileError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.CompileError()` constructor creates a new\n WebAssembly `CompileError` object, which indicates an error during\n WebAssembly decoding or validation.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":163817,"byte_end":163832,"line_start":3369,"line_end":3369,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":163817,"byte_end":163832,"line_start":3369,"line_end":3369,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3239},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":165517,"byte_end":165525,"line_start":3400,"line_end":3400,"column_start":18,"column_end":26},"name":"Instance","qualname":"::WebAssembly::Instance","value":"Instance {  }","parent":null,"children":[{"krate":0,"index":3240}],"decl_id":null,"docs":" A `WebAssembly.Instance` object is a stateful, executable instance\n of a `WebAssembly.Module`. Instance objects contain all the exported\n WebAssembly functions that allow calling into WebAssembly code from\n JavaScript.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":164897,"byte_end":164912,"line_start":3390,"line_end":3390,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":164897,"byte_end":164912,"line_start":3390,"line_end":3390,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":164897,"byte_end":164912,"line_start":3390,"line_end":3390,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3234},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":166061,"byte_end":166064,"line_start":3409,"line_end":3409,"column_start":16,"column_end":19},"name":"new","qualname":"<Instance>::new","value":"fn (module: &Module, imports: &Object) -> Result<Instance, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Instance()` constructor function can be called to\n synchronously instantiate a given `WebAssembly.Module`\n object. However, the primary way to get an `Instance` is through the\n asynchronous `WebAssembly.instantiateStreaming()` function.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":164897,"byte_end":164912,"line_start":3390,"line_end":3390,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":164897,"byte_end":164912,"line_start":3390,"line_end":3390,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3237},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":166658,"byte_end":166665,"line_start":3418,"line_end":3418,"column_start":16,"column_end":23},"name":"exports","qualname":"<Instance>::exports","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `exports` readonly property of the `WebAssembly.Instance` object\n prototype returns an object containing as its members all the\n functions exported from the WebAssembly module instance, to allow\n them to be accessed and used by JavaScript.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":164897,"byte_end":164912,"line_start":3390,"line_end":3390,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":164897,"byte_end":164912,"line_start":3390,"line_end":3390,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3314},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":167307,"byte_end":167316,"line_start":3431,"line_end":3431,"column_start":18,"column_end":27},"name":"LinkError","qualname":"::WebAssembly::LinkError","value":"LinkError {  }","parent":null,"children":[{"krate":0,"index":3315}],"decl_id":null,"docs":" The `WebAssembly.LinkError()` constructor creates a new WebAssembly\n LinkError object, which indicates an error during module\n instantiation (besides traps from the start function).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":166734,"byte_end":166749,"line_start":3422,"line_end":3422,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":166734,"byte_end":166749,"line_start":3422,"line_end":3422,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":166734,"byte_end":166749,"line_start":3422,"line_end":3422,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3312},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":167763,"byte_end":167766,"line_start":3439,"line_end":3439,"column_start":16,"column_end":19},"name":"new","qualname":"<LinkError>::new","value":"fn (message: &str) -> LinkError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.LinkError()` constructor creates a new WebAssembly\n LinkError object, which indicates an error during module\n instantiation (besides traps from the start function).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":166734,"byte_end":166749,"line_start":3422,"line_end":3422,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":166734,"byte_end":166749,"line_start":3422,"line_end":3422,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3389},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":168398,"byte_end":168410,"line_start":3452,"line_end":3452,"column_start":18,"column_end":30},"name":"RuntimeError","qualname":"::WebAssembly::RuntimeError","value":"RuntimeError {  }","parent":null,"children":[{"krate":0,"index":3390}],"decl_id":null,"docs":" The `WebAssembly.RuntimeError()` constructor creates a new WebAssembly\n `RuntimeError` object — the type that is thrown whenever WebAssembly\n specifies a trap.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":167839,"byte_end":167854,"line_start":3443,"line_end":3443,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":167839,"byte_end":167854,"line_start":3443,"line_end":3443,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":167839,"byte_end":167854,"line_start":3443,"line_end":3443,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3387},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":168840,"byte_end":168843,"line_start":3460,"line_end":3460,"column_start":16,"column_end":19},"name":"new","qualname":"<RuntimeError>::new","value":"fn (message: &str) -> RuntimeError","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.RuntimeError()` constructor creates a new WebAssembly\n `RuntimeError` object — the type that is thrown whenever WebAssembly\n specifies a trap.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":167839,"byte_end":167854,"line_start":3443,"line_end":3443,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":167839,"byte_end":167854,"line_start":3443,"line_end":3443,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3473},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":169490,"byte_end":169496,"line_start":3473,"line_end":3473,"column_start":18,"column_end":24},"name":"Module","qualname":"::WebAssembly::Module","value":"Module {  }","parent":null,"children":[{"krate":0,"index":3474}],"decl_id":null,"docs":" A `WebAssembly.Module` object contains stateless WebAssembly code\n that has already been compiled by the browser and can be\n efficiently shared with Workers, and instantiated multiple times.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":168913,"byte_end":168928,"line_start":3464,"line_end":3464,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":168913,"byte_end":168928,"line_start":3464,"line_end":3464,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":168913,"byte_end":168928,"line_start":3464,"line_end":3464,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3462},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":169956,"byte_end":169959,"line_start":3481,"line_end":3481,"column_start":16,"column_end":19},"name":"new","qualname":"<Module>::new","value":"fn (buffer_source: &JsValue) -> Result<Module, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" A `WebAssembly.Module` object contains stateless WebAssembly code\n that has already been compiled by the browser and can be\n efficiently shared with Workers, and instantiated multiple times.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":168913,"byte_end":168928,"line_start":3464,"line_end":3464,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":168913,"byte_end":168928,"line_start":3464,"line_end":3464,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3465},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":170476,"byte_end":170491,"line_start":3489,"line_end":3489,"column_start":16,"column_end":31},"name":"custom_sections","qualname":"<Module>::custom_sections","value":"fn (module: &Module, sectionName: &str) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.customSections()` function returns a copy of the\n contents of all custom sections in the given module with the given\n string name.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":168913,"byte_end":168928,"line_start":3464,"line_end":3464,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":168913,"byte_end":168928,"line_start":3464,"line_end":3464,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3468},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":170939,"byte_end":170946,"line_start":3496,"line_end":3496,"column_start":16,"column_end":23},"name":"exports","qualname":"<Module>::exports","value":"fn (module: &Module) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.exports()` function returns an array containing\n descriptions of all the declared exports of the given `Module`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":168913,"byte_end":168928,"line_start":3464,"line_end":3464,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":168913,"byte_end":168928,"line_start":3464,"line_end":3464,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3471},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171375,"byte_end":171382,"line_start":3503,"line_end":3503,"column_start":16,"column_end":23},"name":"imports","qualname":"<Module>::imports","value":"fn (module: &Module) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.imports()` function returns an array containing\n descriptions of all the declared imports of the given `Module`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":168913,"byte_end":168928,"line_start":3464,"line_end":3464,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":168913,"byte_end":168928,"line_start":3464,"line_end":3464,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3560},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171923,"byte_end":171928,"line_start":3515,"line_end":3515,"column_start":18,"column_end":23},"name":"Table","qualname":"::WebAssembly::Table","value":"Table {  }","parent":null,"children":[{"krate":0,"index":3561}],"decl_id":null,"docs":" The `WebAssembly.Table()` constructor creates a new `Table` object\n of the given size and element type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171446,"byte_end":171461,"line_start":3507,"line_end":3507,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171446,"byte_end":171461,"line_start":3507,"line_end":3507,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171446,"byte_end":171461,"line_start":3507,"line_end":3507,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3546},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":172289,"byte_end":172292,"line_start":3522,"line_end":3522,"column_start":16,"column_end":19},"name":"new","qualname":"<Table>::new","value":"fn (table_descriptor: &Object) -> Result<Table, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Table()` constructor creates a new `Table` object\n of the given size and element type.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171446,"byte_end":171461,"line_start":3507,"line_end":3507,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171446,"byte_end":171461,"line_start":3507,"line_end":3507,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3549},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":172757,"byte_end":172763,"line_start":3530,"line_end":3530,"column_start":16,"column_end":22},"name":"length","qualname":"<Table>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length prototype property of the `WebAssembly.Table` object\n returns the length of the table, i.e. the number of elements in the\n table.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171446,"byte_end":171461,"line_start":3507,"line_end":3507,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171446,"byte_end":171461,"line_start":3507,"line_end":3507,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3552},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":173162,"byte_end":173165,"line_start":3537,"line_end":3537,"column_start":16,"column_end":19},"name":"get","qualname":"<Table>::get","value":"fn (&self, index: u32) -> Result<Function, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `get()` prototype method of the `WebAssembly.Table()` object\n retrieves a function reference stored at a given index.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171446,"byte_end":171461,"line_start":3507,"line_end":3507,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171446,"byte_end":171461,"line_start":3507,"line_end":3507,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3555},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":173632,"byte_end":173636,"line_start":3545,"line_end":3545,"column_start":16,"column_end":20},"name":"grow","qualname":"<Table>::grow","value":"fn (&self, additional_capacity: u32) -> Result<u32, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `grow()` prototype method of the `WebAssembly.Table` object\n increases the size of the `Table` instance by a specified number of\n elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171446,"byte_end":171461,"line_start":3507,"line_end":3507,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171446,"byte_end":171461,"line_start":3507,"line_end":3507,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3558},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":174086,"byte_end":174089,"line_start":3552,"line_end":3552,"column_start":16,"column_end":19},"name":"set","qualname":"<Table>::set","value":"fn (&self, index: u32, function: &Function) -> Result<(), JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `set()` prototype method of the `WebAssembly.Table` object mutates a\n reference stored at a given index to a different value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171446,"byte_end":171461,"line_start":3507,"line_end":3507,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":171446,"byte_end":171461,"line_start":3507,"line_end":3507,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3641},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":174538,"byte_end":174544,"line_start":3561,"line_end":3561,"column_start":18,"column_end":24},"name":"Memory","qualname":"::WebAssembly::Memory","value":"Memory {  }","parent":null,"children":[{"krate":0,"index":3642}],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":174198,"byte_end":174213,"line_start":3556,"line_end":3556,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":174198,"byte_end":174213,"line_start":3556,"line_end":3556,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":174198,"byte_end":174213,"line_start":3556,"line_end":3556,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3633},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":175151,"byte_end":175154,"line_start":3572,"line_end":3572,"column_start":16,"column_end":19},"name":"new","qualname":"<Memory>::new","value":"fn (descriptor: &Object) -> Result<Memory, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `WebAssembly.Memory()` constructor creates a new `Memory` object\n which is a resizable `ArrayBuffer` that holds the raw bytes of\n memory accessed by a WebAssembly `Instance`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":174198,"byte_end":174213,"line_start":3556,"line_end":3556,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":174198,"byte_end":174213,"line_start":3556,"line_end":3556,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3636},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":175534,"byte_end":175540,"line_start":3579,"line_end":3579,"column_start":16,"column_end":22},"name":"buffer","qualname":"<Memory>::buffer","value":"fn (&self) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" An accessor property that returns the buffer contained in the\n memory.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":174198,"byte_end":174213,"line_start":3556,"line_end":3556,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":174198,"byte_end":174213,"line_start":3556,"line_end":3556,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":3639},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176105,"byte_end":176109,"line_start":3590,"line_end":3590,"column_start":16,"column_end":20},"name":"grow","qualname":"<Memory>::grow","value":"fn (&self, pages: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The `grow()` protoype method of the `Memory` object increases the\n size of the memory instance by a specified number of WebAssembly\n pages.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":174198,"byte_end":174213,"line_start":3556,"line_end":3556,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":174198,"byte_end":174213,"line_start":3556,"line_end":3556,"column_start":5,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":95},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176461,"byte_end":176465,"line_start":3599,"line_end":3599,"column_start":9,"column_end":13},"name":"JSON","qualname":"::JSON","value":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":3654},{"krate":0,"index":3656},{"krate":0,"index":3658},{"krate":0,"index":3660}],"decl_id":null,"docs":" The `JSON` object contains methods for parsing [JavaScript Object\n Notation (JSON)](https://json.org/) and converting values to JSON. It\n can't be called or constructed, and aside from its two method\n properties, it has no interesting functionality of its own.\n","sig":null,"attributes":[{"value":"/ The `JSON` object contains methods for parsing [JavaScript Object","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176154,"byte_end":176223,"line_start":3594,"line_end":3594,"column_start":1,"column_end":70}},{"value":"/ Notation (JSON)](https://json.org/) and converting values to JSON. It","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176224,"byte_end":176297,"line_start":3595,"line_end":3595,"column_start":1,"column_end":74}},{"value":"/ can't be called or constructed, and aside from its two method","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176298,"byte_end":176363,"line_start":3596,"line_end":3596,"column_start":1,"column_end":66}},{"value":"/ properties, it has no interesting functionality of its own.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176364,"byte_end":176427,"line_start":3597,"line_end":3597,"column_start":1,"column_end":64}},{"value":"allow(non_snake_case)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176428,"byte_end":176452,"line_start":3598,"line_end":3598,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":3654},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176881,"byte_end":176886,"line_start":3610,"line_end":3610,"column_start":16,"column_end":21},"name":"parse","qualname":"::JSON::parse","value":"fn (text: &str) -> Result<JsValue, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.parse()` method parses a JSON string, constructing the\n JavaScript value or object described by the string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176503,"byte_end":176518,"line_start":3603,"line_end":3603,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176503,"byte_end":176518,"line_start":3603,"line_end":3603,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3656},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":177225,"byte_end":177234,"line_start":3616,"line_end":3616,"column_start":16,"column_end":25},"name":"stringify","qualname":"::JSON::stringify","value":"fn (obj: &JsValue) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176503,"byte_end":176518,"line_start":3603,"line_end":3603,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176503,"byte_end":176518,"line_start":3603,"line_end":3603,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3658},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":178037,"byte_end":178060,"line_start":3628,"line_end":3628,"column_start":16,"column_end":39},"name":"stringify_with_replacer","qualname":"::JSON::stringify_with_replacer","value":"fn (obj: &JsValue, replacer: &JsValue) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176503,"byte_end":176518,"line_start":3603,"line_end":3603,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176503,"byte_end":176518,"line_start":3603,"line_end":3603,"column_start":5,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":3660},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179577,"byte_end":179610,"line_start":3652,"line_end":3652,"column_start":16,"column_end":49},"name":"stringify_with_replacer_and_space","qualname":"::JSON::stringify_with_replacer_and_space","value":"fn (obj: &JsValue, replacer: &JsValue, space: &JsValue) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The `JSON.stringify()` method converts a JavaScript value to a JSON string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176503,"byte_end":176518,"line_start":3603,"line_end":3603,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":176503,"byte_end":176518,"line_start":3603,"line_end":3603,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":3902},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179957,"byte_end":179965,"line_start":3666,"line_end":3666,"column_start":14,"column_end":22},"name":"JsString","qualname":"::JsString","value":"JsString {  }","parent":null,"children":[{"krate":0,"index":3903}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3723},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":180270,"byte_end":180276,"line_start":3673,"line_end":3673,"column_start":12,"column_end":18},"name":"length","qualname":"<JsString>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length property of a String object indicates the length of a string,\n in UTF-16 code units.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3726},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":180687,"byte_end":180694,"line_start":3681,"line_end":3681,"column_start":12,"column_end":19},"name":"char_at","qualname":"<JsString>::char_at","value":"fn (&self, index: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The String object's `charAt()` method returns a new string consisting of\n the single UTF-16 code unit located at the specified offset into the\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3729},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":181521,"byte_end":181533,"line_start":3695,"line_end":3695,"column_start":12,"column_end":24},"name":"char_code_at","qualname":"<JsString>::char_code_at","value":"fn (&self, index: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" The `charCodeAt()` method returns an integer between 0 and 65535\n representing the UTF-16 code unit at the given index (the UTF-16 code\n unit matches the Unicode code point for code points representable in a\n single UTF-16 code unit, but might also be the first code unit of a\n surrogate pair for code points not representable in a single UTF-16 code\n unit, e.g. Unicode code points > 0x10000).  If you want the entire code\n point value, use `codePointAt()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3732},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":181904,"byte_end":181917,"line_start":3702,"line_end":3702,"column_start":12,"column_end":25},"name":"code_point_at","qualname":"<JsString>::code_point_at","value":"fn (&self, pos: u32) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `codePointAt()` method returns a non-negative integer that is the\n Unicode code point value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3735},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":182270,"byte_end":182276,"line_start":3709,"line_end":3709,"column_start":12,"column_end":18},"name":"concat","qualname":"<JsString>::concat","value":"fn (&self, string_2: &JsValue) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `concat()` method concatenates the string arguments to the calling\n string and returns a new string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3738},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":182698,"byte_end":182707,"line_start":3716,"line_end":3716,"column_start":12,"column_end":21},"name":"ends_with","qualname":"<JsString>::ends_with","value":"fn (&self, search_string: &str, length: i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `endsWith()` method determines whether a string ends with the characters of a\n specified string, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3741},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":183550,"byte_end":183564,"line_start":3732,"line_end":3732,"column_start":12,"column_end":26},"name":"from_char_code","qualname":"<JsString>::from_char_code","value":"fn (char_codes: &[u16]) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The static `String.fromCharCode()` method returns a string created from\n the specified sequence of UTF-16 code units.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3744},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":183834,"byte_end":183849,"line_start":3736,"line_end":3736,"column_start":12,"column_end":27},"name":"from_char_code1","qualname":"<JsString>::from_char_code1","value":"fn (a: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3747},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":184107,"byte_end":184122,"line_start":3740,"line_end":3740,"column_start":12,"column_end":27},"name":"from_char_code2","qualname":"<JsString>::from_char_code2","value":"fn (a: u32, b: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3750},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":184388,"byte_end":184403,"line_start":3744,"line_end":3744,"column_start":12,"column_end":27},"name":"from_char_code3","qualname":"<JsString>::from_char_code3","value":"fn (a: u32, b: u32, c: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3753},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":184677,"byte_end":184692,"line_start":3748,"line_end":3748,"column_start":12,"column_end":27},"name":"from_char_code4","qualname":"<JsString>::from_char_code4","value":"fn (a: u32, b: u32, c: u32, d: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3756},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":184974,"byte_end":184989,"line_start":3752,"line_end":3752,"column_start":12,"column_end":27},"name":"from_char_code5","qualname":"<JsString>::from_char_code5","value":"fn (a: u32, b: u32, c: u32, d: u32, e: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3759},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":185726,"byte_end":185741,"line_start":3768,"line_end":3768,"column_start":12,"column_end":27},"name":"from_code_point","qualname":"<JsString>::from_code_point","value":"fn (code_points: &[u32]) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `String.fromCodePoint()` method returns a string created by\n using the specified sequence of code points.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3762},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":186038,"byte_end":186054,"line_start":3772,"line_end":3772,"column_start":12,"column_end":28},"name":"from_code_point1","qualname":"<JsString>::from_code_point1","value":"fn (a: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3765},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":186338,"byte_end":186354,"line_start":3776,"line_end":3776,"column_start":12,"column_end":28},"name":"from_code_point2","qualname":"<JsString>::from_code_point2","value":"fn (a: u32, b: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3768},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":186646,"byte_end":186662,"line_start":3780,"line_end":3780,"column_start":12,"column_end":28},"name":"from_code_point3","qualname":"<JsString>::from_code_point3","value":"fn (a: u32, b: u32, c: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3771},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":186962,"byte_end":186978,"line_start":3784,"line_end":3784,"column_start":12,"column_end":28},"name":"from_code_point4","qualname":"<JsString>::from_code_point4","value":"fn (a: u32, b: u32, c: u32, d: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3774},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":187286,"byte_end":187302,"line_start":3788,"line_end":3788,"column_start":12,"column_end":28},"name":"from_code_point5","qualname":"<JsString>::from_code_point5","value":"fn (a: u32, b: u32, c: u32, d: u32, e: u32) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3777},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":187714,"byte_end":187722,"line_start":3795,"line_end":3795,"column_start":12,"column_end":20},"name":"includes","qualname":"<JsString>::includes","value":"fn (&self, search_string: &str, position: i32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `includes()` method determines whether one string may be found\n within another string, returning true or false as appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3780},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":188217,"byte_end":188225,"line_start":3803,"line_end":3803,"column_start":12,"column_end":20},"name":"index_of","qualname":"<JsString>::index_of","value":"fn (&self, search_value: &str, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `indexOf()` method returns the index within the calling String\n object of the first occurrence of the specified value, starting the\n search at fromIndex.  Returns -1 if the value is not found.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3783},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":188733,"byte_end":188746,"line_start":3811,"line_end":3811,"column_start":12,"column_end":25},"name":"last_index_of","qualname":"<JsString>::last_index_of","value":"fn (&self, search_value: &str, from_index: i32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `lastIndexOf()` method returns the index within the calling String\n object of the last occurrence of the specified value, searching\n backwards from fromIndex.  Returns -1 if the value is not found.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3786},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":189214,"byte_end":189228,"line_start":3819,"line_end":3819,"column_start":12,"column_end":26},"name":"locale_compare","qualname":"<JsString>::locale_compare","value":"fn (&self, compare_string: &str, locales: &Array, options: &Object) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `localeCompare()` method returns a number indicating whether\n a reference string comes before or after or is the same as\n the given string in sort order.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3789},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":189663,"byte_end":189669,"line_start":3830,"line_end":3830,"column_start":12,"column_end":18},"name":"match_","qualname":"<JsString>::match_","value":"fn (&self, pattern: &RegExp) -> Option<Object>","parent":null,"children":[],"decl_id":null,"docs":" The `match()` method retrieves the matches when matching a string against a regular expression.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3792},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":190084,"byte_end":190093,"line_start":3837,"line_end":3837,"column_start":12,"column_end":21},"name":"normalize","qualname":"<JsString>::normalize","value":"fn (&self, form: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `normalize()` method returns the Unicode Normalization Form\n of a given string (if the value isn't a string, it will be converted to one first).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3795},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":190587,"byte_end":190594,"line_start":3846,"line_end":3846,"column_start":12,"column_end":19},"name":"pad_end","qualname":"<JsString>::pad_end","value":"fn (&self, target_length: u32, pad_string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `padEnd()` method pads the current string with a given string\n (repeated, if needed) so that the resulting string reaches a given\n length. The padding is applied from the end (right) of the current\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3798},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":191123,"byte_end":191132,"line_start":3855,"line_end":3855,"column_start":12,"column_end":21},"name":"pad_start","qualname":"<JsString>::pad_start","value":"fn (&self, target_length: u32, pad_string: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `padStart()` method pads the current string with another string\n (repeated, if needed) so that the resulting string reaches the given\n length. The padding is applied from the start (left) of the current\n string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3801},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":191575,"byte_end":191581,"line_start":3862,"line_end":3862,"column_start":12,"column_end":18},"name":"repeat","qualname":"<JsString>::repeat","value":"fn (&self, count: i32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `repeat()` method constructs and returns a new string which contains the specified\n number of copies of the string on which it was called, concatenated together.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3804},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":192136,"byte_end":192143,"line_start":3872,"line_end":3872,"column_start":12,"column_end":19},"name":"replace","qualname":"<JsString>::replace","value":"fn (&self, pattern: &str, replacement: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `replace()` method returns a new string with some or all matches of a pattern\n replaced by a replacement. The pattern can be a string or a RegExp, and\n the replacement can be a string or a function to be called for each match.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3807},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":192413,"byte_end":192434,"line_start":3876,"line_end":3876,"column_start":12,"column_end":33},"name":"replace_with_function","qualname":"<JsString>::replace_with_function","value":"fn (&self, pattern: &str, replacement: &Function) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3810},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":192615,"byte_end":192633,"line_start":3883,"line_end":3883,"column_start":12,"column_end":30},"name":"replace_by_pattern","qualname":"<JsString>::replace_by_pattern","value":"fn (&self, pattern: &RegExp, replacement: &str) -> JsString","parent":null,"children":[],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3813},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":192906,"byte_end":192938,"line_start":3887,"line_end":3887,"column_start":12,"column_end":44},"name":"replace_by_pattern_with_function","qualname":"<JsString>::replace_by_pattern_with_function","value":"fn (&self, pattern: &RegExp, replacement: &Function) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3816},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":193356,"byte_end":193362,"line_start":3898,"line_end":3898,"column_start":12,"column_end":18},"name":"search","qualname":"<JsString>::search","value":"fn (&self, pattern: &RegExp) -> i32","parent":null,"children":[],"decl_id":null,"docs":" The `search()` method executes a search for a match between\n a regular expression and this String object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3819},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":193737,"byte_end":193742,"line_start":3905,"line_end":3905,"column_start":12,"column_end":17},"name":"slice","qualname":"<JsString>::slice","value":"fn (&self, start: u32, end: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method extracts a section of a string and returns it as a\n new string, without modifying the original string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3822},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":194188,"byte_end":194193,"line_start":3912,"line_end":3912,"column_start":12,"column_end":17},"name":"split","qualname":"<JsString>::split","value":"fn (&self, separator: &str) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `split()` method splits a String object into an array of strings by separating the string\n into substrings, using a specified separator string to determine where to make each split.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3825},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":194439,"byte_end":194450,"line_start":3916,"line_end":3916,"column_start":12,"column_end":23},"name":"split_limit","qualname":"<JsString>::split_limit","value":"fn (&self, separator: &str, limit: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3828},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":194708,"byte_end":194724,"line_start":3920,"line_end":3920,"column_start":12,"column_end":28},"name":"split_by_pattern","qualname":"<JsString>::split_by_pattern","value":"fn (&self, pattern: &RegExp) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3831},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":194971,"byte_end":194993,"line_start":3924,"line_end":3924,"column_start":12,"column_end":34},"name":"split_by_pattern_limit","qualname":"<JsString>::split_by_pattern_limit","value":"fn (&self, pattern: &RegExp, limit: u32) -> Array","parent":null,"children":[],"decl_id":null,"docs":" [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3834},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":195438,"byte_end":195449,"line_start":3932,"line_end":3932,"column_start":12,"column_end":23},"name":"starts_with","qualname":"<JsString>::starts_with","value":"fn (&self, search_string: &str, position: u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" The `startsWith()` method determines whether a string begins with the\n characters of a specified string, returning true or false as\n appropriate.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3837},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":195844,"byte_end":195853,"line_start":3939,"line_end":3939,"column_start":12,"column_end":21},"name":"substring","qualname":"<JsString>::substring","value":"fn (&self, index_start: u32, index_end: u32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `substring()` method returns the part of the string between the\n start and end indexes, or to the end of the string.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3840},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":196239,"byte_end":196245,"line_start":3946,"line_end":3946,"column_start":12,"column_end":18},"name":"substr","qualname":"<JsString>::substr","value":"fn (&self, start: i32, length: i32) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `substr()` method returns the part of a string between\n the start index and a number of characters after it.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3843},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":196689,"byte_end":196709,"line_start":3953,"line_end":3953,"column_start":12,"column_end":32},"name":"to_locale_lower_case","qualname":"<JsString>::to_locale_lower_case","value":"fn (&self, locale: Option<&str>) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleLowerCase()` method returns the calling string value converted to lower case,\n according to any locale-specific case mappings.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3846},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":197147,"byte_end":197167,"line_start":3960,"line_end":3960,"column_start":12,"column_end":32},"name":"to_locale_upper_case","qualname":"<JsString>::to_locale_upper_case","value":"fn (&self, locale: Option<&str>) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLocaleUpperCase()` method returns the calling string value converted to upper case,\n according to any locale-specific case mappings.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3849},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":197542,"byte_end":197555,"line_start":3967,"line_end":3967,"column_start":12,"column_end":25},"name":"to_lower_case","qualname":"<JsString>::to_lower_case","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toLowerCase()` method returns the calling string value\n converted to lower case.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3852},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":197893,"byte_end":197902,"line_start":3974,"line_end":3974,"column_start":12,"column_end":21},"name":"to_string","qualname":"<JsString>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the specified\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3855},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":198312,"byte_end":198325,"line_start":3981,"line_end":3981,"column_start":12,"column_end":25},"name":"to_upper_case","qualname":"<JsString>::to_upper_case","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toUpperCase()` method returns the calling string value converted to\n uppercase (the value will be converted to a string if it isn't one).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3858},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":198796,"byte_end":198800,"line_start":3990,"line_end":3990,"column_start":12,"column_end":16},"name":"trim","qualname":"<JsString>::trim","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trim()` method removes whitespace from both ends of a string.\n Whitespace in this context is all the whitespace characters (space, tab,\n no-break space, etc.) and all the line terminator characters (LF, CR,\n etc.).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3861},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":199170,"byte_end":199178,"line_start":3997,"line_end":3997,"column_start":12,"column_end":20},"name":"trim_end","qualname":"<JsString>::trim_end","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimEnd()` method removes whitespace from the end of a string.\n `trimRight()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3864},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":199550,"byte_end":199560,"line_start":4004,"line_end":4004,"column_start":12,"column_end":22},"name":"trim_right","qualname":"<JsString>::trim_right","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimEnd()` method removes whitespace from the end of a string.\n `trimRight()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3867},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":199941,"byte_end":199951,"line_start":4011,"line_end":4011,"column_start":12,"column_end":22},"name":"trim_start","qualname":"<JsString>::trim_start","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimStart()` method removes whitespace from the beginning of a\n string. `trimLeft()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3870},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":200331,"byte_end":200340,"line_start":4018,"line_end":4018,"column_start":12,"column_end":21},"name":"trim_left","qualname":"<JsString>::trim_left","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `trimStart()` method removes whitespace from the beginning of a\n string. `trimLeft()` is an alias of this method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3873},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":200665,"byte_end":200673,"line_start":4024,"line_end":4024,"column_start":12,"column_end":20},"name":"value_of","qualname":"<JsString>::value_of","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of a `String` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3876},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":201095,"byte_end":201098,"line_start":4031,"line_end":4031,"column_start":12,"column_end":15},"name":"raw","qualname":"<JsString>::raw","value":"fn (call_site: &Object, substitutions: &Array) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3879},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":201568,"byte_end":201573,"line_start":4038,"line_end":4038,"column_start":12,"column_end":17},"name":"raw_0","qualname":"<JsString>::raw_0","value":"fn (call_site: &Object) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3882},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":202020,"byte_end":202025,"line_start":4045,"line_end":4045,"column_start":12,"column_end":17},"name":"raw_1","qualname":"<JsString>::raw_1","value":"fn (call_site: &Object, substitutions_1: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3885},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":202495,"byte_end":202500,"line_start":4052,"line_end":4052,"column_start":12,"column_end":17},"name":"raw_2","qualname":"<JsString>::raw_2","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3888},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":203024,"byte_end":203029,"line_start":4063,"line_end":4063,"column_start":12,"column_end":17},"name":"raw_3","qualname":"<JsString>::raw_3","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3891},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":203584,"byte_end":203589,"line_start":4075,"line_end":4075,"column_start":12,"column_end":17},"name":"raw_4","qualname":"<JsString>::raw_4","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3894},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":204175,"byte_end":204180,"line_start":4088,"line_end":4088,"column_start":12,"column_end":17},"name":"raw_5","qualname":"<JsString>::raw_5","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str, substitutions_5: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3897},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":204797,"byte_end":204802,"line_start":4102,"line_end":4102,"column_start":12,"column_end":17},"name":"raw_6","qualname":"<JsString>::raw_6","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str, substitutions_5: &str, substitutions_6: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3900},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":205450,"byte_end":205455,"line_start":4117,"line_end":4117,"column_start":12,"column_end":17},"name":"raw_7","qualname":"<JsString>::raw_7","value":"fn (call_site: &Object, substitutions_1: &str, substitutions_2: &str, substitutions_3: &str, substitutions_4: &str, substitutions_5: &str, substitutions_6: &str, substitutions_7: &str) -> Result<JsString, JsValue>","parent":null,"children":[],"decl_id":null,"docs":" The static `raw()` method is a tag function of template literals,\n similar to the `r` prefix in Python or the `@` prefix in C# for string literals.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":179762,"byte_end":179777,"line_start":3662,"line_end":3662,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206048,"byte_end":206056,"line_start":4136,"line_end":4136,"column_start":12,"column_end":20},"name":"try_from","qualname":"<JsString>::try_from","value":"fn (val: &JsValue) -> Option<&JsString>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `JsString` value of this JS value if it's an instance of a\n string.","sig":null,"attributes":[{"value":"/ Returns the `JsString` value of this JS value if it's an instance of a","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":205761,"byte_end":205835,"line_start":4130,"line_end":4130,"column_start":5,"column_end":79}},{"value":"/ string.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":205840,"byte_end":205851,"line_start":4131,"line_end":4131,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":205856,"byte_end":205859,"line_start":4132,"line_end":4132,"column_start":5,"column_end":8}},{"value":"/ If this JS value is not an instance of a string then this returns","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":205864,"byte_end":205933,"line_start":4133,"line_end":4133,"column_start":5,"column_end":74}},{"value":"/ `None`.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":205938,"byte_end":205949,"line_start":4134,"line_end":4134,"column_start":5,"column_end":16}},{"value":"deprecated(note =\n             \"recommended to use dyn_ref instead which is now equivalent\")","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":205954,"byte_end":206036,"line_start":4135,"line_end":4135,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206981,"byte_end":206995,"line_start":4156,"line_end":4156,"column_start":12,"column_end":26},"name":"is_valid_utf16","qualname":"<JsString>::is_valid_utf16","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this string is a valid UTF-16 string.","sig":null,"attributes":[{"value":"/ Returns whether this string is a valid UTF-16 string.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206128,"byte_end":206185,"line_start":4140,"line_end":4140,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206190,"byte_end":206193,"line_start":4141,"line_end":4141,"column_start":5,"column_end":8}},{"value":"/ This is useful for learning whether `String::from(..)` will return a","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206198,"byte_end":206270,"line_start":4142,"line_end":4142,"column_start":5,"column_end":77}},{"value":"/ lossless representation of the JS string. If this string contains","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206275,"byte_end":206344,"line_start":4143,"line_end":4143,"column_start":5,"column_end":74}},{"value":"/ unpaired surrogates then `String::from` will succeed but it will be a","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206349,"byte_end":206422,"line_start":4144,"line_end":4144,"column_start":5,"column_end":78}},{"value":"/ lossy representation of the JS string because unpaired surrogates will","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206427,"byte_end":206501,"line_start":4145,"line_end":4145,"column_start":5,"column_end":79}},{"value":"/ become replacement characters.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206506,"byte_end":206540,"line_start":4146,"line_end":4146,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206545,"byte_end":206548,"line_start":4147,"line_end":4147,"column_start":5,"column_end":8}},{"value":"/ If this function returns `false` then to get a lossless representation","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206553,"byte_end":206627,"line_start":4148,"line_end":4148,"column_start":5,"column_end":79}},{"value":"/ of the string you'll need to manually use the `iter` method (or the","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206632,"byte_end":206703,"line_start":4149,"line_end":4149,"column_start":5,"column_end":76}},{"value":"/ `char_code_at` accessor) to view the raw character codes.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206708,"byte_end":206769,"line_start":4150,"line_end":4150,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206774,"byte_end":206777,"line_start":4151,"line_end":4151,"column_start":5,"column_end":8}},{"value":"/ For more information, see the documentation on [JS strings vs Rust","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206782,"byte_end":206852,"line_start":4152,"line_end":4152,"column_start":5,"column_end":75}},{"value":"/ strings][docs]","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206857,"byte_end":206875,"line_start":4153,"line_end":4153,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206880,"byte_end":206883,"line_start":4154,"line_end":4154,"column_start":5,"column_end":8}},{"value":"/ [docs]: https://rustwasm.github.io/docs/wasm-bindgen/reference/types/str.html","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":206888,"byte_end":206969,"line_start":4155,"line_end":4155,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207333,"byte_end":207337,"line_start":4165,"line_end":4165,"column_start":12,"column_end":16},"name":"iter","qualname":"<JsString>::iter","value":"fn <'a> (&'a self) -> impl ExactSizeIterator<Item = u16> + DoubleEndedIterator<Item = u16> + 'a","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the `u16` character codes that make up this JS\n string.","sig":null,"attributes":[{"value":"/ Returns an iterator over the `u16` character codes that make up this JS","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207088,"byte_end":207163,"line_start":4160,"line_end":4160,"column_start":5,"column_end":80}},{"value":"/ string.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207168,"byte_end":207179,"line_start":4161,"line_end":4161,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207184,"byte_end":207187,"line_start":4162,"line_end":4162,"column_start":5,"column_end":8}},{"value":"/ This method will call `char_code_at` for each code in this JS string,","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207192,"byte_end":207265,"line_start":4163,"line_end":4163,"column_start":5,"column_end":78}},{"value":"/ returning an iterator of the codes in sequence.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207270,"byte_end":207321,"line_start":4164,"line_end":4164,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":208106,"byte_end":208113,"line_start":4181,"line_end":4181,"column_start":12,"column_end":19},"name":"as_char","qualname":"<JsString>::as_char","value":"fn (&self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" If this string consists of a single Unicode code point, then this method\n converts it into a Rust `char` without doing any allocations.","sig":null,"attributes":[{"value":"/ If this string consists of a single Unicode code point, then this method","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207526,"byte_end":207602,"line_start":4171,"line_end":4171,"column_start":5,"column_end":81}},{"value":"/ converts it into a Rust `char` without doing any allocations.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207607,"byte_end":207672,"line_start":4172,"line_end":4172,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207677,"byte_end":207680,"line_start":4173,"line_end":4173,"column_start":5,"column_end":8}},{"value":"/ If this JS value is not a valid UTF-8 or consists of more than a single","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207685,"byte_end":207760,"line_start":4174,"line_end":4174,"column_start":5,"column_end":80}},{"value":"/ codepoint, then this returns `None`.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207765,"byte_end":207805,"line_start":4175,"line_end":4175,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207810,"byte_end":207813,"line_start":4176,"line_end":4176,"column_start":5,"column_end":8}},{"value":"/ Note that a single Unicode code point might be represented as more than","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207818,"byte_end":207893,"line_start":4177,"line_end":4177,"column_start":5,"column_end":80}},{"value":"/ one code unit on the JavaScript side. For example, a JavaScript string","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207898,"byte_end":207972,"line_start":4178,"line_end":4178,"column_start":5,"column_end":79}},{"value":"/ `\"\\uD801\\uDC37\"` is actually a single Unicode code point U+10437 which","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":207977,"byte_end":208051,"line_start":4179,"line_end":4179,"column_start":5,"column_end":79}},{"value":"/ corresponds to a character '𐐷'.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":208056,"byte_end":208094,"line_start":4180,"line_end":4180,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":4015},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":210075,"byte_end":210081,"line_start":4268,"line_end":4268,"column_start":14,"column_end":20},"name":"Symbol","qualname":"::Symbol","value":"Symbol {  }","parent":null,"children":[{"krate":0,"index":4016}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3968},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":210543,"byte_end":210555,"line_start":4276,"line_end":4276,"column_start":12,"column_end":24},"name":"has_instance","qualname":"<Symbol>::has_instance","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.hasInstance` well-known symbol is used to determine\n if a constructor object recognizes an object as its instance.\n The `instanceof` operator's behavior can be customized by this symbol.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3971},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":211022,"byte_end":211042,"line_start":4284,"line_end":4284,"column_start":12,"column_end":32},"name":"is_concat_spreadable","qualname":"<Symbol>::is_concat_spreadable","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.isConcatSpreadable` well-known symbol is used to configure\n if an object should be flattened to its array elements when using the\n `Array.prototype.concat()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3974},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":211517,"byte_end":211531,"line_start":4291,"line_end":4291,"column_start":12,"column_end":26},"name":"async_iterator","qualname":"<Symbol>::async_iterator","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.asyncIterator` well-known symbol specifies the default AsyncIterator for an object.\n If this property is set on an object, it is an async iterable and can be used in a `for await...of` loop.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3977},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":211881,"byte_end":211889,"line_start":4298,"line_end":4298,"column_start":12,"column_end":20},"name":"iterator","qualname":"<Symbol>::iterator","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.iterator` well-known symbol specifies the default iterator\n for an object.  Used by `for...of`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3980},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":212322,"byte_end":212328,"line_start":4306,"line_end":4306,"column_start":12,"column_end":18},"name":"match_","qualname":"<Symbol>::match_","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.match` well-known symbol specifies the matching of a regular\n expression against a string. This function is called by the\n `String.prototype.match()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3983},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":212869,"byte_end":212876,"line_start":4317,"line_end":4317,"column_start":12,"column_end":19},"name":"replace","qualname":"<Symbol>::replace","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.replace` well-known symbol specifies the method that\n replaces matched substrings of a string.  This function is called by the\n `String.prototype.replace()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3986},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":213442,"byte_end":213448,"line_start":4328,"line_end":4328,"column_start":12,"column_end":18},"name":"search","qualname":"<Symbol>::search","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.search` well-known symbol specifies the method that returns\n the index within a string that matches the regular expression.  This\n function is called by the `String.prototype.search()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3989},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":213828,"byte_end":213835,"line_start":4335,"line_end":4335,"column_start":12,"column_end":19},"name":"species","qualname":"<Symbol>::species","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The well-known symbol `Symbol.species` specifies a function-valued\n property that the constructor function uses to create derived objects.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3992},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":214381,"byte_end":214386,"line_start":4345,"line_end":4345,"column_start":12,"column_end":17},"name":"split","qualname":"<Symbol>::split","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.split` well-known symbol specifies the method that splits a\n string at the indices that match a regular expression.  This function is\n called by the `String.prototype.split()` method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3995},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":214814,"byte_end":214826,"line_start":4353,"line_end":4353,"column_start":12,"column_end":24},"name":"to_primitive","qualname":"<Symbol>::to_primitive","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.toPrimitive` is a symbol that specifies a function valued\n property that is called to convert an object to a corresponding\n primitive value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3998},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":215328,"byte_end":215341,"line_start":4362,"line_end":4362,"column_start":12,"column_end":25},"name":"to_string_tag","qualname":"<Symbol>::to_string_tag","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.toStringTag` well-known symbol is a string valued property\n that is used in the creation of the default string description of an\n object.  It is accessed internally by the `Object.prototype.toString()`\n method.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4001},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":215800,"byte_end":215804,"line_start":4370,"line_end":4370,"column_start":12,"column_end":16},"name":"for_","qualname":"<Symbol>::for_","value":"fn (key: &str) -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.for(key)` method searches for existing symbols in a runtime-wide symbol registry with\n the given key and returns it if found.\n Otherwise a new symbol gets created in the global symbol registry with this key.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4004},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":216160,"byte_end":216167,"line_start":4376,"line_end":4376,"column_start":12,"column_end":19},"name":"key_for","qualname":"<Symbol>::key_for","value":"fn (sym: &Symbol) -> JsValue","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.keyFor(sym)` method retrieves a shared symbol key from the global symbol registry for the given symbol.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4007},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":216479,"byte_end":216488,"line_start":4382,"line_end":4382,"column_start":12,"column_end":21},"name":"to_string","qualname":"<Symbol>::to_string","value":"fn (&self) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `toString()` method returns a string representing the specified Symbol object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4010},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":216951,"byte_end":216962,"line_start":4390,"line_end":4390,"column_start":12,"column_end":23},"name":"unscopables","qualname":"<Symbol>::unscopables","value":"fn () -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `Symbol.unscopables` well-known symbol is used to specify an object\n value of whose own and inherited property names are excluded from the\n with environment bindings of the associated object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4013},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217247,"byte_end":217255,"line_start":4396,"line_end":4396,"column_start":12,"column_end":20},"name":"value_of","qualname":"<Symbol>::value_of","value":"fn (&self) -> Symbol","parent":null,"children":[],"decl_id":null,"docs":" The `valueOf()` method returns the primitive value of a Symbol object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209924,"byte_end":209939,"line_start":4264,"line_end":4264,"column_start":1,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":130},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217318,"byte_end":217322,"line_start":4400,"line_end":4400,"column_start":9,"column_end":13},"name":"Intl","qualname":"::Intl","value":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":4021},{"krate":0,"index":4094},{"krate":0,"index":4098},{"krate":0,"index":4096},{"krate":0,"index":4023},{"krate":0,"index":4076},{"krate":0,"index":4079},{"krate":0,"index":4082},{"krate":0,"index":4085},{"krate":0,"index":4088},{"krate":0,"index":4091},{"krate":0,"index":4174},{"krate":0,"index":4178},{"krate":0,"index":4176},{"krate":0,"index":4100},{"krate":0,"index":4153},{"krate":0,"index":4156},{"krate":0,"index":4159},{"krate":0,"index":4162},{"krate":0,"index":4165},{"krate":0,"index":4168},{"krate":0,"index":4171},{"krate":0,"index":4254},{"krate":0,"index":4258},{"krate":0,"index":4256},{"krate":0,"index":4180},{"krate":0,"index":4233},{"krate":0,"index":4236},{"krate":0,"index":4239},{"krate":0,"index":4242},{"krate":0,"index":4245},{"krate":0,"index":4248},{"krate":0,"index":4251},{"krate":0,"index":4331},{"krate":0,"index":4335},{"krate":0,"index":4333},{"krate":0,"index":4260},{"krate":0,"index":4313},{"krate":0,"index":4316},{"krate":0,"index":4319},{"krate":0,"index":4322},{"krate":0,"index":4325},{"krate":0,"index":4328}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217285,"byte_end":217309,"line_start":4399,"line_end":4399,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":4021},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217862,"byte_end":217883,"line_start":4412,"line_end":4412,"column_start":16,"column_end":37},"name":"get_canonical_locales","qualname":"::Intl::get_canonical_locales","value":"fn (s: &JsValue) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.getCanonicalLocales()` method returns an array containing\n the canonical locale names. Duplicates will be omitted and elements\n will be validated as structurally valid language tags.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217360,"byte_end":217375,"line_start":4404,"line_end":4404,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217360,"byte_end":217375,"line_start":4404,"line_end":4404,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4094},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":218395,"byte_end":218403,"line_start":4424,"line_end":4424,"column_start":18,"column_end":26},"name":"Collator","qualname":"::Intl::Collator","value":"Collator {  }","parent":null,"children":[{"krate":0,"index":4095}],"decl_id":null,"docs":" The `Intl.Collator` object is a constructor for collators, objects\n that enable language sensitive string comparison.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217939,"byte_end":217954,"line_start":4416,"line_end":4416,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217939,"byte_end":217954,"line_start":4416,"line_end":4416,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217939,"byte_end":217954,"line_start":4416,"line_end":4416,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4083},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":218755,"byte_end":218758,"line_start":4431,"line_end":4431,"column_start":16,"column_end":19},"name":"new","qualname":"<Collator>::new","value":"fn (locales: &Array, options: &Object) -> Collator","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.Collator` object is a constructor for collators, objects\n that enable language sensitive string comparison.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217939,"byte_end":217954,"line_start":4416,"line_end":4416,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217939,"byte_end":217954,"line_start":4416,"line_end":4416,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4086},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":219213,"byte_end":219220,"line_start":4439,"line_end":4439,"column_start":16,"column_end":23},"name":"compare","qualname":"<Collator>::compare","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.Collator.prototype.compare property returns a function that\n compares two strings according to the sort order of this Collator\n object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217939,"byte_end":217954,"line_start":4416,"line_end":4416,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217939,"byte_end":217954,"line_start":4416,"line_end":4416,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4089},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":219726,"byte_end":219742,"line_start":4447,"line_end":4447,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<Collator>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.Collator.prototype.resolvedOptions()` method returns a new\n object with properties reflecting the locale and collation options\n computed during initialization of this Collator object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217939,"byte_end":217954,"line_start":4416,"line_end":4416,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217939,"byte_end":217954,"line_start":4416,"line_end":4416,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4092},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220292,"byte_end":220312,"line_start":4456,"line_end":4456,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<Collator>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.Collator.supportedLocalesOf()` method returns an array\n containing those of the provided locales that are supported in\n collation without having to fall back to the runtime's default\n locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217939,"byte_end":217954,"line_start":4416,"line_end":4416,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":217939,"byte_end":217954,"line_start":4416,"line_end":4416,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4174},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220866,"byte_end":220880,"line_start":4468,"line_end":4468,"column_start":18,"column_end":32},"name":"DateTimeFormat","qualname":"::Intl::DateTimeFormat","value":"DateTimeFormat {  }","parent":null,"children":[{"krate":0,"index":4175}],"decl_id":null,"docs":" The `Intl.DateTimeFormat` object is a constructor for objects\n that enable language-sensitive date and time formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220396,"byte_end":220411,"line_start":4460,"line_end":4460,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220396,"byte_end":220411,"line_start":4460,"line_end":4460,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220396,"byte_end":220411,"line_start":4460,"line_end":4460,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4160},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":221240,"byte_end":221243,"line_start":4475,"line_end":4475,"column_start":16,"column_end":19},"name":"new","qualname":"<DateTimeFormat>::new","value":"fn (locales: &Array, options: &Object) -> DateTimeFormat","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.DateTimeFormat` object is a constructor for objects\n that enable language-sensitive date and time formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220396,"byte_end":220411,"line_start":4460,"line_end":4460,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220396,"byte_end":220411,"line_start":4460,"line_end":4460,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4163},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":221751,"byte_end":221757,"line_start":4483,"line_end":4483,"column_start":16,"column_end":22},"name":"format","qualname":"<DateTimeFormat>::format","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.DateTimeFormat.prototype.format property returns a getter function that\n formats a date according to the locale and formatting options of this\n Intl.DateTimeFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220396,"byte_end":220411,"line_start":4460,"line_end":4460,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220396,"byte_end":220411,"line_start":4460,"line_end":4460,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4166},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":222220,"byte_end":222235,"line_start":4490,"line_end":4490,"column_start":16,"column_end":31},"name":"format_to_parts","qualname":"<DateTimeFormat>::format_to_parts","value":"fn (&self, date: &Date) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.DateTimeFormat.prototype.formatToParts()` method allows locale-aware\n formatting of strings produced by DateTimeFormat formatters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220396,"byte_end":220411,"line_start":4460,"line_end":4460,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220396,"byte_end":220411,"line_start":4460,"line_end":4460,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4169},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":222790,"byte_end":222806,"line_start":4498,"line_end":4498,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<DateTimeFormat>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.DateTimeFormat.prototype.resolvedOptions()` method returns a new\n object with properties reflecting the locale and date and time formatting\n options computed during initialization of this DateTimeFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220396,"byte_end":220411,"line_start":4460,"line_end":4460,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220396,"byte_end":220411,"line_start":4460,"line_end":4460,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4172},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223395,"byte_end":223415,"line_start":4507,"line_end":4507,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<DateTimeFormat>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.DateTimeFormat.supportedLocalesOf()` method returns an array\n containing those of the provided locales that are supported in date\n and time formatting without having to fall back to the runtime's default\n locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220396,"byte_end":220411,"line_start":4460,"line_end":4460,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":220396,"byte_end":220411,"line_start":4460,"line_end":4460,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4254},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223954,"byte_end":223966,"line_start":4519,"line_end":4519,"column_start":18,"column_end":30},"name":"NumberFormat","qualname":"::Intl::NumberFormat","value":"NumberFormat {  }","parent":null,"children":[{"krate":0,"index":4255}],"decl_id":null,"docs":" The `Intl.NumberFormat` object is a constructor for objects\n that enable language sensitive number formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223497,"byte_end":223512,"line_start":4511,"line_end":4511,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223497,"byte_end":223512,"line_start":4511,"line_end":4511,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223497,"byte_end":223512,"line_start":4511,"line_end":4511,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4240},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":224315,"byte_end":224318,"line_start":4526,"line_end":4526,"column_start":16,"column_end":19},"name":"new","qualname":"<NumberFormat>::new","value":"fn (locales: &Array, options: &Object) -> NumberFormat","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.NumberFormat` object is a constructor for objects\n that enable language sensitive number formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223497,"byte_end":223512,"line_start":4511,"line_end":4511,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223497,"byte_end":223512,"line_start":4511,"line_end":4511,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4243},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":224813,"byte_end":224819,"line_start":4534,"line_end":4534,"column_start":16,"column_end":22},"name":"format","qualname":"<NumberFormat>::format","value":"fn (&self) -> Function","parent":null,"children":[],"decl_id":null,"docs":" The Intl.NumberFormat.prototype.format property returns a getter function that\n formats a number according to the locale and formatting options of this\n NumberFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223497,"byte_end":223512,"line_start":4511,"line_end":4511,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223497,"byte_end":223512,"line_start":4511,"line_end":4511,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4246},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":225276,"byte_end":225291,"line_start":4541,"line_end":4541,"column_start":16,"column_end":31},"name":"format_to_parts","qualname":"<NumberFormat>::format_to_parts","value":"fn (&self, number: f64) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.Numberformat.prototype.formatToParts()` method allows locale-aware\n formatting of strings produced by NumberTimeFormat formatters.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223497,"byte_end":223512,"line_start":4511,"line_end":4511,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223497,"byte_end":223512,"line_start":4511,"line_end":4511,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4249},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":225831,"byte_end":225847,"line_start":4549,"line_end":4549,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<NumberFormat>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.NumberFormat.prototype.resolvedOptions()` method returns a new\n object with properties reflecting the locale and number formatting\n options computed during initialization of this NumberFormat object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223497,"byte_end":223512,"line_start":4511,"line_end":4511,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223497,"byte_end":223512,"line_start":4511,"line_end":4511,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4252},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":226409,"byte_end":226429,"line_start":4557,"line_end":4557,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<NumberFormat>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.NumberFormat.supportedLocalesOf()` method returns an array\n containing those of the provided locales that are supported in number\n formatting without having to fall back to the runtime's default locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223497,"byte_end":223512,"line_start":4511,"line_end":4511,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":223497,"byte_end":223512,"line_start":4511,"line_end":4511,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4331},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":226981,"byte_end":226992,"line_start":4569,"line_end":4569,"column_start":18,"column_end":29},"name":"PluralRules","qualname":"::Intl::PluralRules","value":"PluralRules {  }","parent":null,"children":[{"krate":0,"index":4332}],"decl_id":null,"docs":" The `Intl.PluralRules` object is a constructor for objects\n that enable plural sensitive formatting and plural language rules.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":226510,"byte_end":226525,"line_start":4561,"line_end":4561,"column_start":5,"column_end":20}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":226510,"byte_end":226525,"line_start":4561,"line_end":4561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":226510,"byte_end":226525,"line_start":4561,"line_end":4561,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4320},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":227356,"byte_end":227359,"line_start":4576,"line_end":4576,"column_start":16,"column_end":19},"name":"new","qualname":"<PluralRules>::new","value":"fn (locales: &Array, options: &Object) -> PluralRules","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.PluralRules` object is a constructor for objects\n that enable plural sensitive formatting and plural language rules.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":226510,"byte_end":226525,"line_start":4561,"line_end":4561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":226510,"byte_end":226525,"line_start":4561,"line_end":4561,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4323},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":227903,"byte_end":227919,"line_start":4584,"line_end":4584,"column_start":16,"column_end":32},"name":"resolved_options","qualname":"<PluralRules>::resolved_options","value":"fn (&self) -> Object","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.PluralRules.prototype.resolvedOptions()` method returns a new\n object with properties reflecting the locale and plural formatting\n options computed during initialization of this PluralRules object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":226510,"byte_end":226525,"line_start":4561,"line_end":4561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":226510,"byte_end":226525,"line_start":4561,"line_end":4561,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4326},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228320,"byte_end":228326,"line_start":4591,"line_end":4591,"column_start":16,"column_end":22},"name":"select","qualname":"<PluralRules>::select","value":"fn (&self, number: f64) -> JsString","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.PluralRules.prototype.select()` method returns a String indicating\n which plural rule to use for locale-aware formatting.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":226510,"byte_end":226525,"line_start":4561,"line_end":4561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":226510,"byte_end":226525,"line_start":4561,"line_end":4561,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":4329},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228899,"byte_end":228919,"line_start":4599,"line_end":4599,"column_start":16,"column_end":36},"name":"supported_locales_of","qualname":"<PluralRules>::supported_locales_of","value":"fn (locales: &Array, options: &Object) -> Array","parent":null,"children":[],"decl_id":null,"docs":" The `Intl.PluralRules.supportedLocalesOf()` method returns an array\n containing those of the provided locales that are supported in plural\n formatting without having to fall back to the runtime's default locale.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":226510,"byte_end":226525,"line_start":4561,"line_end":4561,"column_start":5,"column_end":20}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":226510,"byte_end":226525,"line_start":4561,"line_end":4561,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":4423},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":229409,"byte_end":229416,"line_start":4613,"line_end":4613,"column_start":14,"column_end":21},"name":"Promise","qualname":"::Promise","value":"Promise {  }","parent":null,"children":[{"krate":0,"index":4424}],"decl_id":null,"docs":" The `Promise` object represents the eventual completion (or failure) of\n an asynchronous operation, and its resulting value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}},{"value":"must_use","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":229284,"byte_end":229295,"line_start":4610,"line_end":4610,"column_start":5,"column_end":16}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4397},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":230446,"byte_end":230449,"line_start":4632,"line_end":4632,"column_start":12,"column_end":15},"name":"new","qualname":"<Promise>::new","value":"fn (cb: &mut dyn FnMut(Function, Function)) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Promise` with the provided executor `cb`","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4400},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":230978,"byte_end":230981,"line_start":4641,"line_end":4641,"column_start":12,"column_end":15},"name":"all","qualname":"<Promise>::all","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.all(iterable)` method returns a single `Promise` that\n resolves when all of the promises in the iterable argument have resolved\n or when the iterable argument contains no promises. It rejects with the\n reason of the first promise that rejects.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4403},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":231415,"byte_end":231419,"line_start":4649,"line_end":4649,"column_start":12,"column_end":16},"name":"race","qualname":"<Promise>::race","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.race(iterable)` method returns a promise that resolves or\n rejects as soon as one of the promises in the iterable resolves or\n rejects, with the value or reason from that promise.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4406},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":231759,"byte_end":231765,"line_start":4656,"line_end":4656,"column_start":12,"column_end":18},"name":"reject","qualname":"<Promise>::reject","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.reject(reason)` method returns a `Promise` object that is\n rejected with the given reason.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4409},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":232381,"byte_end":232388,"line_start":4666,"line_end":4666,"column_start":12,"column_end":19},"name":"resolve","qualname":"<Promise>::resolve","value":"fn (obj: &JsValue) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `Promise.resolve(value)` method returns a `Promise` object that is\n resolved with the given value. If the value is a promise, that promise\n is returned; if the value is a thenable (i.e. has a \"then\" method), the\n returned promise will \"follow\" that thenable, adopting its eventual\n state; otherwise the returned promise will be fulfilled with the value.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4412},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":232872,"byte_end":232877,"line_start":4675,"line_end":4675,"column_start":12,"column_end":17},"name":"catch","qualname":"<Promise>::catch","value":"fn (&self, cb: &Closure<dyn FnMut(JsValue)>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `catch()` method returns a `Promise` and deals with rejected cases\n only.  It behaves the same as calling `Promise.prototype.then(undefined,\n onRejected)` (in fact, calling `obj.catch(onRejected)` internally calls\n `obj.then(undefined, onRejected)`).","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4415},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":233269,"byte_end":233273,"line_start":4682,"line_end":4682,"column_start":12,"column_end":16},"name":"then","qualname":"<Promise>::then","value":"fn (&self, cb: &Closure<dyn FnMut(JsValue)>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `then()` method returns a `Promise`. It takes up to two arguments:\n callback functions for the success and failure cases of the `Promise`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4418},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":233451,"byte_end":233456,"line_start":4686,"line_end":4686,"column_start":12,"column_end":17},"name":"then2","qualname":"<Promise>::then2","value":"fn (&self, resolve: &Closure<dyn FnMut(JsValue)>, reject: &Closure<dyn FnMut(JsValue)>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" Same as `then`, only with both arguments provided.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":4421},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":234232,"byte_end":234239,"line_start":4703,"line_end":4703,"column_start":12,"column_end":19},"name":"finally","qualname":"<Promise>::finally","value":"fn (&self, cb: &Closure<dyn FnMut()>) -> Promise","parent":null,"children":[],"decl_id":null,"docs":" The `finally()` method returns a `Promise`. When the promise is settled,\n whether fulfilled or rejected, the specified callback function is\n executed. This provides a way for code that must be executed once the\n `Promise` has been dealt with to be run whether the promise was\n fulfilled successfully or rejected.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":228985,"byte_end":229000,"line_start":4604,"line_end":4604,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":132},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":234463,"byte_end":234469,"line_start":4710,"line_end":4710,"column_start":8,"column_end":14},"name":"global","qualname":"::global","value":"fn () -> Object","parent":null,"children":[],"decl_id":null,"docs":" Returns a handle to the global scope object.","sig":null,"attributes":[{"value":"/ Returns a handle to the global scope object.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":234298,"byte_end":234346,"line_start":4706,"line_end":4706,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":234347,"byte_end":234350,"line_start":4707,"line_end":4707,"column_start":1,"column_end":4}},{"value":"/ This allows access to the global properties and global names by accessing","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":234351,"byte_end":234428,"line_start":4708,"line_end":4708,"column_start":1,"column_end":78}},{"value":"/ the `Object` returned.","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":234429,"byte_end":234455,"line_start":4709,"line_end":4709,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":4684},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"Int8Array","qualname":"::Int8Array","value":"Int8Array {  }","parent":null,"children":[{"krate":0,"index":4685}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4640},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new","qualname":"<Int8Array>::new","value":"fn (constructor_arg: &JsValue) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Int8Array()`\n constructor creates a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4643},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Int8Array>::new_with_length","value":"fn (length: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int8Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4646},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Int8Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4649},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Int8Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4652},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"fill","qualname":"<Int8Array>::fill","value":"fn (&self, value: i8, start: u32, end: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4655},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Int8Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4658},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Int8Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method returns a new `TypedArray` on the same\n `ArrayBuffer` store and with the same element types as for this\n `TypedArray` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4661},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"slice","qualname":"<Int8Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Int8Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4664},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Int8Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(i8, u32, Int8Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4667},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"length","qualname":"<Int8Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4670},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Int8Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4673},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Int8Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4676},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set","qualname":"<Int8Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4679},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"get_index","qualname":"<Int8Array>::get_index","value":"fn (&self, idx: u32) -> i8","parent":null,"children":[],"decl_id":null,"docs":" Gets the value at `idx`, equivalent to the javascript `my_var = arr[idx]`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4682},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set_index","qualname":"<Int8Array>::set_index","value":"fn (&self, idx: u32, value: i8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the value at `idx`, equivalent to the javascript `arr[idx] = value`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":4794},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"Int16Array","qualname":"::Int16Array","value":"Int16Array {  }","parent":null,"children":[{"krate":0,"index":4795}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4750},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new","qualname":"<Int16Array>::new","value":"fn (constructor_arg: &JsValue) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Int16Array()`\n constructor creates a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4753},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Int16Array>::new_with_length","value":"fn (length: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int16Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4756},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Int16Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4759},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Int16Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4762},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"fill","qualname":"<Int16Array>::fill","value":"fn (&self, value: i16, start: u32, end: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4765},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Int16Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4768},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Int16Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method returns a new `TypedArray` on the same\n `ArrayBuffer` store and with the same element types as for this\n `TypedArray` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4771},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"slice","qualname":"<Int16Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Int16Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4774},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Int16Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(i16, u32, Int16Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4777},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"length","qualname":"<Int16Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4780},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Int16Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4783},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Int16Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4786},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set","qualname":"<Int16Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4789},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"get_index","qualname":"<Int16Array>::get_index","value":"fn (&self, idx: u32) -> i16","parent":null,"children":[],"decl_id":null,"docs":" Gets the value at `idx`, equivalent to the javascript `my_var = arr[idx]`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4792},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set_index","qualname":"<Int16Array>::set_index","value":"fn (&self, idx: u32, value: i16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the value at `idx`, equivalent to the javascript `arr[idx] = value`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":4904},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"Int32Array","qualname":"::Int32Array","value":"Int32Array {  }","parent":null,"children":[{"krate":0,"index":4905}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4860},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new","qualname":"<Int32Array>::new","value":"fn (constructor_arg: &JsValue) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Int32Array()`\n constructor creates a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4863},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Int32Array>::new_with_length","value":"fn (length: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int32Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4866},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Int32Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4869},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Int32Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Int32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4872},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"fill","qualname":"<Int32Array>::fill","value":"fn (&self, value: i32, start: u32, end: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4875},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Int32Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4878},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Int32Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method returns a new `TypedArray` on the same\n `ArrayBuffer` store and with the same element types as for this\n `TypedArray` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4881},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"slice","qualname":"<Int32Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Int32Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4884},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Int32Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(i32, u32, Int32Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4887},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"length","qualname":"<Int32Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4890},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Int32Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4893},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Int32Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4896},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set","qualname":"<Int32Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4899},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"get_index","qualname":"<Int32Array>::get_index","value":"fn (&self, idx: u32) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Gets the value at `idx`, equivalent to the javascript `my_var = arr[idx]`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4902},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set_index","qualname":"<Int32Array>::set_index","value":"fn (&self, idx: u32, value: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the value at `idx`, equivalent to the javascript `arr[idx] = value`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5014},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"Uint8Array","qualname":"::Uint8Array","value":"Uint8Array {  }","parent":null,"children":[{"krate":0,"index":5015}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4970},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint8Array>::new","value":"fn (constructor_arg: &JsValue) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint8Array()`\n constructor creates a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4973},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint8Array>::new_with_length","value":"fn (length: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4976},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint8Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4979},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint8Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4982},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint8Array>::fill","value":"fn (&self, value: u8, start: u32, end: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4985},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint8Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4988},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint8Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method returns a new `TypedArray` on the same\n `ArrayBuffer` store and with the same element types as for this\n `TypedArray` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4991},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint8Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint8Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4994},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint8Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u8, u32, Uint8Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":4997},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint8Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5000},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint8Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5003},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint8Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5006},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint8Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5009},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"get_index","qualname":"<Uint8Array>::get_index","value":"fn (&self, idx: u32) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Gets the value at `idx`, equivalent to the javascript `my_var = arr[idx]`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5012},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set_index","qualname":"<Uint8Array>::set_index","value":"fn (&self, idx: u32, value: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the value at `idx`, equivalent to the javascript `arr[idx] = value`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5124},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"Uint8ClampedArray","qualname":"::Uint8ClampedArray","value":"Uint8ClampedArray {  }","parent":null,"children":[{"krate":0,"index":5125}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5080},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint8ClampedArray>::new","value":"fn (constructor_arg: &JsValue) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint8ClampedArray()`\n constructor creates a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5083},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint8ClampedArray>::new_with_length","value":"fn (length: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8ClampedArray()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5086},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint8ClampedArray>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8ClampedArray()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5089},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint8ClampedArray>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint8ClampedArray()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5092},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint8ClampedArray>::fill","value":"fn (&self, value: u8, start: u32, end: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5095},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint8ClampedArray>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5098},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint8ClampedArray>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method returns a new `TypedArray` on the same\n `ArrayBuffer` store and with the same element types as for this\n `TypedArray` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5101},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint8ClampedArray>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint8ClampedArray","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5104},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint8ClampedArray>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u8, u32, Uint8ClampedArray)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5107},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint8ClampedArray>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5110},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint8ClampedArray>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5113},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint8ClampedArray>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5116},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint8ClampedArray>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5119},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"get_index","qualname":"<Uint8ClampedArray>::get_index","value":"fn (&self, idx: u32) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Gets the value at `idx`, equivalent to the javascript `my_var = arr[idx]`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5122},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set_index","qualname":"<Uint8ClampedArray>::set_index","value":"fn (&self, idx: u32, value: u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the value at `idx`, equivalent to the javascript `arr[idx] = value`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5234},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"Uint16Array","qualname":"::Uint16Array","value":"Uint16Array {  }","parent":null,"children":[{"krate":0,"index":5235}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5190},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint16Array>::new","value":"fn (constructor_arg: &JsValue) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint16Array()`\n constructor creates a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5193},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint16Array>::new_with_length","value":"fn (length: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint16Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5196},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint16Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5199},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint16Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint16Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5202},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint16Array>::fill","value":"fn (&self, value: u16, start: u32, end: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5205},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint16Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5208},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint16Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method returns a new `TypedArray` on the same\n `ArrayBuffer` store and with the same element types as for this\n `TypedArray` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5211},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint16Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint16Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5214},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint16Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u16, u32, Uint16Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5217},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint16Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5220},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint16Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5223},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint16Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5226},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint16Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5229},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"get_index","qualname":"<Uint16Array>::get_index","value":"fn (&self, idx: u32) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Gets the value at `idx`, equivalent to the javascript `my_var = arr[idx]`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5232},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set_index","qualname":"<Uint16Array>::set_index","value":"fn (&self, idx: u32, value: u16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the value at `idx`, equivalent to the javascript `arr[idx] = value`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5344},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"Uint32Array","qualname":"::Uint32Array","value":"Uint32Array {  }","parent":null,"children":[{"krate":0,"index":5345}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5300},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new","qualname":"<Uint32Array>::new","value":"fn (constructor_arg: &JsValue) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Uint32Array()`\n constructor creates a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5303},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Uint32Array>::new_with_length","value":"fn (length: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint32Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5306},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Uint32Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5309},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Uint32Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Uint32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5312},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"fill","qualname":"<Uint32Array>::fill","value":"fn (&self, value: u32, start: u32, end: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5315},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Uint32Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5318},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Uint32Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method returns a new `TypedArray` on the same\n `ArrayBuffer` store and with the same element types as for this\n `TypedArray` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5321},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"slice","qualname":"<Uint32Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Uint32Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5324},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Uint32Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(u32, u32, Uint32Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5327},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"length","qualname":"<Uint32Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5330},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Uint32Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5333},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Uint32Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5336},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set","qualname":"<Uint32Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5339},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"get_index","qualname":"<Uint32Array>::get_index","value":"fn (&self, idx: u32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Gets the value at `idx`, equivalent to the javascript `my_var = arr[idx]`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5342},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set_index","qualname":"<Uint32Array>::set_index","value":"fn (&self, idx: u32, value: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the value at `idx`, equivalent to the javascript `arr[idx] = value`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5454},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"Float32Array","qualname":"::Float32Array","value":"Float32Array {  }","parent":null,"children":[{"krate":0,"index":5455}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5410},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new","qualname":"<Float32Array>::new","value":"fn (constructor_arg: &JsValue) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Float32Array()`\n constructor creates a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5413},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Float32Array>::new_with_length","value":"fn (length: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float32Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5416},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Float32Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5419},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Float32Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float32Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5422},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"fill","qualname":"<Float32Array>::fill","value":"fn (&self, value: f32, start: u32, end: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5425},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Float32Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5428},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Float32Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method returns a new `TypedArray` on the same\n `ArrayBuffer` store and with the same element types as for this\n `TypedArray` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5431},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"slice","qualname":"<Float32Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Float32Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5434},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Float32Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(f32, u32, Float32Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5437},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"length","qualname":"<Float32Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5440},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Float32Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5443},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Float32Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5446},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set","qualname":"<Float32Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5449},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"get_index","qualname":"<Float32Array>::get_index","value":"fn (&self, idx: u32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Gets the value at `idx`, equivalent to the javascript `my_var = arr[idx]`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5452},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set_index","qualname":"<Float32Array>::set_index","value":"fn (&self, idx: u32, value: f32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the value at `idx`, equivalent to the javascript `arr[idx] = value`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":5564},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"Float64Array","qualname":"::Float64Array","value":"Float64Array {  }","parent":null,"children":[{"krate":0,"index":5565}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"repr(transparent)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5520},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new","qualname":"<Float64Array>::new","value":"fn (constructor_arg: &JsValue) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The\n `Float64Array()`\n constructor creates a new array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5523},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_length","qualname":"<Float64Array>::new_with_length","value":"fn (length: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float64Array()`\n which creates an array with an internal buffer large\n enough for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5526},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset","qualname":"<Float64Array>::new_with_byte_offset","value":"fn (buffer: &JsValue, byte_offset: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float64Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5529},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"new_with_byte_offset_and_length","qualname":"<Float64Array>::new_with_byte_offset_and_length","value":"fn (buffer: &JsValue, byte_offset: u32, length: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" An\n `Float64Array()`\n which creates an array with the given buffer but is a\n view starting at `byte_offset` for `length` elements.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5532},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"fill","qualname":"<Float64Array>::fill","value":"fn (&self, value: f64, start: u32, end: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The `fill()` method fills all the elements of an array from a start index\n to an end index with a static value. The end index is not included.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5535},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"buffer","qualname":"<Float64Array>::buffer","value":"fn (&self) -> ArrayBuffer","parent":null,"children":[],"decl_id":null,"docs":" The buffer accessor property represents the `ArrayBuffer` referenced\n by a `TypedArray` at construction time.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5538},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"subarray","qualname":"<Float64Array>::subarray","value":"fn (&self, begin: u32, end: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The `subarray()` method returns a new `TypedArray` on the same\n `ArrayBuffer` store and with the same element types as for this\n `TypedArray` object.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5541},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"slice","qualname":"<Float64Array>::slice","value":"fn (&self, begin: u32, end: u32) -> Float64Array","parent":null,"children":[],"decl_id":null,"docs":" The `slice()` method returns a shallow copy of a portion of a typed\n array into a new typed array object. This method has the same algorithm\n as `Array.prototype.slice()`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5544},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"for_each","qualname":"<Float64Array>::for_each","value":"fn (&self, callback: &mut dyn FnMut(f64, u32, Float64Array)) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `forEach()` method executes a provided function once per array\n element. This method has the same algorithm as\n `Array.prototype.forEach()`. `TypedArray` is one of the typed array\n types here.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5547},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"length","qualname":"<Float64Array>::length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The length accessor property represents the length (in elements) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5550},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_length","qualname":"<Float64Array>::byte_length","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteLength accessor property represents the length (in bytes) of a\n typed array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5553},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"byte_offset","qualname":"<Float64Array>::byte_offset","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The byteOffset accessor property represents the offset (in bytes) of a\n typed array from the start of its `ArrayBuffer`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5556},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set","qualname":"<Float64Array>::set","value":"fn (&self, src: &JsValue, offset: u32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `set()` method stores multiple values in the typed array, reading\n input values from a specified array.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5559},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"get_index","qualname":"<Float64Array>::get_index","value":"fn (&self, idx: u32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Gets the value at `idx`, equivalent to the javascript `my_var = arr[idx]`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":5562},"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24},"name":"set_index","qualname":"<Float64Array>::set_index","value":"fn (&self, idx: u32, value: f64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sets the value at `idx`, equivalent to the javascript `arr[idx] = value`.","sig":null,"attributes":[{"value":"allow(bad_style)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}},{"value":"allow(clippy :: all)","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":237897,"byte_end":237912,"line_start":4789,"line_end":4789,"column_start":9,"column_end":24}}]}],"impls":[{"id":54,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":22173,"byte_end":22182,"line_start":436,"line_end":436,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":22495,"byte_end":22504,"line_start":450,"line_end":450,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":15}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":22691,"byte_end":22700,"line_start":457,"line_end":457,"column_start":39,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":22751,"byte_end":22760,"line_start":459,"line_end":459,"column_start":43,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":22774,"byte_end":22779,"line_start":461,"line_end":461,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23379,"byte_end":23384,"line_start":485,"line_end":485,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38462,"byte_end":38469,"line_start":790,"line_end":790,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38715,"byte_end":38722,"line_start":804,"line_end":804,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38843,"byte_end":38850,"line_start":811,"line_end":811,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Inherent","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":61784,"byte_end":61792,"line_start":1241,"line_end":1241,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Inherent","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":68297,"byte_end":68305,"line_start":1388,"line_end":1388,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":70368,"byte_end":70372,"line_start":1459,"line_end":1459,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":70533,"byte_end":70541,"line_start":1467,"line_end":1467,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":70780,"byte_end":70788,"line_start":1479,"line_end":1479,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Inherent","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":70929,"byte_end":70938,"line_start":1487,"line_end":1487,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Inherent","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":90937,"byte_end":90943,"line_start":1905,"line_end":1905,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93685,"byte_end":93691,"line_start":1968,"line_end":1968,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":464,"kind":"Inherent","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":130678,"byte_end":130684,"line_start":2660,"line_end":2660,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":465,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":131075,"byte_end":131081,"line_start":2675,"line_end":2675,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":466,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":131212,"byte_end":131218,"line_start":2682,"line_end":2682,"column_start":13,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":840,"kind":"Inherent","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":205746,"byte_end":205754,"line_start":4129,"line_end":4129,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":841,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":208622,"byte_end":208630,"line_start":4202,"line_end":4202,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":842,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":208750,"byte_end":208758,"line_start":4208,"line_end":4208,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":843,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":208895,"byte_end":208903,"line_start":4214,"line_end":4214,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":112}],"docs":"","sig":null,"attributes":[]},{"id":844,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209047,"byte_end":209055,"line_start":4220,"line_end":4220,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":845,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209195,"byte_end":209203,"line_start":4226,"line_end":4226,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":846,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209329,"byte_end":209337,"line_start":4232,"line_end":4232,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":847,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209426,"byte_end":209434,"line_start":4238,"line_end":4238,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":848,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209583,"byte_end":209589,"line_start":4245,"line_end":4245,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":849,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209705,"byte_end":209711,"line_start":4251,"line_end":4251,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":850,"kind":"Direct","span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209801,"byte_end":209809,"line_start":4257,"line_end":4257,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":22173,"byte_end":22182,"line_start":436,"line_end":436,"column_start":34,"column_end":43},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":4852}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":22495,"byte_end":22504,"line_start":450,"line_end":450,"column_start":45,"column_end":54},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":4778}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":22691,"byte_end":22700,"line_start":457,"line_end":457,"column_start":39,"column_end":48},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":5114}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":22751,"byte_end":22760,"line_start":459,"line_end":459,"column_start":43,"column_end":52},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":355},"to":{"krate":2,"index":4807}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":22774,"byte_end":22779,"line_start":461,"line_end":461,"column_start":6,"column_end":11},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":23379,"byte_end":23384,"line_start":485,"line_end":485,"column_start":40,"column_end":45},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":342},"to":{"krate":2,"index":4755}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38462,"byte_end":38469,"line_start":790,"line_end":790,"column_start":21,"column_end":28},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":633},"to":{"krate":2,"index":1825}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38715,"byte_end":38722,"line_start":804,"line_end":804,"column_start":26,"column_end":33},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":633},"to":{"krate":2,"index":1634}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":38843,"byte_end":38850,"line_start":811,"line_end":811,"column_start":21,"column_end":28},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":633},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":61784,"byte_end":61792,"line_start":1241,"line_end":1241,"column_start":6,"column_end":14},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":68297,"byte_end":68305,"line_start":1388,"line_end":1388,"column_start":6,"column_end":14},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":1344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":70368,"byte_end":70372,"line_start":1459,"line_end":1459,"column_start":34,"column_end":38},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":41},"to":{"krate":2,"index":4852}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":70533,"byte_end":70541,"line_start":1467,"line_end":1467,"column_start":23,"column_end":31},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":1344},"to":{"krate":2,"index":4759}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":70780,"byte_end":70788,"line_start":1479,"line_end":1479,"column_start":30,"column_end":38},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":45},"to":{"krate":2,"index":4852}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":70929,"byte_end":70938,"line_start":1487,"line_end":1487,"column_start":6,"column_end":15},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":48},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":90937,"byte_end":90943,"line_start":1905,"line_end":1905,"column_start":6,"column_end":12},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":1718},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":93685,"byte_end":93691,"line_start":1968,"line_end":1968,"column_start":21,"column_end":27},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":1718},"to":{"krate":2,"index":6069}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":130678,"byte_end":130684,"line_start":2660,"line_end":2660,"column_start":6,"column_end":12},"kind":{"Impl":{"id":464}},"from":{"krate":0,"index":2146},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":131075,"byte_end":131081,"line_start":2675,"line_end":2675,"column_start":20,"column_end":26},"kind":{"Impl":{"id":465}},"from":{"krate":0,"index":2146},"to":{"krate":2,"index":1634}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":131212,"byte_end":131218,"line_start":2682,"line_end":2682,"column_start":13,"column_end":19},"kind":{"Impl":{"id":466}},"from":{"krate":0,"index":2146},"to":{"krate":2,"index":1639}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":205746,"byte_end":205754,"line_start":4129,"line_end":4129,"column_start":6,"column_end":14},"kind":{"Impl":{"id":840}},"from":{"krate":0,"index":3902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":208622,"byte_end":208630,"line_start":4202,"line_end":4202,"column_start":25,"column_end":33},"kind":{"Impl":{"id":841}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":1634}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":208750,"byte_end":208758,"line_start":4208,"line_end":4208,"column_start":33,"column_end":41},"kind":{"Impl":{"id":842}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":1634}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":208895,"byte_end":208903,"line_start":4214,"line_end":4214,"column_start":28,"column_end":36},"kind":{"Impl":{"id":843}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":1634}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209047,"byte_end":209055,"line_start":4220,"line_end":4220,"column_start":36,"column_end":44},"kind":{"Impl":{"id":844}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":1634}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209195,"byte_end":209203,"line_start":4226,"line_end":4226,"column_start":28,"column_end":36},"kind":{"Impl":{"id":845}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":1825}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209329,"byte_end":209337,"line_start":4232,"line_end":4232,"column_start":23,"column_end":31},"kind":{"Impl":{"id":846}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":1825}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209426,"byte_end":209434,"line_start":4238,"line_end":4238,"column_start":21,"column_end":29},"kind":{"Impl":{"id":847}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":1825}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209583,"byte_end":209589,"line_start":4245,"line_end":4245,"column_start":33,"column_end":39},"kind":{"Impl":{"id":848}},"from":{"krate":5,"index":4867},"to":{"krate":2,"index":1825}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209705,"byte_end":209711,"line_start":4251,"line_end":4251,"column_start":25,"column_end":31},"kind":{"Impl":{"id":849}},"from":{"krate":5,"index":4867},"to":{"krate":2,"index":1825}},{"span":{"file_name":"/Users/helabenkhalfallah/.cargo/registry/src/github.com-1ecc6299db9ec823/js-sys-0.3.41/src/lib.rs","byte_start":209801,"byte_end":209809,"line_start":4257,"line_end":4257,"column_start":21,"column_end":29},"kind":{"Impl":{"id":850}},"from":{"krate":0,"index":3902},"to":{"krate":2,"index":6069}}]}